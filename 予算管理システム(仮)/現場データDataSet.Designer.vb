'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:4.0.30319.42000
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("現場データDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class 現場データDataSet
    Inherits Global.System.Data.DataSet
    
    Private tablebudget_summary As budget_summaryDataTable
    
    Private tableclosigdate As closigdateDataTable
    
    Private tablecost_breakdowns As cost_breakdownsDataTable
    
    Private tablecost_classes As cost_classesDataTable
    
    Private tablecost_masters As cost_mastersDataTable
    
    Private tabledetails As detailsDataTable
    
    Private tableestimates As estimatesDataTable
    
    Private tableexpense_breakdowns As expense_breakdownsDataTable
    
    Private tableoutsourcers As outsourcersDataTable
    
    Private tableoutsourcing_plans As outsourcing_plansDataTable
    
    Private tableoutsourcing_reports As outsourcing_reportsDataTable
    
    Private tableproductions As productionsDataTable
    
    Private tableproject_cost_breakdowns As project_cost_breakdownsDataTable
    
    Private tableproject_costs As project_costsDataTable
    
    Private tablepurchase_orders As purchase_ordersDataTable
    
    Private tablesite_costs As site_costsDataTable
    
    Private tablesite_expenses As site_expensesDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("budget_summary")) Is Nothing) Then
                MyBase.Tables.Add(New budget_summaryDataTable(ds.Tables("budget_summary")))
            End If
            If (Not (ds.Tables("closigdate")) Is Nothing) Then
                MyBase.Tables.Add(New closigdateDataTable(ds.Tables("closigdate")))
            End If
            If (Not (ds.Tables("cost_breakdowns")) Is Nothing) Then
                MyBase.Tables.Add(New cost_breakdownsDataTable(ds.Tables("cost_breakdowns")))
            End If
            If (Not (ds.Tables("cost_classes")) Is Nothing) Then
                MyBase.Tables.Add(New cost_classesDataTable(ds.Tables("cost_classes")))
            End If
            If (Not (ds.Tables("cost_masters")) Is Nothing) Then
                MyBase.Tables.Add(New cost_mastersDataTable(ds.Tables("cost_masters")))
            End If
            If (Not (ds.Tables("details")) Is Nothing) Then
                MyBase.Tables.Add(New detailsDataTable(ds.Tables("details")))
            End If
            If (Not (ds.Tables("estimates")) Is Nothing) Then
                MyBase.Tables.Add(New estimatesDataTable(ds.Tables("estimates")))
            End If
            If (Not (ds.Tables("expense_breakdowns")) Is Nothing) Then
                MyBase.Tables.Add(New expense_breakdownsDataTable(ds.Tables("expense_breakdowns")))
            End If
            If (Not (ds.Tables("outsourcers")) Is Nothing) Then
                MyBase.Tables.Add(New outsourcersDataTable(ds.Tables("outsourcers")))
            End If
            If (Not (ds.Tables("outsourcing_plans")) Is Nothing) Then
                MyBase.Tables.Add(New outsourcing_plansDataTable(ds.Tables("outsourcing_plans")))
            End If
            If (Not (ds.Tables("outsourcing_reports")) Is Nothing) Then
                MyBase.Tables.Add(New outsourcing_reportsDataTable(ds.Tables("outsourcing_reports")))
            End If
            If (Not (ds.Tables("productions")) Is Nothing) Then
                MyBase.Tables.Add(New productionsDataTable(ds.Tables("productions")))
            End If
            If (Not (ds.Tables("project_cost_breakdowns")) Is Nothing) Then
                MyBase.Tables.Add(New project_cost_breakdownsDataTable(ds.Tables("project_cost_breakdowns")))
            End If
            If (Not (ds.Tables("project_costs")) Is Nothing) Then
                MyBase.Tables.Add(New project_costsDataTable(ds.Tables("project_costs")))
            End If
            If (Not (ds.Tables("purchase_orders")) Is Nothing) Then
                MyBase.Tables.Add(New purchase_ordersDataTable(ds.Tables("purchase_orders")))
            End If
            If (Not (ds.Tables("site_costs")) Is Nothing) Then
                MyBase.Tables.Add(New site_costsDataTable(ds.Tables("site_costs")))
            End If
            If (Not (ds.Tables("site_expenses")) Is Nothing) Then
                MyBase.Tables.Add(New site_expensesDataTable(ds.Tables("site_expenses")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property budget_summary() As budget_summaryDataTable
        Get
            Return Me.tablebudget_summary
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property closigdate() As closigdateDataTable
        Get
            Return Me.tableclosigdate
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cost_breakdowns() As cost_breakdownsDataTable
        Get
            Return Me.tablecost_breakdowns
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cost_classes() As cost_classesDataTable
        Get
            Return Me.tablecost_classes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cost_masters() As cost_mastersDataTable
        Get
            Return Me.tablecost_masters
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property details() As detailsDataTable
        Get
            Return Me.tabledetails
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property estimates() As estimatesDataTable
        Get
            Return Me.tableestimates
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property expense_breakdowns() As expense_breakdownsDataTable
        Get
            Return Me.tableexpense_breakdowns
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property outsourcers() As outsourcersDataTable
        Get
            Return Me.tableoutsourcers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property outsourcing_plans() As outsourcing_plansDataTable
        Get
            Return Me.tableoutsourcing_plans
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property outsourcing_reports() As outsourcing_reportsDataTable
        Get
            Return Me.tableoutsourcing_reports
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property productions() As productionsDataTable
        Get
            Return Me.tableproductions
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property project_cost_breakdowns() As project_cost_breakdownsDataTable
        Get
            Return Me.tableproject_cost_breakdowns
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property project_costs() As project_costsDataTable
        Get
            Return Me.tableproject_costs
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property purchase_orders() As purchase_ordersDataTable
        Get
            Return Me.tablepurchase_orders
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property site_costs() As site_costsDataTable
        Get
            Return Me.tablesite_costs
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property site_expenses() As site_expensesDataTable
        Get
            Return Me.tablesite_expenses
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As 現場データDataSet = CType(MyBase.Clone,現場データDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("budget_summary")) Is Nothing) Then
                MyBase.Tables.Add(New budget_summaryDataTable(ds.Tables("budget_summary")))
            End If
            If (Not (ds.Tables("closigdate")) Is Nothing) Then
                MyBase.Tables.Add(New closigdateDataTable(ds.Tables("closigdate")))
            End If
            If (Not (ds.Tables("cost_breakdowns")) Is Nothing) Then
                MyBase.Tables.Add(New cost_breakdownsDataTable(ds.Tables("cost_breakdowns")))
            End If
            If (Not (ds.Tables("cost_classes")) Is Nothing) Then
                MyBase.Tables.Add(New cost_classesDataTable(ds.Tables("cost_classes")))
            End If
            If (Not (ds.Tables("cost_masters")) Is Nothing) Then
                MyBase.Tables.Add(New cost_mastersDataTable(ds.Tables("cost_masters")))
            End If
            If (Not (ds.Tables("details")) Is Nothing) Then
                MyBase.Tables.Add(New detailsDataTable(ds.Tables("details")))
            End If
            If (Not (ds.Tables("estimates")) Is Nothing) Then
                MyBase.Tables.Add(New estimatesDataTable(ds.Tables("estimates")))
            End If
            If (Not (ds.Tables("expense_breakdowns")) Is Nothing) Then
                MyBase.Tables.Add(New expense_breakdownsDataTable(ds.Tables("expense_breakdowns")))
            End If
            If (Not (ds.Tables("outsourcers")) Is Nothing) Then
                MyBase.Tables.Add(New outsourcersDataTable(ds.Tables("outsourcers")))
            End If
            If (Not (ds.Tables("outsourcing_plans")) Is Nothing) Then
                MyBase.Tables.Add(New outsourcing_plansDataTable(ds.Tables("outsourcing_plans")))
            End If
            If (Not (ds.Tables("outsourcing_reports")) Is Nothing) Then
                MyBase.Tables.Add(New outsourcing_reportsDataTable(ds.Tables("outsourcing_reports")))
            End If
            If (Not (ds.Tables("productions")) Is Nothing) Then
                MyBase.Tables.Add(New productionsDataTable(ds.Tables("productions")))
            End If
            If (Not (ds.Tables("project_cost_breakdowns")) Is Nothing) Then
                MyBase.Tables.Add(New project_cost_breakdownsDataTable(ds.Tables("project_cost_breakdowns")))
            End If
            If (Not (ds.Tables("project_costs")) Is Nothing) Then
                MyBase.Tables.Add(New project_costsDataTable(ds.Tables("project_costs")))
            End If
            If (Not (ds.Tables("purchase_orders")) Is Nothing) Then
                MyBase.Tables.Add(New purchase_ordersDataTable(ds.Tables("purchase_orders")))
            End If
            If (Not (ds.Tables("site_costs")) Is Nothing) Then
                MyBase.Tables.Add(New site_costsDataTable(ds.Tables("site_costs")))
            End If
            If (Not (ds.Tables("site_expenses")) Is Nothing) Then
                MyBase.Tables.Add(New site_expensesDataTable(ds.Tables("site_expenses")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablebudget_summary = CType(MyBase.Tables("budget_summary"),budget_summaryDataTable)
        If (initTable = true) Then
            If (Not (Me.tablebudget_summary) Is Nothing) Then
                Me.tablebudget_summary.InitVars
            End If
        End If
        Me.tableclosigdate = CType(MyBase.Tables("closigdate"),closigdateDataTable)
        If (initTable = true) Then
            If (Not (Me.tableclosigdate) Is Nothing) Then
                Me.tableclosigdate.InitVars
            End If
        End If
        Me.tablecost_breakdowns = CType(MyBase.Tables("cost_breakdowns"),cost_breakdownsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecost_breakdowns) Is Nothing) Then
                Me.tablecost_breakdowns.InitVars
            End If
        End If
        Me.tablecost_classes = CType(MyBase.Tables("cost_classes"),cost_classesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecost_classes) Is Nothing) Then
                Me.tablecost_classes.InitVars
            End If
        End If
        Me.tablecost_masters = CType(MyBase.Tables("cost_masters"),cost_mastersDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecost_masters) Is Nothing) Then
                Me.tablecost_masters.InitVars
            End If
        End If
        Me.tabledetails = CType(MyBase.Tables("details"),detailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledetails) Is Nothing) Then
                Me.tabledetails.InitVars
            End If
        End If
        Me.tableestimates = CType(MyBase.Tables("estimates"),estimatesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableestimates) Is Nothing) Then
                Me.tableestimates.InitVars
            End If
        End If
        Me.tableexpense_breakdowns = CType(MyBase.Tables("expense_breakdowns"),expense_breakdownsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableexpense_breakdowns) Is Nothing) Then
                Me.tableexpense_breakdowns.InitVars
            End If
        End If
        Me.tableoutsourcers = CType(MyBase.Tables("outsourcers"),outsourcersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableoutsourcers) Is Nothing) Then
                Me.tableoutsourcers.InitVars
            End If
        End If
        Me.tableoutsourcing_plans = CType(MyBase.Tables("outsourcing_plans"),outsourcing_plansDataTable)
        If (initTable = true) Then
            If (Not (Me.tableoutsourcing_plans) Is Nothing) Then
                Me.tableoutsourcing_plans.InitVars
            End If
        End If
        Me.tableoutsourcing_reports = CType(MyBase.Tables("outsourcing_reports"),outsourcing_reportsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableoutsourcing_reports) Is Nothing) Then
                Me.tableoutsourcing_reports.InitVars
            End If
        End If
        Me.tableproductions = CType(MyBase.Tables("productions"),productionsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproductions) Is Nothing) Then
                Me.tableproductions.InitVars
            End If
        End If
        Me.tableproject_cost_breakdowns = CType(MyBase.Tables("project_cost_breakdowns"),project_cost_breakdownsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproject_cost_breakdowns) Is Nothing) Then
                Me.tableproject_cost_breakdowns.InitVars
            End If
        End If
        Me.tableproject_costs = CType(MyBase.Tables("project_costs"),project_costsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproject_costs) Is Nothing) Then
                Me.tableproject_costs.InitVars
            End If
        End If
        Me.tablepurchase_orders = CType(MyBase.Tables("purchase_orders"),purchase_ordersDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepurchase_orders) Is Nothing) Then
                Me.tablepurchase_orders.InitVars
            End If
        End If
        Me.tablesite_costs = CType(MyBase.Tables("site_costs"),site_costsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesite_costs) Is Nothing) Then
                Me.tablesite_costs.InitVars
            End If
        End If
        Me.tablesite_expenses = CType(MyBase.Tables("site_expenses"),site_expensesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesite_expenses) Is Nothing) Then
                Me.tablesite_expenses.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "現場データDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/現場データDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablebudget_summary = New budget_summaryDataTable()
        MyBase.Tables.Add(Me.tablebudget_summary)
        Me.tableclosigdate = New closigdateDataTable()
        MyBase.Tables.Add(Me.tableclosigdate)
        Me.tablecost_breakdowns = New cost_breakdownsDataTable()
        MyBase.Tables.Add(Me.tablecost_breakdowns)
        Me.tablecost_classes = New cost_classesDataTable()
        MyBase.Tables.Add(Me.tablecost_classes)
        Me.tablecost_masters = New cost_mastersDataTable()
        MyBase.Tables.Add(Me.tablecost_masters)
        Me.tabledetails = New detailsDataTable()
        MyBase.Tables.Add(Me.tabledetails)
        Me.tableestimates = New estimatesDataTable()
        MyBase.Tables.Add(Me.tableestimates)
        Me.tableexpense_breakdowns = New expense_breakdownsDataTable()
        MyBase.Tables.Add(Me.tableexpense_breakdowns)
        Me.tableoutsourcers = New outsourcersDataTable()
        MyBase.Tables.Add(Me.tableoutsourcers)
        Me.tableoutsourcing_plans = New outsourcing_plansDataTable()
        MyBase.Tables.Add(Me.tableoutsourcing_plans)
        Me.tableoutsourcing_reports = New outsourcing_reportsDataTable()
        MyBase.Tables.Add(Me.tableoutsourcing_reports)
        Me.tableproductions = New productionsDataTable()
        MyBase.Tables.Add(Me.tableproductions)
        Me.tableproject_cost_breakdowns = New project_cost_breakdownsDataTable()
        MyBase.Tables.Add(Me.tableproject_cost_breakdowns)
        Me.tableproject_costs = New project_costsDataTable()
        MyBase.Tables.Add(Me.tableproject_costs)
        Me.tablepurchase_orders = New purchase_ordersDataTable()
        MyBase.Tables.Add(Me.tablepurchase_orders)
        Me.tablesite_costs = New site_costsDataTable()
        MyBase.Tables.Add(Me.tablesite_costs)
        Me.tablesite_expenses = New site_expensesDataTable()
        MyBase.Tables.Add(Me.tablesite_expenses)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializebudget_summary() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeclosigdate() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializecost_breakdowns() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializecost_classes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializecost_masters() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializedetails() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeestimates() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeexpense_breakdowns() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeoutsourcers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeoutsourcing_plans() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeoutsourcing_reports() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeproductions() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeproject_cost_breakdowns() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeproject_costs() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializepurchase_orders() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializesite_costs() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializesite_expenses() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As 現場データDataSet = New 現場データDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub budget_summaryRowChangeEventHandler(ByVal sender As Object, ByVal e As budget_summaryRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub closigdateRowChangeEventHandler(ByVal sender As Object, ByVal e As closigdateRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub cost_breakdownsRowChangeEventHandler(ByVal sender As Object, ByVal e As cost_breakdownsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub cost_classesRowChangeEventHandler(ByVal sender As Object, ByVal e As cost_classesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub cost_mastersRowChangeEventHandler(ByVal sender As Object, ByVal e As cost_mastersRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub detailsRowChangeEventHandler(ByVal sender As Object, ByVal e As detailsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub estimatesRowChangeEventHandler(ByVal sender As Object, ByVal e As estimatesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub expense_breakdownsRowChangeEventHandler(ByVal sender As Object, ByVal e As expense_breakdownsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub outsourcersRowChangeEventHandler(ByVal sender As Object, ByVal e As outsourcersRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub outsourcing_plansRowChangeEventHandler(ByVal sender As Object, ByVal e As outsourcing_plansRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub outsourcing_reportsRowChangeEventHandler(ByVal sender As Object, ByVal e As outsourcing_reportsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub productionsRowChangeEventHandler(ByVal sender As Object, ByVal e As productionsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub project_cost_breakdownsRowChangeEventHandler(ByVal sender As Object, ByVal e As project_cost_breakdownsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub project_costsRowChangeEventHandler(ByVal sender As Object, ByVal e As project_costsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub purchase_ordersRowChangeEventHandler(ByVal sender As Object, ByVal e As purchase_ordersRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub site_costsRowChangeEventHandler(ByVal sender As Object, ByVal e As site_costsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub site_expensesRowChangeEventHandler(ByVal sender As Object, ByVal e As site_expensesRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class budget_summaryDataTable
        Inherits Global.System.Data.TypedTableBase(Of budget_summaryRow)
        
        Private columncntrct_no As Global.System.Data.DataColumn
        
        Private columnprjct_term_s As Global.System.Data.DataColumn
        
        Private columnprjct_term_e As Global.System.Data.DataColumn
        
        Private columncntrct_amount As Global.System.Data.DataColumn
        
        Private columnprjct_category As Global.System.Data.DataColumn
        
        Private columncnsdrtn_date As Global.System.Data.DataColumn
        
        Private columnprjct_summary As Global.System.Data.DataColumn
        
        Private columnsubcontract_rate As Global.System.Data.DataColumn
        
        Private columnremarks As Global.System.Data.DataColumn
        
        Private columndepartment As Global.System.Data.DataColumn
        
        Private columndirector As Global.System.Data.DataColumn
        
        Private columnmanager As Global.System.Data.DataColumn
        
        Private columnchief As Global.System.Data.DataColumn
        
        Private columnexpert_1 As Global.System.Data.DataColumn
        
        Private columnexpert_2 As Global.System.Data.DataColumn
        
        Private columnexpert_3 As Global.System.Data.DataColumn
        
        Private columnstaff_1 As Global.System.Data.DataColumn
        
        Private columnstaff_2 As Global.System.Data.DataColumn
        
        Private columnstaff_3 As Global.System.Data.DataColumn
        
        Private columnstaff_4 As Global.System.Data.DataColumn
        
        Private columnbdgt_dprtmnt As Global.System.Data.DataColumn
        
        Private columnexpense_rate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "budget_summary"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cntrct_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncntrct_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjct_term_sColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjct_term_s
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjct_term_eColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjct_term_e
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cntrct_amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncntrct_amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjct_categoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjct_category
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cnsdrtn_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncnsdrtn_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjct_summaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjct_summary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property subcontract_rateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubcontract_rate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property remarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnremarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property departmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndepartment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property directorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndirector
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property managerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmanager
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property chiefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchief
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property expert_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpert_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property expert_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpert_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property expert_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpert_3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property staff_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstaff_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property staff_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstaff_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property staff_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstaff_3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property staff_4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstaff_4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property bdgt_dprtmntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbdgt_dprtmnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property expense_rateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpense_rate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As budget_summaryRow
            Get
                Return CType(Me.Rows(index),budget_summaryRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event budget_summaryRowChanging As budget_summaryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event budget_summaryRowChanged As budget_summaryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event budget_summaryRowDeleting As budget_summaryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event budget_summaryRowDeleted As budget_summaryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addbudget_summaryRow(ByVal row As budget_summaryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addbudget_summaryRow( _
                    ByVal cntrct_no As Short,  _
                    ByVal prjct_term_s As Date,  _
                    ByVal prjct_term_e As Date,  _
                    ByVal cntrct_amount As Decimal,  _
                    ByVal prjct_category As String,  _
                    ByVal cnsdrtn_date As Date,  _
                    ByVal prjct_summary As String,  _
                    ByVal subcontract_rate As String,  _
                    ByVal remarks As String,  _
                    ByVal department As String,  _
                    ByVal director As String,  _
                    ByVal manager As String,  _
                    ByVal chief As String,  _
                    ByVal expert_1 As String,  _
                    ByVal expert_2 As String,  _
                    ByVal expert_3 As String,  _
                    ByVal staff_1 As String,  _
                    ByVal staff_2 As String,  _
                    ByVal staff_3 As String,  _
                    ByVal staff_4 As String,  _
                    ByVal bdgt_dprtmnt As String,  _
                    ByVal expense_rate As Decimal) As budget_summaryRow
            Dim rowbudget_summaryRow As budget_summaryRow = CType(Me.NewRow,budget_summaryRow)
            Dim columnValuesArray() As Object = New Object() {cntrct_no, prjct_term_s, prjct_term_e, cntrct_amount, prjct_category, cnsdrtn_date, prjct_summary, subcontract_rate, remarks, department, director, manager, chief, expert_1, expert_2, expert_3, staff_1, staff_2, staff_3, staff_4, bdgt_dprtmnt, expense_rate}
            rowbudget_summaryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowbudget_summaryRow)
            Return rowbudget_summaryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindBycntrct_no(ByVal cntrct_no As Short) As budget_summaryRow
            Return CType(Me.Rows.Find(New Object() {cntrct_no}),budget_summaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As budget_summaryDataTable = CType(MyBase.Clone,budget_summaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New budget_summaryDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columncntrct_no = MyBase.Columns("cntrct_no")
            Me.columnprjct_term_s = MyBase.Columns("prjct_term_s")
            Me.columnprjct_term_e = MyBase.Columns("prjct_term_e")
            Me.columncntrct_amount = MyBase.Columns("cntrct_amount")
            Me.columnprjct_category = MyBase.Columns("prjct_category")
            Me.columncnsdrtn_date = MyBase.Columns("cnsdrtn_date")
            Me.columnprjct_summary = MyBase.Columns("prjct_summary")
            Me.columnsubcontract_rate = MyBase.Columns("subcontract_rate")
            Me.columnremarks = MyBase.Columns("remarks")
            Me.columndepartment = MyBase.Columns("department")
            Me.columndirector = MyBase.Columns("director")
            Me.columnmanager = MyBase.Columns("manager")
            Me.columnchief = MyBase.Columns("chief")
            Me.columnexpert_1 = MyBase.Columns("expert_1")
            Me.columnexpert_2 = MyBase.Columns("expert_2")
            Me.columnexpert_3 = MyBase.Columns("expert_3")
            Me.columnstaff_1 = MyBase.Columns("staff_1")
            Me.columnstaff_2 = MyBase.Columns("staff_2")
            Me.columnstaff_3 = MyBase.Columns("staff_3")
            Me.columnstaff_4 = MyBase.Columns("staff_4")
            Me.columnbdgt_dprtmnt = MyBase.Columns("bdgt_dprtmnt")
            Me.columnexpense_rate = MyBase.Columns("expense_rate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columncntrct_no = New Global.System.Data.DataColumn("cntrct_no", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncntrct_no)
            Me.columnprjct_term_s = New Global.System.Data.DataColumn("prjct_term_s", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjct_term_s)
            Me.columnprjct_term_e = New Global.System.Data.DataColumn("prjct_term_e", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjct_term_e)
            Me.columncntrct_amount = New Global.System.Data.DataColumn("cntrct_amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncntrct_amount)
            Me.columnprjct_category = New Global.System.Data.DataColumn("prjct_category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjct_category)
            Me.columncnsdrtn_date = New Global.System.Data.DataColumn("cnsdrtn_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncnsdrtn_date)
            Me.columnprjct_summary = New Global.System.Data.DataColumn("prjct_summary", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjct_summary)
            Me.columnsubcontract_rate = New Global.System.Data.DataColumn("subcontract_rate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubcontract_rate)
            Me.columnremarks = New Global.System.Data.DataColumn("remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnremarks)
            Me.columndepartment = New Global.System.Data.DataColumn("department", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndepartment)
            Me.columndirector = New Global.System.Data.DataColumn("director", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndirector)
            Me.columnmanager = New Global.System.Data.DataColumn("manager", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanager)
            Me.columnchief = New Global.System.Data.DataColumn("chief", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchief)
            Me.columnexpert_1 = New Global.System.Data.DataColumn("expert_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpert_1)
            Me.columnexpert_2 = New Global.System.Data.DataColumn("expert_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpert_2)
            Me.columnexpert_3 = New Global.System.Data.DataColumn("expert_3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpert_3)
            Me.columnstaff_1 = New Global.System.Data.DataColumn("staff_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstaff_1)
            Me.columnstaff_2 = New Global.System.Data.DataColumn("staff_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstaff_2)
            Me.columnstaff_3 = New Global.System.Data.DataColumn("staff_3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstaff_3)
            Me.columnstaff_4 = New Global.System.Data.DataColumn("staff_4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstaff_4)
            Me.columnbdgt_dprtmnt = New Global.System.Data.DataColumn("bdgt_dprtmnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbdgt_dprtmnt)
            Me.columnexpense_rate = New Global.System.Data.DataColumn("expense_rate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpense_rate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncntrct_no}, true))
            Me.columncntrct_no.AllowDBNull = false
            Me.columncntrct_no.Unique = true
            Me.columnprjct_term_s.AllowDBNull = false
            Me.columnprjct_term_e.AllowDBNull = false
            Me.columncntrct_amount.AllowDBNull = false
            Me.columnprjct_category.AllowDBNull = false
            Me.columnprjct_category.MaxLength = 20
            Me.columncnsdrtn_date.AllowDBNull = false
            Me.columnprjct_summary.AllowDBNull = false
            Me.columnprjct_summary.MaxLength = 100
            Me.columnsubcontract_rate.AllowDBNull = false
            Me.columnsubcontract_rate.MaxLength = 100
            Me.columnremarks.AllowDBNull = false
            Me.columnremarks.MaxLength = 100
            Me.columndepartment.AllowDBNull = false
            Me.columndepartment.MaxLength = 10
            Me.columndirector.AllowDBNull = false
            Me.columndirector.MaxLength = 20
            Me.columnmanager.AllowDBNull = false
            Me.columnmanager.MaxLength = 20
            Me.columnchief.AllowDBNull = false
            Me.columnchief.MaxLength = 20
            Me.columnexpert_1.AllowDBNull = false
            Me.columnexpert_1.MaxLength = 20
            Me.columnexpert_2.AllowDBNull = false
            Me.columnexpert_2.MaxLength = 20
            Me.columnexpert_3.AllowDBNull = false
            Me.columnexpert_3.MaxLength = 20
            Me.columnstaff_1.AllowDBNull = false
            Me.columnstaff_1.MaxLength = 20
            Me.columnstaff_2.AllowDBNull = false
            Me.columnstaff_2.MaxLength = 20
            Me.columnstaff_3.AllowDBNull = false
            Me.columnstaff_3.MaxLength = 20
            Me.columnstaff_4.AllowDBNull = false
            Me.columnstaff_4.MaxLength = 20
            Me.columnbdgt_dprtmnt.AllowDBNull = false
            Me.columnbdgt_dprtmnt.MaxLength = 20
            Me.columnexpense_rate.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newbudget_summaryRow() As budget_summaryRow
            Return CType(Me.NewRow,budget_summaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New budget_summaryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(budget_summaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.budget_summaryRowChangedEvent) Is Nothing) Then
                RaiseEvent budget_summaryRowChanged(Me, New budget_summaryRowChangeEvent(CType(e.Row,budget_summaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.budget_summaryRowChangingEvent) Is Nothing) Then
                RaiseEvent budget_summaryRowChanging(Me, New budget_summaryRowChangeEvent(CType(e.Row,budget_summaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.budget_summaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent budget_summaryRowDeleted(Me, New budget_summaryRowChangeEvent(CType(e.Row,budget_summaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.budget_summaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent budget_summaryRowDeleting(Me, New budget_summaryRowChangeEvent(CType(e.Row,budget_summaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removebudget_summaryRow(ByVal row As budget_summaryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "budget_summaryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class closigdateDataTable
        Inherits Global.System.Data.TypedTableBase(Of closigdateRow)
        
        Private columnclosigdate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "closigdate"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property closigdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclosigdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As closigdateRow
            Get
                Return CType(Me.Rows(index),closigdateRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event closigdateRowChanging As closigdateRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event closigdateRowChanged As closigdateRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event closigdateRowDeleting As closigdateRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event closigdateRowDeleted As closigdateRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddclosigdateRow(ByVal row As closigdateRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddclosigdateRow(ByVal closigdate As Date) As closigdateRow
            Dim rowclosigdateRow As closigdateRow = CType(Me.NewRow,closigdateRow)
            Dim columnValuesArray() As Object = New Object() {closigdate}
            rowclosigdateRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowclosigdateRow)
            Return rowclosigdateRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByclosigdate(ByVal closigdate As Date) As closigdateRow
            Return CType(Me.Rows.Find(New Object() {closigdate}),closigdateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As closigdateDataTable = CType(MyBase.Clone,closigdateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New closigdateDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnclosigdate = MyBase.Columns("closigdate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnclosigdate = New Global.System.Data.DataColumn("closigdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclosigdate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnclosigdate}, true))
            Me.columnclosigdate.AllowDBNull = false
            Me.columnclosigdate.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewclosigdateRow() As closigdateRow
            Return CType(Me.NewRow,closigdateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New closigdateRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(closigdateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.closigdateRowChangedEvent) Is Nothing) Then
                RaiseEvent closigdateRowChanged(Me, New closigdateRowChangeEvent(CType(e.Row,closigdateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.closigdateRowChangingEvent) Is Nothing) Then
                RaiseEvent closigdateRowChanging(Me, New closigdateRowChangeEvent(CType(e.Row,closigdateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.closigdateRowDeletedEvent) Is Nothing) Then
                RaiseEvent closigdateRowDeleted(Me, New closigdateRowChangeEvent(CType(e.Row,closigdateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.closigdateRowDeletingEvent) Is Nothing) Then
                RaiseEvent closigdateRowDeleting(Me, New closigdateRowChangeEvent(CType(e.Row,closigdateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveclosigdateRow(ByVal row As closigdateRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "closigdateDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class cost_breakdownsDataTable
        Inherits Global.System.Data.TypedTableBase(Of cost_breakdownsRow)
        
        Private columncst_bd_id As Global.System.Data.DataColumn
        
        Private columnstcst_id As Global.System.Data.DataColumn
        
        Private columncst_bd_no As Global.System.Data.DataColumn
        
        Private columncst_bd_name As Global.System.Data.DataColumn
        
        Private columncst_bd_spec As Global.System.Data.DataColumn
        
        Private columncst_bd_unit As Global.System.Data.DataColumn
        
        Private columncst_bd_quanity As Global.System.Data.DataColumn
        
        Private columncst_bd_costea As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "cost_breakdowns"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cst_bd_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncst_bd_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property stcst_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstcst_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cst_bd_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncst_bd_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cst_bd_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncst_bd_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cst_bd_specColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncst_bd_spec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cst_bd_unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncst_bd_unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cst_bd_quanityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncst_bd_quanity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cst_bd_costeaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncst_bd_costea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As cost_breakdownsRow
            Get
                Return CType(Me.Rows(index),cost_breakdownsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event cost_breakdownsRowChanging As cost_breakdownsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event cost_breakdownsRowChanged As cost_breakdownsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event cost_breakdownsRowDeleting As cost_breakdownsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event cost_breakdownsRowDeleted As cost_breakdownsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addcost_breakdownsRow(ByVal row As cost_breakdownsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addcost_breakdownsRow(ByVal stcst_id As Integer, ByVal cst_bd_no As Short, ByVal cst_bd_name As String, ByVal cst_bd_spec As Decimal, ByVal cst_bd_unit As String, ByVal cst_bd_quanity As Decimal, ByVal cst_bd_costea As Decimal) As cost_breakdownsRow
            Dim rowcost_breakdownsRow As cost_breakdownsRow = CType(Me.NewRow,cost_breakdownsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, stcst_id, cst_bd_no, cst_bd_name, cst_bd_spec, cst_bd_unit, cst_bd_quanity, cst_bd_costea}
            rowcost_breakdownsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcost_breakdownsRow)
            Return rowcost_breakdownsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindBycst_bd_id(ByVal cst_bd_id As Integer) As cost_breakdownsRow
            Return CType(Me.Rows.Find(New Object() {cst_bd_id}),cost_breakdownsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As cost_breakdownsDataTable = CType(MyBase.Clone,cost_breakdownsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New cost_breakdownsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columncst_bd_id = MyBase.Columns("cst_bd_id")
            Me.columnstcst_id = MyBase.Columns("stcst_id")
            Me.columncst_bd_no = MyBase.Columns("cst_bd_no")
            Me.columncst_bd_name = MyBase.Columns("cst_bd_name")
            Me.columncst_bd_spec = MyBase.Columns("cst_bd_spec")
            Me.columncst_bd_unit = MyBase.Columns("cst_bd_unit")
            Me.columncst_bd_quanity = MyBase.Columns("cst_bd_quanity")
            Me.columncst_bd_costea = MyBase.Columns("cst_bd_costea")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columncst_bd_id = New Global.System.Data.DataColumn("cst_bd_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncst_bd_id)
            Me.columnstcst_id = New Global.System.Data.DataColumn("stcst_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstcst_id)
            Me.columncst_bd_no = New Global.System.Data.DataColumn("cst_bd_no", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncst_bd_no)
            Me.columncst_bd_name = New Global.System.Data.DataColumn("cst_bd_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncst_bd_name)
            Me.columncst_bd_spec = New Global.System.Data.DataColumn("cst_bd_spec", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncst_bd_spec)
            Me.columncst_bd_unit = New Global.System.Data.DataColumn("cst_bd_unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncst_bd_unit)
            Me.columncst_bd_quanity = New Global.System.Data.DataColumn("cst_bd_quanity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncst_bd_quanity)
            Me.columncst_bd_costea = New Global.System.Data.DataColumn("cst_bd_costea", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncst_bd_costea)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncst_bd_id}, true))
            Me.columncst_bd_id.AutoIncrement = true
            Me.columncst_bd_id.AutoIncrementSeed = -1
            Me.columncst_bd_id.AutoIncrementStep = -1
            Me.columncst_bd_id.AllowDBNull = false
            Me.columncst_bd_id.ReadOnly = true
            Me.columncst_bd_id.Unique = true
            Me.columnstcst_id.AllowDBNull = false
            Me.columncst_bd_no.AllowDBNull = false
            Me.columncst_bd_name.AllowDBNull = false
            Me.columncst_bd_name.MaxLength = 30
            Me.columncst_bd_spec.AllowDBNull = false
            Me.columncst_bd_unit.AllowDBNull = false
            Me.columncst_bd_unit.MaxLength = 2
            Me.columncst_bd_quanity.AllowDBNull = false
            Me.columncst_bd_costea.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newcost_breakdownsRow() As cost_breakdownsRow
            Return CType(Me.NewRow,cost_breakdownsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New cost_breakdownsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(cost_breakdownsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cost_breakdownsRowChangedEvent) Is Nothing) Then
                RaiseEvent cost_breakdownsRowChanged(Me, New cost_breakdownsRowChangeEvent(CType(e.Row,cost_breakdownsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cost_breakdownsRowChangingEvent) Is Nothing) Then
                RaiseEvent cost_breakdownsRowChanging(Me, New cost_breakdownsRowChangeEvent(CType(e.Row,cost_breakdownsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cost_breakdownsRowDeletedEvent) Is Nothing) Then
                RaiseEvent cost_breakdownsRowDeleted(Me, New cost_breakdownsRowChangeEvent(CType(e.Row,cost_breakdownsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cost_breakdownsRowDeletingEvent) Is Nothing) Then
                RaiseEvent cost_breakdownsRowDeleting(Me, New cost_breakdownsRowChangeEvent(CType(e.Row,cost_breakdownsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removecost_breakdownsRow(ByVal row As cost_breakdownsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "cost_breakdownsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class cost_classesDataTable
        Inherits Global.System.Data.TypedTableBase(Of cost_classesRow)
        
        Private columncstclss_code As Global.System.Data.DataColumn
        
        Private columncstclss_name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "cost_classes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstclss_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstclss_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstclss_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstclss_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As cost_classesRow
            Get
                Return CType(Me.Rows(index),cost_classesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event cost_classesRowChanging As cost_classesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event cost_classesRowChanged As cost_classesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event cost_classesRowDeleting As cost_classesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event cost_classesRowDeleted As cost_classesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addcost_classesRow(ByVal row As cost_classesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addcost_classesRow(ByVal cstclss_code As Short, ByVal cstclss_name As String) As cost_classesRow
            Dim rowcost_classesRow As cost_classesRow = CType(Me.NewRow,cost_classesRow)
            Dim columnValuesArray() As Object = New Object() {cstclss_code, cstclss_name}
            rowcost_classesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcost_classesRow)
            Return rowcost_classesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindBycstclss_code(ByVal cstclss_code As Short) As cost_classesRow
            Return CType(Me.Rows.Find(New Object() {cstclss_code}),cost_classesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As cost_classesDataTable = CType(MyBase.Clone,cost_classesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New cost_classesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columncstclss_code = MyBase.Columns("cstclss_code")
            Me.columncstclss_name = MyBase.Columns("cstclss_name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columncstclss_code = New Global.System.Data.DataColumn("cstclss_code", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstclss_code)
            Me.columncstclss_name = New Global.System.Data.DataColumn("cstclss_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstclss_name)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncstclss_code}, true))
            Me.columncstclss_code.AllowDBNull = false
            Me.columncstclss_code.Unique = true
            Me.columncstclss_name.AllowDBNull = false
            Me.columncstclss_name.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newcost_classesRow() As cost_classesRow
            Return CType(Me.NewRow,cost_classesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New cost_classesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(cost_classesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cost_classesRowChangedEvent) Is Nothing) Then
                RaiseEvent cost_classesRowChanged(Me, New cost_classesRowChangeEvent(CType(e.Row,cost_classesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cost_classesRowChangingEvent) Is Nothing) Then
                RaiseEvent cost_classesRowChanging(Me, New cost_classesRowChangeEvent(CType(e.Row,cost_classesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cost_classesRowDeletedEvent) Is Nothing) Then
                RaiseEvent cost_classesRowDeleted(Me, New cost_classesRowChangeEvent(CType(e.Row,cost_classesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cost_classesRowDeletingEvent) Is Nothing) Then
                RaiseEvent cost_classesRowDeleting(Me, New cost_classesRowChangeEvent(CType(e.Row,cost_classesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removecost_classesRow(ByVal row As cost_classesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "cost_classesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class cost_mastersDataTable
        Inherits Global.System.Data.TypedTableBase(Of cost_mastersRow)
        
        Private columncstmstr_id As Global.System.Data.DataColumn
        
        Private columncstclss_code As Global.System.Data.DataColumn
        
        Private columncstmstr_category As Global.System.Data.DataColumn
        
        Private columncstmstr_code As Global.System.Data.DataColumn
        
        Private columncstmstr_name As Global.System.Data.DataColumn
        
        Private columncstmstr_spec As Global.System.Data.DataColumn
        
        Private columncstmstr_unit As Global.System.Data.DataColumn
        
        Private columncstmstr_costea As Global.System.Data.DataColumn
        
        Private columnchangecode As Global.System.Data.DataColumn
        
        Private columncstmstr_seq As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "cost_masters"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstmstr_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstmstr_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstclss_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstclss_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstmstr_categoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstmstr_category
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstmstr_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstmstr_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstmstr_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstmstr_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstmstr_specColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstmstr_spec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstmstr_unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstmstr_unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstmstr_costeaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstmstr_costea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property changecodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchangecode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstmstr_seqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstmstr_seq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As cost_mastersRow
            Get
                Return CType(Me.Rows(index),cost_mastersRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event cost_mastersRowChanging As cost_mastersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event cost_mastersRowChanged As cost_mastersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event cost_mastersRowDeleting As cost_mastersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event cost_mastersRowDeleted As cost_mastersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addcost_mastersRow(ByVal row As cost_mastersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addcost_mastersRow(ByVal cstclss_code As Short, ByVal cstmstr_category As String, ByVal cstmstr_code As Short, ByVal cstmstr_name As String, ByVal cstmstr_spec As String, ByVal cstmstr_unit As String, ByVal cstmstr_costea As Decimal, ByVal changecode As Short, ByVal cstmstr_seq As Short) As cost_mastersRow
            Dim rowcost_mastersRow As cost_mastersRow = CType(Me.NewRow,cost_mastersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, cstclss_code, cstmstr_category, cstmstr_code, cstmstr_name, cstmstr_spec, cstmstr_unit, cstmstr_costea, changecode, cstmstr_seq}
            rowcost_mastersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcost_mastersRow)
            Return rowcost_mastersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindBycstmstr_id(ByVal cstmstr_id As Integer) As cost_mastersRow
            Return CType(Me.Rows.Find(New Object() {cstmstr_id}),cost_mastersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As cost_mastersDataTable = CType(MyBase.Clone,cost_mastersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New cost_mastersDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columncstmstr_id = MyBase.Columns("cstmstr_id")
            Me.columncstclss_code = MyBase.Columns("cstclss_code")
            Me.columncstmstr_category = MyBase.Columns("cstmstr_category")
            Me.columncstmstr_code = MyBase.Columns("cstmstr_code")
            Me.columncstmstr_name = MyBase.Columns("cstmstr_name")
            Me.columncstmstr_spec = MyBase.Columns("cstmstr_spec")
            Me.columncstmstr_unit = MyBase.Columns("cstmstr_unit")
            Me.columncstmstr_costea = MyBase.Columns("cstmstr_costea")
            Me.columnchangecode = MyBase.Columns("changecode")
            Me.columncstmstr_seq = MyBase.Columns("cstmstr_seq")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columncstmstr_id = New Global.System.Data.DataColumn("cstmstr_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstmstr_id)
            Me.columncstclss_code = New Global.System.Data.DataColumn("cstclss_code", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstclss_code)
            Me.columncstmstr_category = New Global.System.Data.DataColumn("cstmstr_category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstmstr_category)
            Me.columncstmstr_code = New Global.System.Data.DataColumn("cstmstr_code", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstmstr_code)
            Me.columncstmstr_name = New Global.System.Data.DataColumn("cstmstr_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstmstr_name)
            Me.columncstmstr_spec = New Global.System.Data.DataColumn("cstmstr_spec", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstmstr_spec)
            Me.columncstmstr_unit = New Global.System.Data.DataColumn("cstmstr_unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstmstr_unit)
            Me.columncstmstr_costea = New Global.System.Data.DataColumn("cstmstr_costea", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstmstr_costea)
            Me.columnchangecode = New Global.System.Data.DataColumn("changecode", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchangecode)
            Me.columncstmstr_seq = New Global.System.Data.DataColumn("cstmstr_seq", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstmstr_seq)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncstmstr_id}, true))
            Me.columncstmstr_id.AutoIncrement = true
            Me.columncstmstr_id.AutoIncrementSeed = -1
            Me.columncstmstr_id.AutoIncrementStep = -1
            Me.columncstmstr_id.AllowDBNull = false
            Me.columncstmstr_id.ReadOnly = true
            Me.columncstmstr_id.Unique = true
            Me.columncstclss_code.AllowDBNull = false
            Me.columncstmstr_category.AllowDBNull = false
            Me.columncstmstr_category.MaxLength = 15
            Me.columncstmstr_code.AllowDBNull = false
            Me.columncstmstr_name.AllowDBNull = false
            Me.columncstmstr_name.MaxLength = 30
            Me.columncstmstr_spec.AllowDBNull = false
            Me.columncstmstr_spec.MaxLength = 30
            Me.columncstmstr_unit.AllowDBNull = false
            Me.columncstmstr_unit.MaxLength = 5
            Me.columncstmstr_costea.AllowDBNull = false
            Me.columnchangecode.AllowDBNull = false
            Me.columncstmstr_seq.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newcost_mastersRow() As cost_mastersRow
            Return CType(Me.NewRow,cost_mastersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New cost_mastersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(cost_mastersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cost_mastersRowChangedEvent) Is Nothing) Then
                RaiseEvent cost_mastersRowChanged(Me, New cost_mastersRowChangeEvent(CType(e.Row,cost_mastersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cost_mastersRowChangingEvent) Is Nothing) Then
                RaiseEvent cost_mastersRowChanging(Me, New cost_mastersRowChangeEvent(CType(e.Row,cost_mastersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cost_mastersRowDeletedEvent) Is Nothing) Then
                RaiseEvent cost_mastersRowDeleted(Me, New cost_mastersRowChangeEvent(CType(e.Row,cost_mastersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cost_mastersRowDeletingEvent) Is Nothing) Then
                RaiseEvent cost_mastersRowDeleting(Me, New cost_mastersRowChangeEvent(CType(e.Row,cost_mastersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removecost_mastersRow(ByVal row As cost_mastersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "cost_mastersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class detailsDataTable
        Inherits Global.System.Data.TypedTableBase(Of detailsRow)
        
        Private columndtl_id As Global.System.Data.DataColumn
        
        Private columncntrct_no As Global.System.Data.DataColumn
        
        Private columndtl_no As Global.System.Data.DataColumn
        
        Private columns_worktype_code As Global.System.Data.DataColumn
        
        Private columncstclss_code As Global.System.Data.DataColumn
        
        Private columncstmstr_id As Global.System.Data.DataColumn
        
        Private columndtl_name As Global.System.Data.DataColumn
        
        Private columndtl_spec As Global.System.Data.DataColumn
        
        Private columndtl_unit As Global.System.Data.DataColumn
        
        Private columndtl_quanity As Global.System.Data.DataColumn
        
        Private columndtl_costea As Global.System.Data.DataColumn
        
        Private columndtl_labor As Global.System.Data.DataColumn
        
        Private columndtl_material As Global.System.Data.DataColumn
        
        Private columndtl_machine As Global.System.Data.DataColumn
        
        Private columnoutsrcr_code As Global.System.Data.DataColumn
        
        Private columndtl_subcntrct As Global.System.Data.DataColumn
        
        Private columndtl_expens As Global.System.Data.DataColumn
        
        Private columndtl_fraction As Global.System.Data.DataColumn
        
        Private columndtl_remarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "details"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property dtl_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtl_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cntrct_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncntrct_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property dtl_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtl_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property s_worktype_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_worktype_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstclss_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstclss_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstmstr_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstmstr_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property dtl_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtl_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property dtl_specColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtl_spec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property dtl_unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtl_unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property dtl_quanityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtl_quanity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property dtl_costeaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtl_costea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property dtl_laborColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtl_labor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property dtl_materialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtl_material
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property dtl_machineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtl_machine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property outsrcr_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoutsrcr_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property dtl_subcntrctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtl_subcntrct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property dtl_expensColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtl_expens
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property dtl_fractionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtl_fraction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property dtl_remarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtl_remarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As detailsRow
            Get
                Return CType(Me.Rows(index),detailsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event detailsRowChanging As detailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event detailsRowChanged As detailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event detailsRowDeleting As detailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event detailsRowDeleted As detailsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AdddetailsRow(ByVal row As detailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AdddetailsRow( _
                    ByVal cntrct_no As Short,  _
                    ByVal dtl_no As Short,  _
                    ByVal s_worktype_code As Short,  _
                    ByVal cstclss_code As Short,  _
                    ByVal cstmstr_id As Integer,  _
                    ByVal dtl_name As String,  _
                    ByVal dtl_spec As String,  _
                    ByVal dtl_unit As String,  _
                    ByVal dtl_quanity As Decimal,  _
                    ByVal dtl_costea As Decimal,  _
                    ByVal dtl_labor As Decimal,  _
                    ByVal dtl_material As Decimal,  _
                    ByVal dtl_machine As Decimal,  _
                    ByVal outsrcr_code As Integer,  _
                    ByVal dtl_subcntrct As Decimal,  _
                    ByVal dtl_expens As Decimal,  _
                    ByVal dtl_fraction As Decimal,  _
                    ByVal dtl_remarks As String) As detailsRow
            Dim rowdetailsRow As detailsRow = CType(Me.NewRow,detailsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, cntrct_no, dtl_no, s_worktype_code, cstclss_code, cstmstr_id, dtl_name, dtl_spec, dtl_unit, dtl_quanity, dtl_costea, dtl_labor, dtl_material, dtl_machine, outsrcr_code, dtl_subcntrct, dtl_expens, dtl_fraction, dtl_remarks}
            rowdetailsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdetailsRow)
            Return rowdetailsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindBydtl_id(ByVal dtl_id As Integer) As detailsRow
            Return CType(Me.Rows.Find(New Object() {dtl_id}),detailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As detailsDataTable = CType(MyBase.Clone,detailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New detailsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columndtl_id = MyBase.Columns("dtl_id")
            Me.columncntrct_no = MyBase.Columns("cntrct_no")
            Me.columndtl_no = MyBase.Columns("dtl_no")
            Me.columns_worktype_code = MyBase.Columns("s_worktype_code")
            Me.columncstclss_code = MyBase.Columns("cstclss_code")
            Me.columncstmstr_id = MyBase.Columns("cstmstr_id")
            Me.columndtl_name = MyBase.Columns("dtl_name")
            Me.columndtl_spec = MyBase.Columns("dtl_spec")
            Me.columndtl_unit = MyBase.Columns("dtl_unit")
            Me.columndtl_quanity = MyBase.Columns("dtl_quanity")
            Me.columndtl_costea = MyBase.Columns("dtl_costea")
            Me.columndtl_labor = MyBase.Columns("dtl_labor")
            Me.columndtl_material = MyBase.Columns("dtl_material")
            Me.columndtl_machine = MyBase.Columns("dtl_machine")
            Me.columnoutsrcr_code = MyBase.Columns("outsrcr_code")
            Me.columndtl_subcntrct = MyBase.Columns("dtl_subcntrct")
            Me.columndtl_expens = MyBase.Columns("dtl_expens")
            Me.columndtl_fraction = MyBase.Columns("dtl_fraction")
            Me.columndtl_remarks = MyBase.Columns("dtl_remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columndtl_id = New Global.System.Data.DataColumn("dtl_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtl_id)
            Me.columncntrct_no = New Global.System.Data.DataColumn("cntrct_no", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncntrct_no)
            Me.columndtl_no = New Global.System.Data.DataColumn("dtl_no", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtl_no)
            Me.columns_worktype_code = New Global.System.Data.DataColumn("s_worktype_code", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_worktype_code)
            Me.columncstclss_code = New Global.System.Data.DataColumn("cstclss_code", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstclss_code)
            Me.columncstmstr_id = New Global.System.Data.DataColumn("cstmstr_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstmstr_id)
            Me.columndtl_name = New Global.System.Data.DataColumn("dtl_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtl_name)
            Me.columndtl_spec = New Global.System.Data.DataColumn("dtl_spec", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtl_spec)
            Me.columndtl_unit = New Global.System.Data.DataColumn("dtl_unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtl_unit)
            Me.columndtl_quanity = New Global.System.Data.DataColumn("dtl_quanity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtl_quanity)
            Me.columndtl_costea = New Global.System.Data.DataColumn("dtl_costea", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtl_costea)
            Me.columndtl_labor = New Global.System.Data.DataColumn("dtl_labor", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtl_labor)
            Me.columndtl_material = New Global.System.Data.DataColumn("dtl_material", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtl_material)
            Me.columndtl_machine = New Global.System.Data.DataColumn("dtl_machine", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtl_machine)
            Me.columnoutsrcr_code = New Global.System.Data.DataColumn("outsrcr_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoutsrcr_code)
            Me.columndtl_subcntrct = New Global.System.Data.DataColumn("dtl_subcntrct", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtl_subcntrct)
            Me.columndtl_expens = New Global.System.Data.DataColumn("dtl_expens", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtl_expens)
            Me.columndtl_fraction = New Global.System.Data.DataColumn("dtl_fraction", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtl_fraction)
            Me.columndtl_remarks = New Global.System.Data.DataColumn("dtl_remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtl_remarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columndtl_id}, true))
            Me.columndtl_id.AutoIncrement = true
            Me.columndtl_id.AutoIncrementSeed = -1
            Me.columndtl_id.AutoIncrementStep = -1
            Me.columndtl_id.AllowDBNull = false
            Me.columndtl_id.ReadOnly = true
            Me.columndtl_id.Unique = true
            Me.columncntrct_no.AllowDBNull = false
            Me.columndtl_no.AllowDBNull = false
            Me.columns_worktype_code.AllowDBNull = false
            Me.columncstclss_code.AllowDBNull = false
            Me.columncstmstr_id.AllowDBNull = false
            Me.columndtl_name.AllowDBNull = false
            Me.columndtl_name.MaxLength = 30
            Me.columndtl_spec.AllowDBNull = false
            Me.columndtl_spec.MaxLength = 30
            Me.columndtl_unit.AllowDBNull = false
            Me.columndtl_unit.MaxLength = 5
            Me.columndtl_quanity.AllowDBNull = false
            Me.columndtl_costea.AllowDBNull = false
            Me.columndtl_labor.AllowDBNull = false
            Me.columndtl_material.AllowDBNull = false
            Me.columndtl_machine.AllowDBNull = false
            Me.columnoutsrcr_code.AllowDBNull = false
            Me.columndtl_subcntrct.AllowDBNull = false
            Me.columndtl_expens.AllowDBNull = false
            Me.columndtl_fraction.AllowDBNull = false
            Me.columndtl_remarks.AllowDBNull = false
            Me.columndtl_remarks.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewdetailsRow() As detailsRow
            Return CType(Me.NewRow,detailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New detailsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(detailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.detailsRowChangedEvent) Is Nothing) Then
                RaiseEvent detailsRowChanged(Me, New detailsRowChangeEvent(CType(e.Row,detailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.detailsRowChangingEvent) Is Nothing) Then
                RaiseEvent detailsRowChanging(Me, New detailsRowChangeEvent(CType(e.Row,detailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.detailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent detailsRowDeleted(Me, New detailsRowChangeEvent(CType(e.Row,detailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.detailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent detailsRowDeleting(Me, New detailsRowChangeEvent(CType(e.Row,detailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovedetailsRow(ByVal row As detailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "detailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class estimatesDataTable
        Inherits Global.System.Data.TypedTableBase(Of estimatesRow)
        
        Private columnestmt_code As Global.System.Data.DataColumn
        
        Private columnestmt_date As Global.System.Data.DataColumn
        
        Private columnestmt_prjct_name As Global.System.Data.DataColumn
        
        Private columnestmt_amount As Global.System.Data.DataColumn
        
        Private columnestmt_taxin As Global.System.Data.DataColumn
        
        Private columnestmt_tax As Global.System.Data.DataColumn
        
        Private columnestmt_taxrate As Global.System.Data.DataColumn
        
        Private columnprjct_address As Global.System.Data.DataColumn
        
        Private columndeliveryplace As Global.System.Data.DataColumn
        
        Private columnpaymentterms As Global.System.Data.DataColumn
        
        Private columnexpirationdate As Global.System.Data.DataColumn
        
        Private columndestination As Global.System.Data.DataColumn
        
        Private columnpblshr_address As Global.System.Data.DataColumn
        
        Private columnpblshr_cmpnyname As Global.System.Data.DataColumn
        
        Private columnpblshr_prsdnt As Global.System.Data.DataColumn
        
        Private columnpblshr_tel As Global.System.Data.DataColumn
        
        Private columnpblshr_fax As Global.System.Data.DataColumn
        
        Private columnconditions As Global.System.Data.DataColumn
        
        Private columncndtns_dtls As Global.System.Data.DataColumn
        
        Private columndiscount As Global.System.Data.DataColumn
        
        Private columnbdrate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "estimates"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property estmt_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestmt_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property estmt_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestmt_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property estmt_prjct_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestmt_prjct_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property estmt_amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestmt_amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property estmt_taxinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestmt_taxin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property estmt_taxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestmt_tax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property estmt_taxrateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestmt_taxrate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjct_addressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjct_address
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property deliveryplaceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndeliveryplace
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property paymenttermsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpaymentterms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property expirationdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpirationdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property destinationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndestination
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property pblshr_addressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpblshr_address
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property pblshr_cmpnynameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpblshr_cmpnyname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property pblshr_prsdntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpblshr_prsdnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property pblshr_telColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpblshr_tel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property pblshr_faxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpblshr_fax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property conditionsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconditions
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cndtns_dtlsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncndtns_dtls
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property discountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property bdrateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbdrate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As estimatesRow
            Get
                Return CType(Me.Rows(index),estimatesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event estimatesRowChanging As estimatesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event estimatesRowChanged As estimatesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event estimatesRowDeleting As estimatesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event estimatesRowDeleted As estimatesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddestimatesRow(ByVal row As estimatesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddestimatesRow( _
                    ByVal estmt_code As Short,  _
                    ByVal estmt_date As Date,  _
                    ByVal estmt_prjct_name As String,  _
                    ByVal estmt_amount As Decimal,  _
                    ByVal estmt_taxin As Decimal,  _
                    ByVal estmt_tax As Decimal,  _
                    ByVal estmt_taxrate As Short,  _
                    ByVal prjct_address As String,  _
                    ByVal deliveryplace As String,  _
                    ByVal paymentterms As String,  _
                    ByVal expirationdate As Date,  _
                    ByVal destination As String,  _
                    ByVal pblshr_address As String,  _
                    ByVal pblshr_cmpnyname As String,  _
                    ByVal pblshr_prsdnt As String,  _
                    ByVal pblshr_tel As String,  _
                    ByVal pblshr_fax As String,  _
                    ByVal conditions As String,  _
                    ByVal cndtns_dtls As String,  _
                    ByVal discount As Decimal,  _
                    ByVal bdrate As Short) As estimatesRow
            Dim rowestimatesRow As estimatesRow = CType(Me.NewRow,estimatesRow)
            Dim columnValuesArray() As Object = New Object() {estmt_code, estmt_date, estmt_prjct_name, estmt_amount, estmt_taxin, estmt_tax, estmt_taxrate, prjct_address, deliveryplace, paymentterms, expirationdate, destination, pblshr_address, pblshr_cmpnyname, pblshr_prsdnt, pblshr_tel, pblshr_fax, conditions, cndtns_dtls, discount, bdrate}
            rowestimatesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowestimatesRow)
            Return rowestimatesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByestmt_code(ByVal estmt_code As Short) As estimatesRow
            Return CType(Me.Rows.Find(New Object() {estmt_code}),estimatesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As estimatesDataTable = CType(MyBase.Clone,estimatesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New estimatesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnestmt_code = MyBase.Columns("estmt_code")
            Me.columnestmt_date = MyBase.Columns("estmt_date")
            Me.columnestmt_prjct_name = MyBase.Columns("estmt_prjct_name")
            Me.columnestmt_amount = MyBase.Columns("estmt_amount")
            Me.columnestmt_taxin = MyBase.Columns("estmt_taxin")
            Me.columnestmt_tax = MyBase.Columns("estmt_tax")
            Me.columnestmt_taxrate = MyBase.Columns("estmt_taxrate")
            Me.columnprjct_address = MyBase.Columns("prjct_address")
            Me.columndeliveryplace = MyBase.Columns("deliveryplace")
            Me.columnpaymentterms = MyBase.Columns("paymentterms")
            Me.columnexpirationdate = MyBase.Columns("expirationdate")
            Me.columndestination = MyBase.Columns("destination")
            Me.columnpblshr_address = MyBase.Columns("pblshr_address")
            Me.columnpblshr_cmpnyname = MyBase.Columns("pblshr_cmpnyname")
            Me.columnpblshr_prsdnt = MyBase.Columns("pblshr_prsdnt")
            Me.columnpblshr_tel = MyBase.Columns("pblshr_tel")
            Me.columnpblshr_fax = MyBase.Columns("pblshr_fax")
            Me.columnconditions = MyBase.Columns("conditions")
            Me.columncndtns_dtls = MyBase.Columns("cndtns_dtls")
            Me.columndiscount = MyBase.Columns("discount")
            Me.columnbdrate = MyBase.Columns("bdrate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnestmt_code = New Global.System.Data.DataColumn("estmt_code", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestmt_code)
            Me.columnestmt_date = New Global.System.Data.DataColumn("estmt_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestmt_date)
            Me.columnestmt_prjct_name = New Global.System.Data.DataColumn("estmt_prjct_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestmt_prjct_name)
            Me.columnestmt_amount = New Global.System.Data.DataColumn("estmt_amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestmt_amount)
            Me.columnestmt_taxin = New Global.System.Data.DataColumn("estmt_taxin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestmt_taxin)
            Me.columnestmt_tax = New Global.System.Data.DataColumn("estmt_tax", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestmt_tax)
            Me.columnestmt_taxrate = New Global.System.Data.DataColumn("estmt_taxrate", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestmt_taxrate)
            Me.columnprjct_address = New Global.System.Data.DataColumn("prjct_address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjct_address)
            Me.columndeliveryplace = New Global.System.Data.DataColumn("deliveryplace", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndeliveryplace)
            Me.columnpaymentterms = New Global.System.Data.DataColumn("paymentterms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpaymentterms)
            Me.columnexpirationdate = New Global.System.Data.DataColumn("expirationdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpirationdate)
            Me.columndestination = New Global.System.Data.DataColumn("destination", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndestination)
            Me.columnpblshr_address = New Global.System.Data.DataColumn("pblshr_address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpblshr_address)
            Me.columnpblshr_cmpnyname = New Global.System.Data.DataColumn("pblshr_cmpnyname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpblshr_cmpnyname)
            Me.columnpblshr_prsdnt = New Global.System.Data.DataColumn("pblshr_prsdnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpblshr_prsdnt)
            Me.columnpblshr_tel = New Global.System.Data.DataColumn("pblshr_tel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpblshr_tel)
            Me.columnpblshr_fax = New Global.System.Data.DataColumn("pblshr_fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpblshr_fax)
            Me.columnconditions = New Global.System.Data.DataColumn("conditions", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconditions)
            Me.columncndtns_dtls = New Global.System.Data.DataColumn("cndtns_dtls", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncndtns_dtls)
            Me.columndiscount = New Global.System.Data.DataColumn("discount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiscount)
            Me.columnbdrate = New Global.System.Data.DataColumn("bdrate", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbdrate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnestmt_code}, true))
            Me.columnestmt_code.AllowDBNull = false
            Me.columnestmt_code.Unique = true
            Me.columnestmt_date.AllowDBNull = false
            Me.columnestmt_prjct_name.AllowDBNull = false
            Me.columnestmt_prjct_name.MaxLength = 100
            Me.columnestmt_amount.AllowDBNull = false
            Me.columnestmt_taxin.AllowDBNull = false
            Me.columnestmt_tax.AllowDBNull = false
            Me.columnestmt_taxrate.AllowDBNull = false
            Me.columnprjct_address.AllowDBNull = false
            Me.columnprjct_address.MaxLength = 100
            Me.columndeliveryplace.AllowDBNull = false
            Me.columndeliveryplace.MaxLength = 100
            Me.columnpaymentterms.AllowDBNull = false
            Me.columnpaymentterms.MaxLength = 100
            Me.columnexpirationdate.AllowDBNull = false
            Me.columndestination.AllowDBNull = false
            Me.columndestination.MaxLength = 50
            Me.columnpblshr_address.AllowDBNull = false
            Me.columnpblshr_address.MaxLength = 100
            Me.columnpblshr_cmpnyname.AllowDBNull = false
            Me.columnpblshr_cmpnyname.MaxLength = 50
            Me.columnpblshr_prsdnt.AllowDBNull = false
            Me.columnpblshr_prsdnt.MaxLength = 20
            Me.columnpblshr_tel.AllowDBNull = false
            Me.columnpblshr_tel.MaxLength = 12
            Me.columnpblshr_fax.AllowDBNull = false
            Me.columnpblshr_fax.MaxLength = 12
            Me.columnconditions.AllowDBNull = false
            Me.columnconditions.MaxLength = 300
            Me.columncndtns_dtls.AllowDBNull = false
            Me.columncndtns_dtls.MaxLength = 500
            Me.columndiscount.AllowDBNull = false
            Me.columnbdrate.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewestimatesRow() As estimatesRow
            Return CType(Me.NewRow,estimatesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New estimatesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(estimatesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.estimatesRowChangedEvent) Is Nothing) Then
                RaiseEvent estimatesRowChanged(Me, New estimatesRowChangeEvent(CType(e.Row,estimatesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.estimatesRowChangingEvent) Is Nothing) Then
                RaiseEvent estimatesRowChanging(Me, New estimatesRowChangeEvent(CType(e.Row,estimatesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.estimatesRowDeletedEvent) Is Nothing) Then
                RaiseEvent estimatesRowDeleted(Me, New estimatesRowChangeEvent(CType(e.Row,estimatesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.estimatesRowDeletingEvent) Is Nothing) Then
                RaiseEvent estimatesRowDeleting(Me, New estimatesRowChangeEvent(CType(e.Row,estimatesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveestimatesRow(ByVal row As estimatesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "estimatesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class expense_breakdownsDataTable
        Inherits Global.System.Data.TypedTableBase(Of expense_breakdownsRow)
        
        Private columnexpns_bd_id As Global.System.Data.DataColumn
        
        Private columnstexpns_id As Global.System.Data.DataColumn
        
        Private columnexpns_bd_no As Global.System.Data.DataColumn
        
        Private columnexpns_bd_name As Global.System.Data.DataColumn
        
        Private columnexpns_bd_spec As Global.System.Data.DataColumn
        
        Private columnexpns_bd_unit As Global.System.Data.DataColumn
        
        Private columnexpns_bd_quanity As Global.System.Data.DataColumn
        
        Private columnexpns_bd_costea As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "expense_breakdowns"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property expns_bd_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpns_bd_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property stexpns_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstexpns_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property expns_bd_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpns_bd_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property expns_bd_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpns_bd_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property expns_bd_specColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpns_bd_spec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property expns_bd_unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpns_bd_unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property expns_bd_quanityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpns_bd_quanity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property expns_bd_costeaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpns_bd_costea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As expense_breakdownsRow
            Get
                Return CType(Me.Rows(index),expense_breakdownsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event expense_breakdownsRowChanging As expense_breakdownsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event expense_breakdownsRowChanged As expense_breakdownsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event expense_breakdownsRowDeleting As expense_breakdownsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event expense_breakdownsRowDeleted As expense_breakdownsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addexpense_breakdownsRow(ByVal row As expense_breakdownsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addexpense_breakdownsRow(ByVal stexpns_id As Integer, ByVal expns_bd_no As Short, ByVal expns_bd_name As String, ByVal expns_bd_spec As Decimal, ByVal expns_bd_unit As String, ByVal expns_bd_quanity As Decimal, ByVal expns_bd_costea As Decimal) As expense_breakdownsRow
            Dim rowexpense_breakdownsRow As expense_breakdownsRow = CType(Me.NewRow,expense_breakdownsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, stexpns_id, expns_bd_no, expns_bd_name, expns_bd_spec, expns_bd_unit, expns_bd_quanity, expns_bd_costea}
            rowexpense_breakdownsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowexpense_breakdownsRow)
            Return rowexpense_breakdownsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByexpns_bd_id(ByVal expns_bd_id As Integer) As expense_breakdownsRow
            Return CType(Me.Rows.Find(New Object() {expns_bd_id}),expense_breakdownsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As expense_breakdownsDataTable = CType(MyBase.Clone,expense_breakdownsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New expense_breakdownsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnexpns_bd_id = MyBase.Columns("expns_bd_id")
            Me.columnstexpns_id = MyBase.Columns("stexpns_id")
            Me.columnexpns_bd_no = MyBase.Columns("expns_bd_no")
            Me.columnexpns_bd_name = MyBase.Columns("expns_bd_name")
            Me.columnexpns_bd_spec = MyBase.Columns("expns_bd_spec")
            Me.columnexpns_bd_unit = MyBase.Columns("expns_bd_unit")
            Me.columnexpns_bd_quanity = MyBase.Columns("expns_bd_quanity")
            Me.columnexpns_bd_costea = MyBase.Columns("expns_bd_costea")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnexpns_bd_id = New Global.System.Data.DataColumn("expns_bd_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpns_bd_id)
            Me.columnstexpns_id = New Global.System.Data.DataColumn("stexpns_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstexpns_id)
            Me.columnexpns_bd_no = New Global.System.Data.DataColumn("expns_bd_no", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpns_bd_no)
            Me.columnexpns_bd_name = New Global.System.Data.DataColumn("expns_bd_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpns_bd_name)
            Me.columnexpns_bd_spec = New Global.System.Data.DataColumn("expns_bd_spec", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpns_bd_spec)
            Me.columnexpns_bd_unit = New Global.System.Data.DataColumn("expns_bd_unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpns_bd_unit)
            Me.columnexpns_bd_quanity = New Global.System.Data.DataColumn("expns_bd_quanity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpns_bd_quanity)
            Me.columnexpns_bd_costea = New Global.System.Data.DataColumn("expns_bd_costea", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpns_bd_costea)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnexpns_bd_id}, true))
            Me.columnexpns_bd_id.AutoIncrement = true
            Me.columnexpns_bd_id.AutoIncrementSeed = -1
            Me.columnexpns_bd_id.AutoIncrementStep = -1
            Me.columnexpns_bd_id.AllowDBNull = false
            Me.columnexpns_bd_id.ReadOnly = true
            Me.columnexpns_bd_id.Unique = true
            Me.columnstexpns_id.AllowDBNull = false
            Me.columnexpns_bd_no.AllowDBNull = false
            Me.columnexpns_bd_name.AllowDBNull = false
            Me.columnexpns_bd_name.MaxLength = 30
            Me.columnexpns_bd_spec.AllowDBNull = false
            Me.columnexpns_bd_unit.AllowDBNull = false
            Me.columnexpns_bd_unit.MaxLength = 5
            Me.columnexpns_bd_quanity.AllowDBNull = false
            Me.columnexpns_bd_costea.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newexpense_breakdownsRow() As expense_breakdownsRow
            Return CType(Me.NewRow,expense_breakdownsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New expense_breakdownsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(expense_breakdownsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.expense_breakdownsRowChangedEvent) Is Nothing) Then
                RaiseEvent expense_breakdownsRowChanged(Me, New expense_breakdownsRowChangeEvent(CType(e.Row,expense_breakdownsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.expense_breakdownsRowChangingEvent) Is Nothing) Then
                RaiseEvent expense_breakdownsRowChanging(Me, New expense_breakdownsRowChangeEvent(CType(e.Row,expense_breakdownsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.expense_breakdownsRowDeletedEvent) Is Nothing) Then
                RaiseEvent expense_breakdownsRowDeleted(Me, New expense_breakdownsRowChangeEvent(CType(e.Row,expense_breakdownsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.expense_breakdownsRowDeletingEvent) Is Nothing) Then
                RaiseEvent expense_breakdownsRowDeleting(Me, New expense_breakdownsRowChangeEvent(CType(e.Row,expense_breakdownsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removeexpense_breakdownsRow(ByVal row As expense_breakdownsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "expense_breakdownsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class outsourcersDataTable
        Inherits Global.System.Data.TypedTableBase(Of outsourcersRow)
        
        Private columnoutsrcr_code As Global.System.Data.DataColumn
        
        Private columnoutsrcr_name As Global.System.Data.DataColumn
        
        Private columnoutsrcr_trm_s As Global.System.Data.DataColumn
        
        Private columnoutsrcr_trm_e As Global.System.Data.DataColumn
        
        Private columnworktype As Global.System.Data.DataColumn
        
        Private columnordrfrm As Global.System.Data.DataColumn
        
        Private _columne_cntrct As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "outsourcers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property outsrcr_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoutsrcr_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property outsrcr_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoutsrcr_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property outsrcr_trm_sColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoutsrcr_trm_s
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property outsrcr_trm_eColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoutsrcr_trm_e
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property worktypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnworktype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ordrfrmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnordrfrm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _e_cntrctColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columne_cntrct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As outsourcersRow
            Get
                Return CType(Me.Rows(index),outsourcersRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event outsourcersRowChanging As outsourcersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event outsourcersRowChanged As outsourcersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event outsourcersRowDeleting As outsourcersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event outsourcersRowDeleted As outsourcersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddoutsourcersRow(ByVal row As outsourcersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddoutsourcersRow(ByVal outsrcr_code As Integer, ByVal outsrcr_name As String, ByVal outsrcr_trm_s As Date, ByVal outsrcr_trm_e As Date, ByVal worktype As String, ByVal ordrfrm As Short, ByVal _e_cntrct As String) As outsourcersRow
            Dim rowoutsourcersRow As outsourcersRow = CType(Me.NewRow,outsourcersRow)
            Dim columnValuesArray() As Object = New Object() {outsrcr_code, outsrcr_name, outsrcr_trm_s, outsrcr_trm_e, worktype, ordrfrm, _e_cntrct}
            rowoutsourcersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowoutsourcersRow)
            Return rowoutsourcersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByoutsrcr_code(ByVal outsrcr_code As Integer) As outsourcersRow
            Return CType(Me.Rows.Find(New Object() {outsrcr_code}),outsourcersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As outsourcersDataTable = CType(MyBase.Clone,outsourcersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New outsourcersDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnoutsrcr_code = MyBase.Columns("outsrcr_code")
            Me.columnoutsrcr_name = MyBase.Columns("outsrcr_name")
            Me.columnoutsrcr_trm_s = MyBase.Columns("outsrcr_trm_s")
            Me.columnoutsrcr_trm_e = MyBase.Columns("outsrcr_trm_e")
            Me.columnworktype = MyBase.Columns("worktype")
            Me.columnordrfrm = MyBase.Columns("ordrfrm")
            Me._columne_cntrct = MyBase.Columns("e-cntrct")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnoutsrcr_code = New Global.System.Data.DataColumn("outsrcr_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoutsrcr_code)
            Me.columnoutsrcr_name = New Global.System.Data.DataColumn("outsrcr_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoutsrcr_name)
            Me.columnoutsrcr_trm_s = New Global.System.Data.DataColumn("outsrcr_trm_s", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoutsrcr_trm_s)
            Me.columnoutsrcr_trm_e = New Global.System.Data.DataColumn("outsrcr_trm_e", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoutsrcr_trm_e)
            Me.columnworktype = New Global.System.Data.DataColumn("worktype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnworktype)
            Me.columnordrfrm = New Global.System.Data.DataColumn("ordrfrm", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnordrfrm)
            Me._columne_cntrct = New Global.System.Data.DataColumn("e-cntrct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columne_cntrct.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columne_cntrct")
            Me._columne_cntrct.ExtendedProperties.Add("Generator_UserColumnName", "e-cntrct")
            MyBase.Columns.Add(Me._columne_cntrct)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnoutsrcr_code}, true))
            Me.columnoutsrcr_code.AllowDBNull = false
            Me.columnoutsrcr_code.Unique = true
            Me.columnoutsrcr_name.AllowDBNull = false
            Me.columnoutsrcr_name.MaxLength = 20
            Me.columnoutsrcr_trm_s.AllowDBNull = false
            Me.columnoutsrcr_trm_e.AllowDBNull = false
            Me.columnworktype.AllowDBNull = false
            Me.columnworktype.MaxLength = 10
            Me.columnordrfrm.AllowDBNull = false
            Me._columne_cntrct.AllowDBNull = false
            Me._columne_cntrct.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewoutsourcersRow() As outsourcersRow
            Return CType(Me.NewRow,outsourcersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New outsourcersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(outsourcersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.outsourcersRowChangedEvent) Is Nothing) Then
                RaiseEvent outsourcersRowChanged(Me, New outsourcersRowChangeEvent(CType(e.Row,outsourcersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.outsourcersRowChangingEvent) Is Nothing) Then
                RaiseEvent outsourcersRowChanging(Me, New outsourcersRowChangeEvent(CType(e.Row,outsourcersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.outsourcersRowDeletedEvent) Is Nothing) Then
                RaiseEvent outsourcersRowDeleted(Me, New outsourcersRowChangeEvent(CType(e.Row,outsourcersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.outsourcersRowDeletingEvent) Is Nothing) Then
                RaiseEvent outsourcersRowDeleting(Me, New outsourcersRowChangeEvent(CType(e.Row,outsourcersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveoutsourcersRow(ByVal row As outsourcersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "outsourcersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class outsourcing_plansDataTable
        Inherits Global.System.Data.TypedTableBase(Of outsourcing_plansRow)
        
        Private columnoutsrc_no As Global.System.Data.DataColumn
        
        Private columncstclss_code As Global.System.Data.DataColumn
        
        Private columncost_id As Global.System.Data.DataColumn
        
        Private columnoutsrcr_code As Global.System.Data.DataColumn
        
        Private columnoutsrcng_quanity As Global.System.Data.DataColumn
        
        Private columnoutsrcng_costea As Global.System.Data.DataColumn
        
        Private columncreated_date As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "outsourcing_plans"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property outsrc_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoutsrc_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstclss_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstclss_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cost_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncost_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property outsrcr_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoutsrcr_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property outsrcng_quanityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoutsrcng_quanity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property outsrcng_costeaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoutsrcng_costea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property created_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncreated_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As outsourcing_plansRow
            Get
                Return CType(Me.Rows(index),outsourcing_plansRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event outsourcing_plansRowChanging As outsourcing_plansRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event outsourcing_plansRowChanged As outsourcing_plansRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event outsourcing_plansRowDeleting As outsourcing_plansRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event outsourcing_plansRowDeleted As outsourcing_plansRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addoutsourcing_plansRow(ByVal row As outsourcing_plansRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addoutsourcing_plansRow(ByVal outsrc_no As Short, ByVal cstclss_code As Short, ByVal cost_id As Integer, ByVal outsrcr_code As Integer, ByVal outsrcng_quanity As Decimal, ByVal outsrcng_costea As Decimal, ByVal created_date As Date) As outsourcing_plansRow
            Dim rowoutsourcing_plansRow As outsourcing_plansRow = CType(Me.NewRow,outsourcing_plansRow)
            Dim columnValuesArray() As Object = New Object() {outsrc_no, cstclss_code, cost_id, outsrcr_code, outsrcng_quanity, outsrcng_costea, created_date}
            rowoutsourcing_plansRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowoutsourcing_plansRow)
            Return rowoutsourcing_plansRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As outsourcing_plansDataTable = CType(MyBase.Clone,outsourcing_plansDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New outsourcing_plansDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnoutsrc_no = MyBase.Columns("outsrc_no")
            Me.columncstclss_code = MyBase.Columns("cstclss_code")
            Me.columncost_id = MyBase.Columns("cost_id")
            Me.columnoutsrcr_code = MyBase.Columns("outsrcr_code")
            Me.columnoutsrcng_quanity = MyBase.Columns("outsrcng_quanity")
            Me.columnoutsrcng_costea = MyBase.Columns("outsrcng_costea")
            Me.columncreated_date = MyBase.Columns("created_date")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnoutsrc_no = New Global.System.Data.DataColumn("outsrc_no", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoutsrc_no)
            Me.columncstclss_code = New Global.System.Data.DataColumn("cstclss_code", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstclss_code)
            Me.columncost_id = New Global.System.Data.DataColumn("cost_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncost_id)
            Me.columnoutsrcr_code = New Global.System.Data.DataColumn("outsrcr_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoutsrcr_code)
            Me.columnoutsrcng_quanity = New Global.System.Data.DataColumn("outsrcng_quanity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoutsrcng_quanity)
            Me.columnoutsrcng_costea = New Global.System.Data.DataColumn("outsrcng_costea", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoutsrcng_costea)
            Me.columncreated_date = New Global.System.Data.DataColumn("created_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncreated_date)
            Me.columnoutsrc_no.AllowDBNull = false
            Me.columncstclss_code.AllowDBNull = false
            Me.columncost_id.AllowDBNull = false
            Me.columnoutsrcr_code.AllowDBNull = false
            Me.columnoutsrcng_quanity.AllowDBNull = false
            Me.columnoutsrcng_costea.AllowDBNull = false
            Me.columncreated_date.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newoutsourcing_plansRow() As outsourcing_plansRow
            Return CType(Me.NewRow,outsourcing_plansRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New outsourcing_plansRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(outsourcing_plansRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.outsourcing_plansRowChangedEvent) Is Nothing) Then
                RaiseEvent outsourcing_plansRowChanged(Me, New outsourcing_plansRowChangeEvent(CType(e.Row,outsourcing_plansRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.outsourcing_plansRowChangingEvent) Is Nothing) Then
                RaiseEvent outsourcing_plansRowChanging(Me, New outsourcing_plansRowChangeEvent(CType(e.Row,outsourcing_plansRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.outsourcing_plansRowDeletedEvent) Is Nothing) Then
                RaiseEvent outsourcing_plansRowDeleted(Me, New outsourcing_plansRowChangeEvent(CType(e.Row,outsourcing_plansRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.outsourcing_plansRowDeletingEvent) Is Nothing) Then
                RaiseEvent outsourcing_plansRowDeleting(Me, New outsourcing_plansRowChangeEvent(CType(e.Row,outsourcing_plansRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removeoutsourcing_plansRow(ByVal row As outsourcing_plansRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "outsourcing_plansDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class outsourcing_reportsDataTable
        Inherits Global.System.Data.TypedTableBase(Of outsourcing_reportsRow)
        
        Private columnprjct_code As Global.System.Data.DataColumn
        
        Private columncntrct_no As Global.System.Data.DataColumn
        
        Private columncreated_date As Global.System.Data.DataColumn
        
        Private columnchanges As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "outsourcing_reports"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjct_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjct_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cntrct_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncntrct_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property created_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncreated_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property changesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchanges
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As outsourcing_reportsRow
            Get
                Return CType(Me.Rows(index),outsourcing_reportsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event outsourcing_reportsRowChanging As outsourcing_reportsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event outsourcing_reportsRowChanged As outsourcing_reportsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event outsourcing_reportsRowDeleting As outsourcing_reportsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event outsourcing_reportsRowDeleted As outsourcing_reportsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addoutsourcing_reportsRow(ByVal row As outsourcing_reportsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addoutsourcing_reportsRow(ByVal prjct_code As String, ByVal cntrct_no As Short, ByVal created_date As Date, ByVal changes As String) As outsourcing_reportsRow
            Dim rowoutsourcing_reportsRow As outsourcing_reportsRow = CType(Me.NewRow,outsourcing_reportsRow)
            Dim columnValuesArray() As Object = New Object() {prjct_code, cntrct_no, created_date, changes}
            rowoutsourcing_reportsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowoutsourcing_reportsRow)
            Return rowoutsourcing_reportsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As outsourcing_reportsDataTable = CType(MyBase.Clone,outsourcing_reportsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New outsourcing_reportsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnprjct_code = MyBase.Columns("prjct_code")
            Me.columncntrct_no = MyBase.Columns("cntrct_no")
            Me.columncreated_date = MyBase.Columns("created_date")
            Me.columnchanges = MyBase.Columns("changes")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnprjct_code = New Global.System.Data.DataColumn("prjct_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjct_code)
            Me.columncntrct_no = New Global.System.Data.DataColumn("cntrct_no", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncntrct_no)
            Me.columncreated_date = New Global.System.Data.DataColumn("created_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncreated_date)
            Me.columnchanges = New Global.System.Data.DataColumn("changes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchanges)
            Me.columnprjct_code.AllowDBNull = false
            Me.columnprjct_code.MaxLength = 6
            Me.columncntrct_no.AllowDBNull = false
            Me.columncreated_date.AllowDBNull = false
            Me.columnchanges.AllowDBNull = false
            Me.columnchanges.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newoutsourcing_reportsRow() As outsourcing_reportsRow
            Return CType(Me.NewRow,outsourcing_reportsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New outsourcing_reportsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(outsourcing_reportsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.outsourcing_reportsRowChangedEvent) Is Nothing) Then
                RaiseEvent outsourcing_reportsRowChanged(Me, New outsourcing_reportsRowChangeEvent(CType(e.Row,outsourcing_reportsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.outsourcing_reportsRowChangingEvent) Is Nothing) Then
                RaiseEvent outsourcing_reportsRowChanging(Me, New outsourcing_reportsRowChangeEvent(CType(e.Row,outsourcing_reportsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.outsourcing_reportsRowDeletedEvent) Is Nothing) Then
                RaiseEvent outsourcing_reportsRowDeleted(Me, New outsourcing_reportsRowChangeEvent(CType(e.Row,outsourcing_reportsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.outsourcing_reportsRowDeletingEvent) Is Nothing) Then
                RaiseEvent outsourcing_reportsRowDeleting(Me, New outsourcing_reportsRowChangeEvent(CType(e.Row,outsourcing_reportsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removeoutsourcing_reportsRow(ByVal row As outsourcing_reportsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "outsourcing_reportsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class productionsDataTable
        Inherits Global.System.Data.TypedTableBase(Of productionsRow)
        
        Private columnclosing_date As Global.System.Data.DataColumn
        
        Private columnprjct_code As Global.System.Data.DataColumn
        
        Private columncntrct_no As Global.System.Data.DataColumn
        
        Private columndtls_id As Global.System.Data.DataColumn
        
        Private columnlast_costea As Global.System.Data.DataColumn
        
        Private columnlast_quanity As Global.System.Data.DataColumn
        
        Private columnlast_amount As Global.System.Data.DataColumn
        
        Private columntotal_costea As Global.System.Data.DataColumn
        
        Private columntotal_quanity As Global.System.Data.DataColumn
        
        Private columntotal_amount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "productions"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property closing_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclosing_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjct_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjct_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cntrct_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncntrct_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property dtls_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndtls_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property last_costeaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlast_costea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property last_quanityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlast_quanity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property last_amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlast_amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property total_costeaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotal_costea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property total_quanityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotal_quanity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property total_amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotal_amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As productionsRow
            Get
                Return CType(Me.Rows(index),productionsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event productionsRowChanging As productionsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event productionsRowChanged As productionsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event productionsRowDeleting As productionsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event productionsRowDeleted As productionsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddproductionsRow(ByVal row As productionsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddproductionsRow(ByVal closing_date As Date, ByVal prjct_code As String, ByVal cntrct_no As Short, ByVal dtls_id As Integer, ByVal last_costea As Decimal, ByVal last_quanity As Decimal, ByVal last_amount As Decimal, ByVal total_costea As Decimal, ByVal total_quanity As Decimal, ByVal total_amount As Decimal) As productionsRow
            Dim rowproductionsRow As productionsRow = CType(Me.NewRow,productionsRow)
            Dim columnValuesArray() As Object = New Object() {closing_date, prjct_code, cntrct_no, dtls_id, last_costea, last_quanity, last_amount, total_costea, total_quanity, total_amount}
            rowproductionsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproductionsRow)
            Return rowproductionsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As productionsDataTable = CType(MyBase.Clone,productionsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New productionsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnclosing_date = MyBase.Columns("closing_date")
            Me.columnprjct_code = MyBase.Columns("prjct_code")
            Me.columncntrct_no = MyBase.Columns("cntrct_no")
            Me.columndtls_id = MyBase.Columns("dtls_id")
            Me.columnlast_costea = MyBase.Columns("last_costea")
            Me.columnlast_quanity = MyBase.Columns("last_quanity")
            Me.columnlast_amount = MyBase.Columns("last_amount")
            Me.columntotal_costea = MyBase.Columns("total_costea")
            Me.columntotal_quanity = MyBase.Columns("total_quanity")
            Me.columntotal_amount = MyBase.Columns("total_amount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnclosing_date = New Global.System.Data.DataColumn("closing_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclosing_date)
            Me.columnprjct_code = New Global.System.Data.DataColumn("prjct_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjct_code)
            Me.columncntrct_no = New Global.System.Data.DataColumn("cntrct_no", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncntrct_no)
            Me.columndtls_id = New Global.System.Data.DataColumn("dtls_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndtls_id)
            Me.columnlast_costea = New Global.System.Data.DataColumn("last_costea", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlast_costea)
            Me.columnlast_quanity = New Global.System.Data.DataColumn("last_quanity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlast_quanity)
            Me.columnlast_amount = New Global.System.Data.DataColumn("last_amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlast_amount)
            Me.columntotal_costea = New Global.System.Data.DataColumn("total_costea", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotal_costea)
            Me.columntotal_quanity = New Global.System.Data.DataColumn("total_quanity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotal_quanity)
            Me.columntotal_amount = New Global.System.Data.DataColumn("total_amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotal_amount)
            Me.columnclosing_date.AllowDBNull = false
            Me.columnprjct_code.AllowDBNull = false
            Me.columnprjct_code.MaxLength = 6
            Me.columncntrct_no.AllowDBNull = false
            Me.columndtls_id.AllowDBNull = false
            Me.columnlast_costea.AllowDBNull = false
            Me.columnlast_quanity.AllowDBNull = false
            Me.columnlast_amount.AllowDBNull = false
            Me.columntotal_costea.AllowDBNull = false
            Me.columntotal_quanity.AllowDBNull = false
            Me.columntotal_amount.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewproductionsRow() As productionsRow
            Return CType(Me.NewRow,productionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New productionsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(productionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.productionsRowChangedEvent) Is Nothing) Then
                RaiseEvent productionsRowChanged(Me, New productionsRowChangeEvent(CType(e.Row,productionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.productionsRowChangingEvent) Is Nothing) Then
                RaiseEvent productionsRowChanging(Me, New productionsRowChangeEvent(CType(e.Row,productionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.productionsRowDeletedEvent) Is Nothing) Then
                RaiseEvent productionsRowDeleted(Me, New productionsRowChangeEvent(CType(e.Row,productionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.productionsRowDeletingEvent) Is Nothing) Then
                RaiseEvent productionsRowDeleting(Me, New productionsRowChangeEvent(CType(e.Row,productionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveproductionsRow(ByVal row As productionsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "productionsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class project_cost_breakdownsDataTable
        Inherits Global.System.Data.TypedTableBase(Of project_cost_breakdownsRow)
        
        Private columnprjctcst_bd_id As Global.System.Data.DataColumn
        
        Private columnprjctcst_id As Global.System.Data.DataColumn
        
        Private columncstmstr_id As Global.System.Data.DataColumn
        
        Private columnprjctcst_bd_no As Global.System.Data.DataColumn
        
        Private columnprjctcst_bd_name As Global.System.Data.DataColumn
        
        Private columnprjctcst_bd_spec As Global.System.Data.DataColumn
        
        Private columnprjctcst_bd_unit As Global.System.Data.DataColumn
        
        Private columnprjctcst_bd_quanity As Global.System.Data.DataColumn
        
        Private columnprjctcst_bd_costea As Global.System.Data.DataColumn
        
        Private columnprjctcst_bd_labor As Global.System.Data.DataColumn
        
        Private columnprjctcst_bd_material As Global.System.Data.DataColumn
        
        Private columnprjctcst_bd_machine As Global.System.Data.DataColumn
        
        Private columnprjctcst_bd_subcntrct As Global.System.Data.DataColumn
        
        Private columnprjctcst_bd_expense As Global.System.Data.DataColumn
        
        Private columnprjctcst_bd_remarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "project_cost_breakdowns"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_bd_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_bd_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstmstr_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstmstr_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_bd_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_bd_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_bd_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_bd_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_bd_specColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_bd_spec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_bd_unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_bd_unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_bd_quanityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_bd_quanity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_bd_costeaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_bd_costea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_bd_laborColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_bd_labor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_bd_materialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_bd_material
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_bd_machineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_bd_machine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_bd_subcntrctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_bd_subcntrct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_bd_expenseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_bd_expense
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_bd_remarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_bd_remarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As project_cost_breakdownsRow
            Get
                Return CType(Me.Rows(index),project_cost_breakdownsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event project_cost_breakdownsRowChanging As project_cost_breakdownsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event project_cost_breakdownsRowChanged As project_cost_breakdownsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event project_cost_breakdownsRowDeleting As project_cost_breakdownsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event project_cost_breakdownsRowDeleted As project_cost_breakdownsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addproject_cost_breakdownsRow(ByVal row As project_cost_breakdownsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addproject_cost_breakdownsRow(ByVal prjctcst_id As Integer, ByVal cstmstr_id As Integer, ByVal prjctcst_bd_no As Short, ByVal prjctcst_bd_name As String, ByVal prjctcst_bd_spec As String, ByVal prjctcst_bd_unit As String, ByVal prjctcst_bd_quanity As Decimal, ByVal prjctcst_bd_costea As Decimal, ByVal prjctcst_bd_labor As Decimal, ByVal prjctcst_bd_material As Decimal, ByVal prjctcst_bd_machine As Decimal, ByVal prjctcst_bd_subcntrct As Decimal, ByVal prjctcst_bd_expense As Decimal, ByVal prjctcst_bd_remarks As String) As project_cost_breakdownsRow
            Dim rowproject_cost_breakdownsRow As project_cost_breakdownsRow = CType(Me.NewRow,project_cost_breakdownsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, prjctcst_id, cstmstr_id, prjctcst_bd_no, prjctcst_bd_name, prjctcst_bd_spec, prjctcst_bd_unit, prjctcst_bd_quanity, prjctcst_bd_costea, prjctcst_bd_labor, prjctcst_bd_material, prjctcst_bd_machine, prjctcst_bd_subcntrct, prjctcst_bd_expense, prjctcst_bd_remarks}
            rowproject_cost_breakdownsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproject_cost_breakdownsRow)
            Return rowproject_cost_breakdownsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByprjctcst_bd_id(ByVal prjctcst_bd_id As Integer) As project_cost_breakdownsRow
            Return CType(Me.Rows.Find(New Object() {prjctcst_bd_id}),project_cost_breakdownsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As project_cost_breakdownsDataTable = CType(MyBase.Clone,project_cost_breakdownsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New project_cost_breakdownsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnprjctcst_bd_id = MyBase.Columns("prjctcst_bd_id")
            Me.columnprjctcst_id = MyBase.Columns("prjctcst_id")
            Me.columncstmstr_id = MyBase.Columns("cstmstr_id")
            Me.columnprjctcst_bd_no = MyBase.Columns("prjctcst_bd_no")
            Me.columnprjctcst_bd_name = MyBase.Columns("prjctcst_bd_name")
            Me.columnprjctcst_bd_spec = MyBase.Columns("prjctcst_bd_spec")
            Me.columnprjctcst_bd_unit = MyBase.Columns("prjctcst_bd_unit")
            Me.columnprjctcst_bd_quanity = MyBase.Columns("prjctcst_bd_quanity")
            Me.columnprjctcst_bd_costea = MyBase.Columns("prjctcst_bd_costea")
            Me.columnprjctcst_bd_labor = MyBase.Columns("prjctcst_bd_labor")
            Me.columnprjctcst_bd_material = MyBase.Columns("prjctcst_bd_material")
            Me.columnprjctcst_bd_machine = MyBase.Columns("prjctcst_bd_machine")
            Me.columnprjctcst_bd_subcntrct = MyBase.Columns("prjctcst_bd_subcntrct")
            Me.columnprjctcst_bd_expense = MyBase.Columns("prjctcst_bd_expense")
            Me.columnprjctcst_bd_remarks = MyBase.Columns("prjctcst_bd_remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnprjctcst_bd_id = New Global.System.Data.DataColumn("prjctcst_bd_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_bd_id)
            Me.columnprjctcst_id = New Global.System.Data.DataColumn("prjctcst_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_id)
            Me.columncstmstr_id = New Global.System.Data.DataColumn("cstmstr_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstmstr_id)
            Me.columnprjctcst_bd_no = New Global.System.Data.DataColumn("prjctcst_bd_no", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_bd_no)
            Me.columnprjctcst_bd_name = New Global.System.Data.DataColumn("prjctcst_bd_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_bd_name)
            Me.columnprjctcst_bd_spec = New Global.System.Data.DataColumn("prjctcst_bd_spec", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_bd_spec)
            Me.columnprjctcst_bd_unit = New Global.System.Data.DataColumn("prjctcst_bd_unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_bd_unit)
            Me.columnprjctcst_bd_quanity = New Global.System.Data.DataColumn("prjctcst_bd_quanity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_bd_quanity)
            Me.columnprjctcst_bd_costea = New Global.System.Data.DataColumn("prjctcst_bd_costea", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_bd_costea)
            Me.columnprjctcst_bd_labor = New Global.System.Data.DataColumn("prjctcst_bd_labor", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_bd_labor)
            Me.columnprjctcst_bd_material = New Global.System.Data.DataColumn("prjctcst_bd_material", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_bd_material)
            Me.columnprjctcst_bd_machine = New Global.System.Data.DataColumn("prjctcst_bd_machine", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_bd_machine)
            Me.columnprjctcst_bd_subcntrct = New Global.System.Data.DataColumn("prjctcst_bd_subcntrct", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_bd_subcntrct)
            Me.columnprjctcst_bd_expense = New Global.System.Data.DataColumn("prjctcst_bd_expense", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_bd_expense)
            Me.columnprjctcst_bd_remarks = New Global.System.Data.DataColumn("prjctcst_bd_remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_bd_remarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnprjctcst_bd_id}, true))
            Me.columnprjctcst_bd_id.AutoIncrement = true
            Me.columnprjctcst_bd_id.AutoIncrementSeed = -1
            Me.columnprjctcst_bd_id.AutoIncrementStep = -1
            Me.columnprjctcst_bd_id.AllowDBNull = false
            Me.columnprjctcst_bd_id.ReadOnly = true
            Me.columnprjctcst_bd_id.Unique = true
            Me.columnprjctcst_id.AllowDBNull = false
            Me.columncstmstr_id.AllowDBNull = false
            Me.columnprjctcst_bd_no.AllowDBNull = false
            Me.columnprjctcst_bd_name.AllowDBNull = false
            Me.columnprjctcst_bd_name.MaxLength = 30
            Me.columnprjctcst_bd_spec.AllowDBNull = false
            Me.columnprjctcst_bd_spec.MaxLength = 30
            Me.columnprjctcst_bd_unit.AllowDBNull = false
            Me.columnprjctcst_bd_unit.MaxLength = 5
            Me.columnprjctcst_bd_quanity.AllowDBNull = false
            Me.columnprjctcst_bd_costea.AllowDBNull = false
            Me.columnprjctcst_bd_labor.AllowDBNull = false
            Me.columnprjctcst_bd_material.AllowDBNull = false
            Me.columnprjctcst_bd_machine.AllowDBNull = false
            Me.columnprjctcst_bd_subcntrct.AllowDBNull = false
            Me.columnprjctcst_bd_expense.AllowDBNull = false
            Me.columnprjctcst_bd_remarks.AllowDBNull = false
            Me.columnprjctcst_bd_remarks.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newproject_cost_breakdownsRow() As project_cost_breakdownsRow
            Return CType(Me.NewRow,project_cost_breakdownsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New project_cost_breakdownsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(project_cost_breakdownsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.project_cost_breakdownsRowChangedEvent) Is Nothing) Then
                RaiseEvent project_cost_breakdownsRowChanged(Me, New project_cost_breakdownsRowChangeEvent(CType(e.Row,project_cost_breakdownsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.project_cost_breakdownsRowChangingEvent) Is Nothing) Then
                RaiseEvent project_cost_breakdownsRowChanging(Me, New project_cost_breakdownsRowChangeEvent(CType(e.Row,project_cost_breakdownsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.project_cost_breakdownsRowDeletedEvent) Is Nothing) Then
                RaiseEvent project_cost_breakdownsRowDeleted(Me, New project_cost_breakdownsRowChangeEvent(CType(e.Row,project_cost_breakdownsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.project_cost_breakdownsRowDeletingEvent) Is Nothing) Then
                RaiseEvent project_cost_breakdownsRowDeleting(Me, New project_cost_breakdownsRowChangeEvent(CType(e.Row,project_cost_breakdownsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removeproject_cost_breakdownsRow(ByVal row As project_cost_breakdownsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "project_cost_breakdownsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class project_costsDataTable
        Inherits Global.System.Data.TypedTableBase(Of project_costsRow)
        
        Private columnprjctcst_id As Global.System.Data.DataColumn
        
        Private columncntrct_no As Global.System.Data.DataColumn
        
        Private columncstclss_code As Global.System.Data.DataColumn
        
        Private columnprjctcst_no As Global.System.Data.DataColumn
        
        Private columnprjctcst_name As Global.System.Data.DataColumn
        
        Private columnprjctcst_spec As Global.System.Data.DataColumn
        
        Private columnprjctcst_unit As Global.System.Data.DataColumn
        
        Private columnprjctcst_quanity As Global.System.Data.DataColumn
        
        Private columnprjctcst_costea As Global.System.Data.DataColumn
        
        Private columnprjctcst_laborea As Global.System.Data.DataColumn
        
        Private columnprjctcst_machineea As Global.System.Data.DataColumn
        
        Private columnprjctcst_subcntrctea As Global.System.Data.DataColumn
        
        Private columnprjctcst_expenseea As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "project_costs"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cntrct_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncntrct_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cstclss_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstclss_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_specColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_spec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_quanityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_quanity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_costeaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_costea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_laboreaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_laborea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_machineeaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_machineea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_subcntrcteaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_subcntrctea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property prjctcst_expenseeaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprjctcst_expenseea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As project_costsRow
            Get
                Return CType(Me.Rows(index),project_costsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event project_costsRowChanging As project_costsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event project_costsRowChanged As project_costsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event project_costsRowDeleting As project_costsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event project_costsRowDeleted As project_costsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addproject_costsRow(ByVal row As project_costsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addproject_costsRow(ByVal cntrct_no As Short, ByVal cstclss_code As Short, ByVal prjctcst_no As Short, ByVal prjctcst_name As String, ByVal prjctcst_spec As String, ByVal prjctcst_unit As String, ByVal prjctcst_quanity As Decimal, ByVal prjctcst_costea As Decimal, ByVal prjctcst_laborea As Decimal, ByVal prjctcst_machineea As Decimal, ByVal prjctcst_subcntrctea As Decimal, ByVal prjctcst_expenseea As Decimal) As project_costsRow
            Dim rowproject_costsRow As project_costsRow = CType(Me.NewRow,project_costsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, cntrct_no, cstclss_code, prjctcst_no, prjctcst_name, prjctcst_spec, prjctcst_unit, prjctcst_quanity, prjctcst_costea, prjctcst_laborea, prjctcst_machineea, prjctcst_subcntrctea, prjctcst_expenseea}
            rowproject_costsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproject_costsRow)
            Return rowproject_costsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByprjctcst_id(ByVal prjctcst_id As Integer) As project_costsRow
            Return CType(Me.Rows.Find(New Object() {prjctcst_id}),project_costsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As project_costsDataTable = CType(MyBase.Clone,project_costsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New project_costsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnprjctcst_id = MyBase.Columns("prjctcst_id")
            Me.columncntrct_no = MyBase.Columns("cntrct_no")
            Me.columncstclss_code = MyBase.Columns("cstclss_code")
            Me.columnprjctcst_no = MyBase.Columns("prjctcst_no")
            Me.columnprjctcst_name = MyBase.Columns("prjctcst_name")
            Me.columnprjctcst_spec = MyBase.Columns("prjctcst_spec")
            Me.columnprjctcst_unit = MyBase.Columns("prjctcst_unit")
            Me.columnprjctcst_quanity = MyBase.Columns("prjctcst_quanity")
            Me.columnprjctcst_costea = MyBase.Columns("prjctcst_costea")
            Me.columnprjctcst_laborea = MyBase.Columns("prjctcst_laborea")
            Me.columnprjctcst_machineea = MyBase.Columns("prjctcst_machineea")
            Me.columnprjctcst_subcntrctea = MyBase.Columns("prjctcst_subcntrctea")
            Me.columnprjctcst_expenseea = MyBase.Columns("prjctcst_expenseea")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnprjctcst_id = New Global.System.Data.DataColumn("prjctcst_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_id)
            Me.columncntrct_no = New Global.System.Data.DataColumn("cntrct_no", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncntrct_no)
            Me.columncstclss_code = New Global.System.Data.DataColumn("cstclss_code", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstclss_code)
            Me.columnprjctcst_no = New Global.System.Data.DataColumn("prjctcst_no", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_no)
            Me.columnprjctcst_name = New Global.System.Data.DataColumn("prjctcst_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_name)
            Me.columnprjctcst_spec = New Global.System.Data.DataColumn("prjctcst_spec", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_spec)
            Me.columnprjctcst_unit = New Global.System.Data.DataColumn("prjctcst_unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_unit)
            Me.columnprjctcst_quanity = New Global.System.Data.DataColumn("prjctcst_quanity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_quanity)
            Me.columnprjctcst_costea = New Global.System.Data.DataColumn("prjctcst_costea", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_costea)
            Me.columnprjctcst_laborea = New Global.System.Data.DataColumn("prjctcst_laborea", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_laborea)
            Me.columnprjctcst_machineea = New Global.System.Data.DataColumn("prjctcst_machineea", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_machineea)
            Me.columnprjctcst_subcntrctea = New Global.System.Data.DataColumn("prjctcst_subcntrctea", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_subcntrctea)
            Me.columnprjctcst_expenseea = New Global.System.Data.DataColumn("prjctcst_expenseea", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprjctcst_expenseea)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnprjctcst_id}, true))
            Me.columnprjctcst_id.AutoIncrement = true
            Me.columnprjctcst_id.AutoIncrementSeed = -1
            Me.columnprjctcst_id.AutoIncrementStep = -1
            Me.columnprjctcst_id.AllowDBNull = false
            Me.columnprjctcst_id.ReadOnly = true
            Me.columnprjctcst_id.Unique = true
            Me.columncntrct_no.AllowDBNull = false
            Me.columncstclss_code.AllowDBNull = false
            Me.columnprjctcst_no.AllowDBNull = false
            Me.columnprjctcst_name.AllowDBNull = false
            Me.columnprjctcst_name.MaxLength = 30
            Me.columnprjctcst_spec.AllowDBNull = false
            Me.columnprjctcst_spec.MaxLength = 30
            Me.columnprjctcst_unit.AllowDBNull = false
            Me.columnprjctcst_unit.MaxLength = 5
            Me.columnprjctcst_quanity.AllowDBNull = false
            Me.columnprjctcst_costea.AllowDBNull = false
            Me.columnprjctcst_laborea.AllowDBNull = false
            Me.columnprjctcst_machineea.AllowDBNull = false
            Me.columnprjctcst_subcntrctea.AllowDBNull = false
            Me.columnprjctcst_expenseea.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newproject_costsRow() As project_costsRow
            Return CType(Me.NewRow,project_costsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New project_costsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(project_costsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.project_costsRowChangedEvent) Is Nothing) Then
                RaiseEvent project_costsRowChanged(Me, New project_costsRowChangeEvent(CType(e.Row,project_costsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.project_costsRowChangingEvent) Is Nothing) Then
                RaiseEvent project_costsRowChanging(Me, New project_costsRowChangeEvent(CType(e.Row,project_costsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.project_costsRowDeletedEvent) Is Nothing) Then
                RaiseEvent project_costsRowDeleted(Me, New project_costsRowChangeEvent(CType(e.Row,project_costsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.project_costsRowDeletingEvent) Is Nothing) Then
                RaiseEvent project_costsRowDeleting(Me, New project_costsRowChangeEvent(CType(e.Row,project_costsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removeproject_costsRow(ByVal row As project_costsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "project_costsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class purchase_ordersDataTable
        Inherits Global.System.Data.TypedTableBase(Of purchase_ordersRow)
        
        Private columnoutsrcr_code As Global.System.Data.DataColumn
        
        Private columns_worktype_code As Global.System.Data.DataColumn
        
        Private columnno As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "purchase_orders"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property outsrcr_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoutsrcr_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property s_worktype_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_worktype_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As purchase_ordersRow
            Get
                Return CType(Me.Rows(index),purchase_ordersRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event purchase_ordersRowChanging As purchase_ordersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event purchase_ordersRowChanged As purchase_ordersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event purchase_ordersRowDeleting As purchase_ordersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event purchase_ordersRowDeleted As purchase_ordersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addpurchase_ordersRow(ByVal row As purchase_ordersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addpurchase_ordersRow(ByVal outsrcr_code As Date, ByVal s_worktype_code As Short, ByVal no As String) As purchase_ordersRow
            Dim rowpurchase_ordersRow As purchase_ordersRow = CType(Me.NewRow,purchase_ordersRow)
            Dim columnValuesArray() As Object = New Object() {outsrcr_code, s_worktype_code, no}
            rowpurchase_ordersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpurchase_ordersRow)
            Return rowpurchase_ordersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As purchase_ordersDataTable = CType(MyBase.Clone,purchase_ordersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New purchase_ordersDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnoutsrcr_code = MyBase.Columns("outsrcr_code")
            Me.columns_worktype_code = MyBase.Columns("s_worktype_code")
            Me.columnno = MyBase.Columns("no")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnoutsrcr_code = New Global.System.Data.DataColumn("outsrcr_code", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoutsrcr_code)
            Me.columns_worktype_code = New Global.System.Data.DataColumn("s_worktype_code", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_worktype_code)
            Me.columnno = New Global.System.Data.DataColumn("no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnno)
            Me.columnoutsrcr_code.AllowDBNull = false
            Me.columns_worktype_code.AllowDBNull = false
            Me.columnno.AllowDBNull = false
            Me.columnno.MaxLength = 6
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newpurchase_ordersRow() As purchase_ordersRow
            Return CType(Me.NewRow,purchase_ordersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New purchase_ordersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(purchase_ordersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.purchase_ordersRowChangedEvent) Is Nothing) Then
                RaiseEvent purchase_ordersRowChanged(Me, New purchase_ordersRowChangeEvent(CType(e.Row,purchase_ordersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.purchase_ordersRowChangingEvent) Is Nothing) Then
                RaiseEvent purchase_ordersRowChanging(Me, New purchase_ordersRowChangeEvent(CType(e.Row,purchase_ordersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.purchase_ordersRowDeletedEvent) Is Nothing) Then
                RaiseEvent purchase_ordersRowDeleted(Me, New purchase_ordersRowChangeEvent(CType(e.Row,purchase_ordersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.purchase_ordersRowDeletingEvent) Is Nothing) Then
                RaiseEvent purchase_ordersRowDeleting(Me, New purchase_ordersRowChangeEvent(CType(e.Row,purchase_ordersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removepurchase_ordersRow(ByVal row As purchase_ordersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "purchase_ordersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class site_costsDataTable
        Inherits Global.System.Data.TypedTableBase(Of site_costsRow)
        
        Private columnstcst_id As Global.System.Data.DataColumn
        
        Private columncntrct_no As Global.System.Data.DataColumn
        
        Private columnstcst_code As Global.System.Data.DataColumn
        
        Private columnstcst_name As Global.System.Data.DataColumn
        
        Private columnstcst_amount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "site_costs"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property stcst_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstcst_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cntrct_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncntrct_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property stcst_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstcst_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property stcst_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstcst_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property stcst_amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstcst_amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As site_costsRow
            Get
                Return CType(Me.Rows(index),site_costsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event site_costsRowChanging As site_costsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event site_costsRowChanged As site_costsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event site_costsRowDeleting As site_costsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event site_costsRowDeleted As site_costsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addsite_costsRow(ByVal row As site_costsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addsite_costsRow(ByVal cntrct_no As Short, ByVal stcst_code As Short, ByVal stcst_name As String, ByVal stcst_amount As Decimal) As site_costsRow
            Dim rowsite_costsRow As site_costsRow = CType(Me.NewRow,site_costsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, cntrct_no, stcst_code, stcst_name, stcst_amount}
            rowsite_costsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsite_costsRow)
            Return rowsite_costsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindBystcst_id(ByVal stcst_id As Integer) As site_costsRow
            Return CType(Me.Rows.Find(New Object() {stcst_id}),site_costsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As site_costsDataTable = CType(MyBase.Clone,site_costsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New site_costsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnstcst_id = MyBase.Columns("stcst_id")
            Me.columncntrct_no = MyBase.Columns("cntrct_no")
            Me.columnstcst_code = MyBase.Columns("stcst_code")
            Me.columnstcst_name = MyBase.Columns("stcst_name")
            Me.columnstcst_amount = MyBase.Columns("stcst_amount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnstcst_id = New Global.System.Data.DataColumn("stcst_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstcst_id)
            Me.columncntrct_no = New Global.System.Data.DataColumn("cntrct_no", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncntrct_no)
            Me.columnstcst_code = New Global.System.Data.DataColumn("stcst_code", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstcst_code)
            Me.columnstcst_name = New Global.System.Data.DataColumn("stcst_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstcst_name)
            Me.columnstcst_amount = New Global.System.Data.DataColumn("stcst_amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstcst_amount)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnstcst_id}, true))
            Me.columnstcst_id.AutoIncrement = true
            Me.columnstcst_id.AutoIncrementSeed = -1
            Me.columnstcst_id.AutoIncrementStep = -1
            Me.columnstcst_id.AllowDBNull = false
            Me.columnstcst_id.ReadOnly = true
            Me.columnstcst_id.Unique = true
            Me.columncntrct_no.AllowDBNull = false
            Me.columnstcst_code.AllowDBNull = false
            Me.columnstcst_name.AllowDBNull = false
            Me.columnstcst_name.MaxLength = 30
            Me.columnstcst_amount.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newsite_costsRow() As site_costsRow
            Return CType(Me.NewRow,site_costsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New site_costsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(site_costsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.site_costsRowChangedEvent) Is Nothing) Then
                RaiseEvent site_costsRowChanged(Me, New site_costsRowChangeEvent(CType(e.Row,site_costsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.site_costsRowChangingEvent) Is Nothing) Then
                RaiseEvent site_costsRowChanging(Me, New site_costsRowChangeEvent(CType(e.Row,site_costsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.site_costsRowDeletedEvent) Is Nothing) Then
                RaiseEvent site_costsRowDeleted(Me, New site_costsRowChangeEvent(CType(e.Row,site_costsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.site_costsRowDeletingEvent) Is Nothing) Then
                RaiseEvent site_costsRowDeleting(Me, New site_costsRowChangeEvent(CType(e.Row,site_costsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removesite_costsRow(ByVal row As site_costsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "site_costsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class site_expensesDataTable
        Inherits Global.System.Data.TypedTableBase(Of site_expensesRow)
        
        Private columnstexpns_id As Global.System.Data.DataColumn
        
        Private columncntrct_no As Global.System.Data.DataColumn
        
        Private columnstexpns_code As Global.System.Data.DataColumn
        
        Private columnstexpns_name As Global.System.Data.DataColumn
        
        Private columnstexpns_amount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "site_expenses"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property stexpns_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstexpns_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cntrct_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncntrct_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property stexpns_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstexpns_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property stexpns_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstexpns_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property stexpns_amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstexpns_amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As site_expensesRow
            Get
                Return CType(Me.Rows(index),site_expensesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event site_expensesRowChanging As site_expensesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event site_expensesRowChanged As site_expensesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event site_expensesRowDeleting As site_expensesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event site_expensesRowDeleted As site_expensesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addsite_expensesRow(ByVal row As site_expensesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addsite_expensesRow(ByVal cntrct_no As Short, ByVal stexpns_code As Short, ByVal stexpns_name As String, ByVal stexpns_amount As Decimal) As site_expensesRow
            Dim rowsite_expensesRow As site_expensesRow = CType(Me.NewRow,site_expensesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, cntrct_no, stexpns_code, stexpns_name, stexpns_amount}
            rowsite_expensesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsite_expensesRow)
            Return rowsite_expensesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindBystexpns_id(ByVal stexpns_id As Integer) As site_expensesRow
            Return CType(Me.Rows.Find(New Object() {stexpns_id}),site_expensesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As site_expensesDataTable = CType(MyBase.Clone,site_expensesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New site_expensesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnstexpns_id = MyBase.Columns("stexpns_id")
            Me.columncntrct_no = MyBase.Columns("cntrct_no")
            Me.columnstexpns_code = MyBase.Columns("stexpns_code")
            Me.columnstexpns_name = MyBase.Columns("stexpns_name")
            Me.columnstexpns_amount = MyBase.Columns("stexpns_amount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnstexpns_id = New Global.System.Data.DataColumn("stexpns_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstexpns_id)
            Me.columncntrct_no = New Global.System.Data.DataColumn("cntrct_no", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncntrct_no)
            Me.columnstexpns_code = New Global.System.Data.DataColumn("stexpns_code", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstexpns_code)
            Me.columnstexpns_name = New Global.System.Data.DataColumn("stexpns_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstexpns_name)
            Me.columnstexpns_amount = New Global.System.Data.DataColumn("stexpns_amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstexpns_amount)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnstexpns_id}, true))
            Me.columnstexpns_id.AutoIncrement = true
            Me.columnstexpns_id.AutoIncrementSeed = -1
            Me.columnstexpns_id.AutoIncrementStep = -1
            Me.columnstexpns_id.AllowDBNull = false
            Me.columnstexpns_id.ReadOnly = true
            Me.columnstexpns_id.Unique = true
            Me.columncntrct_no.AllowDBNull = false
            Me.columnstexpns_code.AllowDBNull = false
            Me.columnstexpns_name.AllowDBNull = false
            Me.columnstexpns_name.MaxLength = 30
            Me.columnstexpns_amount.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newsite_expensesRow() As site_expensesRow
            Return CType(Me.NewRow,site_expensesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New site_expensesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(site_expensesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.site_expensesRowChangedEvent) Is Nothing) Then
                RaiseEvent site_expensesRowChanged(Me, New site_expensesRowChangeEvent(CType(e.Row,site_expensesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.site_expensesRowChangingEvent) Is Nothing) Then
                RaiseEvent site_expensesRowChanging(Me, New site_expensesRowChangeEvent(CType(e.Row,site_expensesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.site_expensesRowDeletedEvent) Is Nothing) Then
                RaiseEvent site_expensesRowDeleted(Me, New site_expensesRowChangeEvent(CType(e.Row,site_expensesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.site_expensesRowDeletingEvent) Is Nothing) Then
                RaiseEvent site_expensesRowDeleting(Me, New site_expensesRowChangeEvent(CType(e.Row,site_expensesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removesite_expensesRow(ByVal row As site_expensesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As 現場データDataSet = New 現場データDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "site_expensesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class budget_summaryRow
        Inherits Global.System.Data.DataRow
        
        Private tablebudget_summary As budget_summaryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablebudget_summary = CType(Me.Table,budget_summaryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cntrct_no() As Short
            Get
                Return CType(Me(Me.tablebudget_summary.cntrct_noColumn),Short)
            End Get
            Set
                Me(Me.tablebudget_summary.cntrct_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjct_term_s() As Date
            Get
                Return CType(Me(Me.tablebudget_summary.prjct_term_sColumn),Date)
            End Get
            Set
                Me(Me.tablebudget_summary.prjct_term_sColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjct_term_e() As Date
            Get
                Return CType(Me(Me.tablebudget_summary.prjct_term_eColumn),Date)
            End Get
            Set
                Me(Me.tablebudget_summary.prjct_term_eColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cntrct_amount() As Decimal
            Get
                Return CType(Me(Me.tablebudget_summary.cntrct_amountColumn),Decimal)
            End Get
            Set
                Me(Me.tablebudget_summary.cntrct_amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjct_category() As String
            Get
                Return CType(Me(Me.tablebudget_summary.prjct_categoryColumn),String)
            End Get
            Set
                Me(Me.tablebudget_summary.prjct_categoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cnsdrtn_date() As Date
            Get
                Return CType(Me(Me.tablebudget_summary.cnsdrtn_dateColumn),Date)
            End Get
            Set
                Me(Me.tablebudget_summary.cnsdrtn_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjct_summary() As String
            Get
                Return CType(Me(Me.tablebudget_summary.prjct_summaryColumn),String)
            End Get
            Set
                Me(Me.tablebudget_summary.prjct_summaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property subcontract_rate() As String
            Get
                Return CType(Me(Me.tablebudget_summary.subcontract_rateColumn),String)
            End Get
            Set
                Me(Me.tablebudget_summary.subcontract_rateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property remarks() As String
            Get
                Return CType(Me(Me.tablebudget_summary.remarksColumn),String)
            End Get
            Set
                Me(Me.tablebudget_summary.remarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property department() As String
            Get
                Return CType(Me(Me.tablebudget_summary.departmentColumn),String)
            End Get
            Set
                Me(Me.tablebudget_summary.departmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property director() As String
            Get
                Return CType(Me(Me.tablebudget_summary.directorColumn),String)
            End Get
            Set
                Me(Me.tablebudget_summary.directorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property manager() As String
            Get
                Return CType(Me(Me.tablebudget_summary.managerColumn),String)
            End Get
            Set
                Me(Me.tablebudget_summary.managerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property chief() As String
            Get
                Return CType(Me(Me.tablebudget_summary.chiefColumn),String)
            End Get
            Set
                Me(Me.tablebudget_summary.chiefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property expert_1() As String
            Get
                Return CType(Me(Me.tablebudget_summary.expert_1Column),String)
            End Get
            Set
                Me(Me.tablebudget_summary.expert_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property expert_2() As String
            Get
                Return CType(Me(Me.tablebudget_summary.expert_2Column),String)
            End Get
            Set
                Me(Me.tablebudget_summary.expert_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property expert_3() As String
            Get
                Return CType(Me(Me.tablebudget_summary.expert_3Column),String)
            End Get
            Set
                Me(Me.tablebudget_summary.expert_3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property staff_1() As String
            Get
                Return CType(Me(Me.tablebudget_summary.staff_1Column),String)
            End Get
            Set
                Me(Me.tablebudget_summary.staff_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property staff_2() As String
            Get
                Return CType(Me(Me.tablebudget_summary.staff_2Column),String)
            End Get
            Set
                Me(Me.tablebudget_summary.staff_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property staff_3() As String
            Get
                Return CType(Me(Me.tablebudget_summary.staff_3Column),String)
            End Get
            Set
                Me(Me.tablebudget_summary.staff_3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property staff_4() As String
            Get
                Return CType(Me(Me.tablebudget_summary.staff_4Column),String)
            End Get
            Set
                Me(Me.tablebudget_summary.staff_4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property bdgt_dprtmnt() As String
            Get
                Return CType(Me(Me.tablebudget_summary.bdgt_dprtmntColumn),String)
            End Get
            Set
                Me(Me.tablebudget_summary.bdgt_dprtmntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property expense_rate() As Decimal
            Get
                Return CType(Me(Me.tablebudget_summary.expense_rateColumn),Decimal)
            End Get
            Set
                Me(Me.tablebudget_summary.expense_rateColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class closigdateRow
        Inherits Global.System.Data.DataRow
        
        Private tableclosigdate As closigdateDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableclosigdate = CType(Me.Table,closigdateDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property closigdate() As Date
            Get
                Return CType(Me(Me.tableclosigdate.closigdateColumn),Date)
            End Get
            Set
                Me(Me.tableclosigdate.closigdateColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class cost_breakdownsRow
        Inherits Global.System.Data.DataRow
        
        Private tablecost_breakdowns As cost_breakdownsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecost_breakdowns = CType(Me.Table,cost_breakdownsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cst_bd_id() As Integer
            Get
                Return CType(Me(Me.tablecost_breakdowns.cst_bd_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecost_breakdowns.cst_bd_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property stcst_id() As Integer
            Get
                Return CType(Me(Me.tablecost_breakdowns.stcst_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecost_breakdowns.stcst_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cst_bd_no() As Short
            Get
                Return CType(Me(Me.tablecost_breakdowns.cst_bd_noColumn),Short)
            End Get
            Set
                Me(Me.tablecost_breakdowns.cst_bd_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cst_bd_name() As String
            Get
                Return CType(Me(Me.tablecost_breakdowns.cst_bd_nameColumn),String)
            End Get
            Set
                Me(Me.tablecost_breakdowns.cst_bd_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cst_bd_spec() As Decimal
            Get
                Return CType(Me(Me.tablecost_breakdowns.cst_bd_specColumn),Decimal)
            End Get
            Set
                Me(Me.tablecost_breakdowns.cst_bd_specColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cst_bd_unit() As String
            Get
                Return CType(Me(Me.tablecost_breakdowns.cst_bd_unitColumn),String)
            End Get
            Set
                Me(Me.tablecost_breakdowns.cst_bd_unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cst_bd_quanity() As Decimal
            Get
                Return CType(Me(Me.tablecost_breakdowns.cst_bd_quanityColumn),Decimal)
            End Get
            Set
                Me(Me.tablecost_breakdowns.cst_bd_quanityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cst_bd_costea() As Decimal
            Get
                Return CType(Me(Me.tablecost_breakdowns.cst_bd_costeaColumn),Decimal)
            End Get
            Set
                Me(Me.tablecost_breakdowns.cst_bd_costeaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class cost_classesRow
        Inherits Global.System.Data.DataRow
        
        Private tablecost_classes As cost_classesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecost_classes = CType(Me.Table,cost_classesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstclss_code() As Short
            Get
                Return CType(Me(Me.tablecost_classes.cstclss_codeColumn),Short)
            End Get
            Set
                Me(Me.tablecost_classes.cstclss_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstclss_name() As String
            Get
                Return CType(Me(Me.tablecost_classes.cstclss_nameColumn),String)
            End Get
            Set
                Me(Me.tablecost_classes.cstclss_nameColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class cost_mastersRow
        Inherits Global.System.Data.DataRow
        
        Private tablecost_masters As cost_mastersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecost_masters = CType(Me.Table,cost_mastersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstmstr_id() As Integer
            Get
                Return CType(Me(Me.tablecost_masters.cstmstr_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecost_masters.cstmstr_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstclss_code() As Short
            Get
                Return CType(Me(Me.tablecost_masters.cstclss_codeColumn),Short)
            End Get
            Set
                Me(Me.tablecost_masters.cstclss_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstmstr_category() As String
            Get
                Return CType(Me(Me.tablecost_masters.cstmstr_categoryColumn),String)
            End Get
            Set
                Me(Me.tablecost_masters.cstmstr_categoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstmstr_code() As Short
            Get
                Return CType(Me(Me.tablecost_masters.cstmstr_codeColumn),Short)
            End Get
            Set
                Me(Me.tablecost_masters.cstmstr_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstmstr_name() As String
            Get
                Return CType(Me(Me.tablecost_masters.cstmstr_nameColumn),String)
            End Get
            Set
                Me(Me.tablecost_masters.cstmstr_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstmstr_spec() As String
            Get
                Return CType(Me(Me.tablecost_masters.cstmstr_specColumn),String)
            End Get
            Set
                Me(Me.tablecost_masters.cstmstr_specColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstmstr_unit() As String
            Get
                Return CType(Me(Me.tablecost_masters.cstmstr_unitColumn),String)
            End Get
            Set
                Me(Me.tablecost_masters.cstmstr_unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstmstr_costea() As Decimal
            Get
                Return CType(Me(Me.tablecost_masters.cstmstr_costeaColumn),Decimal)
            End Get
            Set
                Me(Me.tablecost_masters.cstmstr_costeaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property changecode() As Short
            Get
                Return CType(Me(Me.tablecost_masters.changecodeColumn),Short)
            End Get
            Set
                Me(Me.tablecost_masters.changecodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstmstr_seq() As Short
            Get
                Return CType(Me(Me.tablecost_masters.cstmstr_seqColumn),Short)
            End Get
            Set
                Me(Me.tablecost_masters.cstmstr_seqColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class detailsRow
        Inherits Global.System.Data.DataRow
        
        Private tabledetails As detailsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledetails = CType(Me.Table,detailsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtl_id() As Integer
            Get
                Return CType(Me(Me.tabledetails.dtl_idColumn),Integer)
            End Get
            Set
                Me(Me.tabledetails.dtl_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cntrct_no() As Short
            Get
                Return CType(Me(Me.tabledetails.cntrct_noColumn),Short)
            End Get
            Set
                Me(Me.tabledetails.cntrct_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtl_no() As Short
            Get
                Return CType(Me(Me.tabledetails.dtl_noColumn),Short)
            End Get
            Set
                Me(Me.tabledetails.dtl_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property s_worktype_code() As Short
            Get
                Return CType(Me(Me.tabledetails.s_worktype_codeColumn),Short)
            End Get
            Set
                Me(Me.tabledetails.s_worktype_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstclss_code() As Short
            Get
                Return CType(Me(Me.tabledetails.cstclss_codeColumn),Short)
            End Get
            Set
                Me(Me.tabledetails.cstclss_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstmstr_id() As Integer
            Get
                Return CType(Me(Me.tabledetails.cstmstr_idColumn),Integer)
            End Get
            Set
                Me(Me.tabledetails.cstmstr_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtl_name() As String
            Get
                Return CType(Me(Me.tabledetails.dtl_nameColumn),String)
            End Get
            Set
                Me(Me.tabledetails.dtl_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtl_spec() As String
            Get
                Return CType(Me(Me.tabledetails.dtl_specColumn),String)
            End Get
            Set
                Me(Me.tabledetails.dtl_specColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtl_unit() As String
            Get
                Return CType(Me(Me.tabledetails.dtl_unitColumn),String)
            End Get
            Set
                Me(Me.tabledetails.dtl_unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtl_quanity() As Decimal
            Get
                Return CType(Me(Me.tabledetails.dtl_quanityColumn),Decimal)
            End Get
            Set
                Me(Me.tabledetails.dtl_quanityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtl_costea() As Decimal
            Get
                Return CType(Me(Me.tabledetails.dtl_costeaColumn),Decimal)
            End Get
            Set
                Me(Me.tabledetails.dtl_costeaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtl_labor() As Decimal
            Get
                Return CType(Me(Me.tabledetails.dtl_laborColumn),Decimal)
            End Get
            Set
                Me(Me.tabledetails.dtl_laborColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtl_material() As Decimal
            Get
                Return CType(Me(Me.tabledetails.dtl_materialColumn),Decimal)
            End Get
            Set
                Me(Me.tabledetails.dtl_materialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtl_machine() As Decimal
            Get
                Return CType(Me(Me.tabledetails.dtl_machineColumn),Decimal)
            End Get
            Set
                Me(Me.tabledetails.dtl_machineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property outsrcr_code() As Integer
            Get
                Return CType(Me(Me.tabledetails.outsrcr_codeColumn),Integer)
            End Get
            Set
                Me(Me.tabledetails.outsrcr_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtl_subcntrct() As Decimal
            Get
                Return CType(Me(Me.tabledetails.dtl_subcntrctColumn),Decimal)
            End Get
            Set
                Me(Me.tabledetails.dtl_subcntrctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtl_expens() As Decimal
            Get
                Return CType(Me(Me.tabledetails.dtl_expensColumn),Decimal)
            End Get
            Set
                Me(Me.tabledetails.dtl_expensColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtl_fraction() As Decimal
            Get
                Return CType(Me(Me.tabledetails.dtl_fractionColumn),Decimal)
            End Get
            Set
                Me(Me.tabledetails.dtl_fractionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtl_remarks() As String
            Get
                Return CType(Me(Me.tabledetails.dtl_remarksColumn),String)
            End Get
            Set
                Me(Me.tabledetails.dtl_remarksColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class estimatesRow
        Inherits Global.System.Data.DataRow
        
        Private tableestimates As estimatesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableestimates = CType(Me.Table,estimatesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property estmt_code() As Short
            Get
                Return CType(Me(Me.tableestimates.estmt_codeColumn),Short)
            End Get
            Set
                Me(Me.tableestimates.estmt_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property estmt_date() As Date
            Get
                Return CType(Me(Me.tableestimates.estmt_dateColumn),Date)
            End Get
            Set
                Me(Me.tableestimates.estmt_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property estmt_prjct_name() As String
            Get
                Return CType(Me(Me.tableestimates.estmt_prjct_nameColumn),String)
            End Get
            Set
                Me(Me.tableestimates.estmt_prjct_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property estmt_amount() As Decimal
            Get
                Return CType(Me(Me.tableestimates.estmt_amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableestimates.estmt_amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property estmt_taxin() As Decimal
            Get
                Return CType(Me(Me.tableestimates.estmt_taxinColumn),Decimal)
            End Get
            Set
                Me(Me.tableestimates.estmt_taxinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property estmt_tax() As Decimal
            Get
                Return CType(Me(Me.tableestimates.estmt_taxColumn),Decimal)
            End Get
            Set
                Me(Me.tableestimates.estmt_taxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property estmt_taxrate() As Short
            Get
                Return CType(Me(Me.tableestimates.estmt_taxrateColumn),Short)
            End Get
            Set
                Me(Me.tableestimates.estmt_taxrateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjct_address() As String
            Get
                Return CType(Me(Me.tableestimates.prjct_addressColumn),String)
            End Get
            Set
                Me(Me.tableestimates.prjct_addressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property deliveryplace() As String
            Get
                Return CType(Me(Me.tableestimates.deliveryplaceColumn),String)
            End Get
            Set
                Me(Me.tableestimates.deliveryplaceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property paymentterms() As String
            Get
                Return CType(Me(Me.tableestimates.paymenttermsColumn),String)
            End Get
            Set
                Me(Me.tableestimates.paymenttermsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property expirationdate() As Date
            Get
                Return CType(Me(Me.tableestimates.expirationdateColumn),Date)
            End Get
            Set
                Me(Me.tableestimates.expirationdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property destination() As String
            Get
                Return CType(Me(Me.tableestimates.destinationColumn),String)
            End Get
            Set
                Me(Me.tableestimates.destinationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property pblshr_address() As String
            Get
                Return CType(Me(Me.tableestimates.pblshr_addressColumn),String)
            End Get
            Set
                Me(Me.tableestimates.pblshr_addressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property pblshr_cmpnyname() As String
            Get
                Return CType(Me(Me.tableestimates.pblshr_cmpnynameColumn),String)
            End Get
            Set
                Me(Me.tableestimates.pblshr_cmpnynameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property pblshr_prsdnt() As String
            Get
                Return CType(Me(Me.tableestimates.pblshr_prsdntColumn),String)
            End Get
            Set
                Me(Me.tableestimates.pblshr_prsdntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property pblshr_tel() As String
            Get
                Return CType(Me(Me.tableestimates.pblshr_telColumn),String)
            End Get
            Set
                Me(Me.tableestimates.pblshr_telColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property pblshr_fax() As String
            Get
                Return CType(Me(Me.tableestimates.pblshr_faxColumn),String)
            End Get
            Set
                Me(Me.tableestimates.pblshr_faxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property conditions() As String
            Get
                Return CType(Me(Me.tableestimates.conditionsColumn),String)
            End Get
            Set
                Me(Me.tableestimates.conditionsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cndtns_dtls() As String
            Get
                Return CType(Me(Me.tableestimates.cndtns_dtlsColumn),String)
            End Get
            Set
                Me(Me.tableestimates.cndtns_dtlsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property discount() As Decimal
            Get
                Return CType(Me(Me.tableestimates.discountColumn),Decimal)
            End Get
            Set
                Me(Me.tableestimates.discountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property bdrate() As Short
            Get
                Return CType(Me(Me.tableestimates.bdrateColumn),Short)
            End Get
            Set
                Me(Me.tableestimates.bdrateColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class expense_breakdownsRow
        Inherits Global.System.Data.DataRow
        
        Private tableexpense_breakdowns As expense_breakdownsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableexpense_breakdowns = CType(Me.Table,expense_breakdownsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property expns_bd_id() As Integer
            Get
                Return CType(Me(Me.tableexpense_breakdowns.expns_bd_idColumn),Integer)
            End Get
            Set
                Me(Me.tableexpense_breakdowns.expns_bd_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property stexpns_id() As Integer
            Get
                Return CType(Me(Me.tableexpense_breakdowns.stexpns_idColumn),Integer)
            End Get
            Set
                Me(Me.tableexpense_breakdowns.stexpns_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property expns_bd_no() As Short
            Get
                Return CType(Me(Me.tableexpense_breakdowns.expns_bd_noColumn),Short)
            End Get
            Set
                Me(Me.tableexpense_breakdowns.expns_bd_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property expns_bd_name() As String
            Get
                Return CType(Me(Me.tableexpense_breakdowns.expns_bd_nameColumn),String)
            End Get
            Set
                Me(Me.tableexpense_breakdowns.expns_bd_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property expns_bd_spec() As Decimal
            Get
                Return CType(Me(Me.tableexpense_breakdowns.expns_bd_specColumn),Decimal)
            End Get
            Set
                Me(Me.tableexpense_breakdowns.expns_bd_specColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property expns_bd_unit() As String
            Get
                Return CType(Me(Me.tableexpense_breakdowns.expns_bd_unitColumn),String)
            End Get
            Set
                Me(Me.tableexpense_breakdowns.expns_bd_unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property expns_bd_quanity() As Decimal
            Get
                Return CType(Me(Me.tableexpense_breakdowns.expns_bd_quanityColumn),Decimal)
            End Get
            Set
                Me(Me.tableexpense_breakdowns.expns_bd_quanityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property expns_bd_costea() As Decimal
            Get
                Return CType(Me(Me.tableexpense_breakdowns.expns_bd_costeaColumn),Decimal)
            End Get
            Set
                Me(Me.tableexpense_breakdowns.expns_bd_costeaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class outsourcersRow
        Inherits Global.System.Data.DataRow
        
        Private tableoutsourcers As outsourcersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableoutsourcers = CType(Me.Table,outsourcersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property outsrcr_code() As Integer
            Get
                Return CType(Me(Me.tableoutsourcers.outsrcr_codeColumn),Integer)
            End Get
            Set
                Me(Me.tableoutsourcers.outsrcr_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property outsrcr_name() As String
            Get
                Return CType(Me(Me.tableoutsourcers.outsrcr_nameColumn),String)
            End Get
            Set
                Me(Me.tableoutsourcers.outsrcr_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property outsrcr_trm_s() As Date
            Get
                Return CType(Me(Me.tableoutsourcers.outsrcr_trm_sColumn),Date)
            End Get
            Set
                Me(Me.tableoutsourcers.outsrcr_trm_sColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property outsrcr_trm_e() As Date
            Get
                Return CType(Me(Me.tableoutsourcers.outsrcr_trm_eColumn),Date)
            End Get
            Set
                Me(Me.tableoutsourcers.outsrcr_trm_eColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property worktype() As String
            Get
                Return CType(Me(Me.tableoutsourcers.worktypeColumn),String)
            End Get
            Set
                Me(Me.tableoutsourcers.worktypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ordrfrm() As Short
            Get
                Return CType(Me(Me.tableoutsourcers.ordrfrmColumn),Short)
            End Get
            Set
                Me(Me.tableoutsourcers.ordrfrmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _e_cntrct() As String
            Get
                Return CType(Me(Me.tableoutsourcers._e_cntrctColumn),String)
            End Get
            Set
                Me(Me.tableoutsourcers._e_cntrctColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class outsourcing_plansRow
        Inherits Global.System.Data.DataRow
        
        Private tableoutsourcing_plans As outsourcing_plansDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableoutsourcing_plans = CType(Me.Table,outsourcing_plansDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property outsrc_no() As Short
            Get
                Return CType(Me(Me.tableoutsourcing_plans.outsrc_noColumn),Short)
            End Get
            Set
                Me(Me.tableoutsourcing_plans.outsrc_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstclss_code() As Short
            Get
                Return CType(Me(Me.tableoutsourcing_plans.cstclss_codeColumn),Short)
            End Get
            Set
                Me(Me.tableoutsourcing_plans.cstclss_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cost_id() As Integer
            Get
                Return CType(Me(Me.tableoutsourcing_plans.cost_idColumn),Integer)
            End Get
            Set
                Me(Me.tableoutsourcing_plans.cost_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property outsrcr_code() As Integer
            Get
                Return CType(Me(Me.tableoutsourcing_plans.outsrcr_codeColumn),Integer)
            End Get
            Set
                Me(Me.tableoutsourcing_plans.outsrcr_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property outsrcng_quanity() As Decimal
            Get
                Return CType(Me(Me.tableoutsourcing_plans.outsrcng_quanityColumn),Decimal)
            End Get
            Set
                Me(Me.tableoutsourcing_plans.outsrcng_quanityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property outsrcng_costea() As Decimal
            Get
                Return CType(Me(Me.tableoutsourcing_plans.outsrcng_costeaColumn),Decimal)
            End Get
            Set
                Me(Me.tableoutsourcing_plans.outsrcng_costeaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property created_date() As Date
            Get
                Return CType(Me(Me.tableoutsourcing_plans.created_dateColumn),Date)
            End Get
            Set
                Me(Me.tableoutsourcing_plans.created_dateColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class outsourcing_reportsRow
        Inherits Global.System.Data.DataRow
        
        Private tableoutsourcing_reports As outsourcing_reportsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableoutsourcing_reports = CType(Me.Table,outsourcing_reportsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjct_code() As String
            Get
                Return CType(Me(Me.tableoutsourcing_reports.prjct_codeColumn),String)
            End Get
            Set
                Me(Me.tableoutsourcing_reports.prjct_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cntrct_no() As Short
            Get
                Return CType(Me(Me.tableoutsourcing_reports.cntrct_noColumn),Short)
            End Get
            Set
                Me(Me.tableoutsourcing_reports.cntrct_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property created_date() As Date
            Get
                Return CType(Me(Me.tableoutsourcing_reports.created_dateColumn),Date)
            End Get
            Set
                Me(Me.tableoutsourcing_reports.created_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property changes() As String
            Get
                Return CType(Me(Me.tableoutsourcing_reports.changesColumn),String)
            End Get
            Set
                Me(Me.tableoutsourcing_reports.changesColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class productionsRow
        Inherits Global.System.Data.DataRow
        
        Private tableproductions As productionsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproductions = CType(Me.Table,productionsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property closing_date() As Date
            Get
                Return CType(Me(Me.tableproductions.closing_dateColumn),Date)
            End Get
            Set
                Me(Me.tableproductions.closing_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjct_code() As String
            Get
                Return CType(Me(Me.tableproductions.prjct_codeColumn),String)
            End Get
            Set
                Me(Me.tableproductions.prjct_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cntrct_no() As Short
            Get
                Return CType(Me(Me.tableproductions.cntrct_noColumn),Short)
            End Get
            Set
                Me(Me.tableproductions.cntrct_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtls_id() As Integer
            Get
                Return CType(Me(Me.tableproductions.dtls_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproductions.dtls_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property last_costea() As Decimal
            Get
                Return CType(Me(Me.tableproductions.last_costeaColumn),Decimal)
            End Get
            Set
                Me(Me.tableproductions.last_costeaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property last_quanity() As Decimal
            Get
                Return CType(Me(Me.tableproductions.last_quanityColumn),Decimal)
            End Get
            Set
                Me(Me.tableproductions.last_quanityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property last_amount() As Decimal
            Get
                Return CType(Me(Me.tableproductions.last_amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableproductions.last_amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property total_costea() As Decimal
            Get
                Return CType(Me(Me.tableproductions.total_costeaColumn),Decimal)
            End Get
            Set
                Me(Me.tableproductions.total_costeaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property total_quanity() As Decimal
            Get
                Return CType(Me(Me.tableproductions.total_quanityColumn),Decimal)
            End Get
            Set
                Me(Me.tableproductions.total_quanityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property total_amount() As Decimal
            Get
                Return CType(Me(Me.tableproductions.total_amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableproductions.total_amountColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class project_cost_breakdownsRow
        Inherits Global.System.Data.DataRow
        
        Private tableproject_cost_breakdowns As project_cost_breakdownsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproject_cost_breakdowns = CType(Me.Table,project_cost_breakdownsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_bd_id() As Integer
            Get
                Return CType(Me(Me.tableproject_cost_breakdowns.prjctcst_bd_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproject_cost_breakdowns.prjctcst_bd_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_id() As Integer
            Get
                Return CType(Me(Me.tableproject_cost_breakdowns.prjctcst_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproject_cost_breakdowns.prjctcst_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstmstr_id() As Integer
            Get
                Return CType(Me(Me.tableproject_cost_breakdowns.cstmstr_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproject_cost_breakdowns.cstmstr_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_bd_no() As Short
            Get
                Return CType(Me(Me.tableproject_cost_breakdowns.prjctcst_bd_noColumn),Short)
            End Get
            Set
                Me(Me.tableproject_cost_breakdowns.prjctcst_bd_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_bd_name() As String
            Get
                Return CType(Me(Me.tableproject_cost_breakdowns.prjctcst_bd_nameColumn),String)
            End Get
            Set
                Me(Me.tableproject_cost_breakdowns.prjctcst_bd_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_bd_spec() As String
            Get
                Return CType(Me(Me.tableproject_cost_breakdowns.prjctcst_bd_specColumn),String)
            End Get
            Set
                Me(Me.tableproject_cost_breakdowns.prjctcst_bd_specColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_bd_unit() As String
            Get
                Return CType(Me(Me.tableproject_cost_breakdowns.prjctcst_bd_unitColumn),String)
            End Get
            Set
                Me(Me.tableproject_cost_breakdowns.prjctcst_bd_unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_bd_quanity() As Decimal
            Get
                Return CType(Me(Me.tableproject_cost_breakdowns.prjctcst_bd_quanityColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject_cost_breakdowns.prjctcst_bd_quanityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_bd_costea() As Decimal
            Get
                Return CType(Me(Me.tableproject_cost_breakdowns.prjctcst_bd_costeaColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject_cost_breakdowns.prjctcst_bd_costeaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_bd_labor() As Decimal
            Get
                Return CType(Me(Me.tableproject_cost_breakdowns.prjctcst_bd_laborColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject_cost_breakdowns.prjctcst_bd_laborColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_bd_material() As Decimal
            Get
                Return CType(Me(Me.tableproject_cost_breakdowns.prjctcst_bd_materialColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject_cost_breakdowns.prjctcst_bd_materialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_bd_machine() As Decimal
            Get
                Return CType(Me(Me.tableproject_cost_breakdowns.prjctcst_bd_machineColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject_cost_breakdowns.prjctcst_bd_machineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_bd_subcntrct() As Decimal
            Get
                Return CType(Me(Me.tableproject_cost_breakdowns.prjctcst_bd_subcntrctColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject_cost_breakdowns.prjctcst_bd_subcntrctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_bd_expense() As Decimal
            Get
                Return CType(Me(Me.tableproject_cost_breakdowns.prjctcst_bd_expenseColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject_cost_breakdowns.prjctcst_bd_expenseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_bd_remarks() As String
            Get
                Return CType(Me(Me.tableproject_cost_breakdowns.prjctcst_bd_remarksColumn),String)
            End Get
            Set
                Me(Me.tableproject_cost_breakdowns.prjctcst_bd_remarksColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class project_costsRow
        Inherits Global.System.Data.DataRow
        
        Private tableproject_costs As project_costsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproject_costs = CType(Me.Table,project_costsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_id() As Integer
            Get
                Return CType(Me(Me.tableproject_costs.prjctcst_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproject_costs.prjctcst_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cntrct_no() As Short
            Get
                Return CType(Me(Me.tableproject_costs.cntrct_noColumn),Short)
            End Get
            Set
                Me(Me.tableproject_costs.cntrct_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cstclss_code() As Short
            Get
                Return CType(Me(Me.tableproject_costs.cstclss_codeColumn),Short)
            End Get
            Set
                Me(Me.tableproject_costs.cstclss_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_no() As Short
            Get
                Return CType(Me(Me.tableproject_costs.prjctcst_noColumn),Short)
            End Get
            Set
                Me(Me.tableproject_costs.prjctcst_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_name() As String
            Get
                Return CType(Me(Me.tableproject_costs.prjctcst_nameColumn),String)
            End Get
            Set
                Me(Me.tableproject_costs.prjctcst_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_spec() As String
            Get
                Return CType(Me(Me.tableproject_costs.prjctcst_specColumn),String)
            End Get
            Set
                Me(Me.tableproject_costs.prjctcst_specColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_unit() As String
            Get
                Return CType(Me(Me.tableproject_costs.prjctcst_unitColumn),String)
            End Get
            Set
                Me(Me.tableproject_costs.prjctcst_unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_quanity() As Decimal
            Get
                Return CType(Me(Me.tableproject_costs.prjctcst_quanityColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject_costs.prjctcst_quanityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_costea() As Decimal
            Get
                Return CType(Me(Me.tableproject_costs.prjctcst_costeaColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject_costs.prjctcst_costeaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_laborea() As Decimal
            Get
                Return CType(Me(Me.tableproject_costs.prjctcst_laboreaColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject_costs.prjctcst_laboreaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_machineea() As Decimal
            Get
                Return CType(Me(Me.tableproject_costs.prjctcst_machineeaColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject_costs.prjctcst_machineeaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_subcntrctea() As Decimal
            Get
                Return CType(Me(Me.tableproject_costs.prjctcst_subcntrcteaColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject_costs.prjctcst_subcntrcteaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property prjctcst_expenseea() As Decimal
            Get
                Return CType(Me(Me.tableproject_costs.prjctcst_expenseeaColumn),Decimal)
            End Get
            Set
                Me(Me.tableproject_costs.prjctcst_expenseeaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class purchase_ordersRow
        Inherits Global.System.Data.DataRow
        
        Private tablepurchase_orders As purchase_ordersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepurchase_orders = CType(Me.Table,purchase_ordersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property outsrcr_code() As Date
            Get
                Return CType(Me(Me.tablepurchase_orders.outsrcr_codeColumn),Date)
            End Get
            Set
                Me(Me.tablepurchase_orders.outsrcr_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property s_worktype_code() As Short
            Get
                Return CType(Me(Me.tablepurchase_orders.s_worktype_codeColumn),Short)
            End Get
            Set
                Me(Me.tablepurchase_orders.s_worktype_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property no() As String
            Get
                Return CType(Me(Me.tablepurchase_orders.noColumn),String)
            End Get
            Set
                Me(Me.tablepurchase_orders.noColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class site_costsRow
        Inherits Global.System.Data.DataRow
        
        Private tablesite_costs As site_costsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesite_costs = CType(Me.Table,site_costsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property stcst_id() As Integer
            Get
                Return CType(Me(Me.tablesite_costs.stcst_idColumn),Integer)
            End Get
            Set
                Me(Me.tablesite_costs.stcst_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cntrct_no() As Short
            Get
                Return CType(Me(Me.tablesite_costs.cntrct_noColumn),Short)
            End Get
            Set
                Me(Me.tablesite_costs.cntrct_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property stcst_code() As Short
            Get
                Return CType(Me(Me.tablesite_costs.stcst_codeColumn),Short)
            End Get
            Set
                Me(Me.tablesite_costs.stcst_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property stcst_name() As String
            Get
                Return CType(Me(Me.tablesite_costs.stcst_nameColumn),String)
            End Get
            Set
                Me(Me.tablesite_costs.stcst_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property stcst_amount() As Decimal
            Get
                Return CType(Me(Me.tablesite_costs.stcst_amountColumn),Decimal)
            End Get
            Set
                Me(Me.tablesite_costs.stcst_amountColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class site_expensesRow
        Inherits Global.System.Data.DataRow
        
        Private tablesite_expenses As site_expensesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesite_expenses = CType(Me.Table,site_expensesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property stexpns_id() As Integer
            Get
                Return CType(Me(Me.tablesite_expenses.stexpns_idColumn),Integer)
            End Get
            Set
                Me(Me.tablesite_expenses.stexpns_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cntrct_no() As Short
            Get
                Return CType(Me(Me.tablesite_expenses.cntrct_noColumn),Short)
            End Get
            Set
                Me(Me.tablesite_expenses.cntrct_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property stexpns_code() As Short
            Get
                Return CType(Me(Me.tablesite_expenses.stexpns_codeColumn),Short)
            End Get
            Set
                Me(Me.tablesite_expenses.stexpns_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property stexpns_name() As String
            Get
                Return CType(Me(Me.tablesite_expenses.stexpns_nameColumn),String)
            End Get
            Set
                Me(Me.tablesite_expenses.stexpns_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property stexpns_amount() As Decimal
            Get
                Return CType(Me(Me.tablesite_expenses.stexpns_amountColumn),Decimal)
            End Get
            Set
                Me(Me.tablesite_expenses.stexpns_amountColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class budget_summaryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As budget_summaryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As budget_summaryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As budget_summaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class closigdateRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As closigdateRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As closigdateRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As closigdateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class cost_breakdownsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As cost_breakdownsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As cost_breakdownsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As cost_breakdownsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class cost_classesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As cost_classesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As cost_classesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As cost_classesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class cost_mastersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As cost_mastersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As cost_mastersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As cost_mastersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class detailsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As detailsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As detailsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As detailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class estimatesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As estimatesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As estimatesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As estimatesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class expense_breakdownsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As expense_breakdownsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As expense_breakdownsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As expense_breakdownsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class outsourcersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As outsourcersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As outsourcersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As outsourcersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class outsourcing_plansRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As outsourcing_plansRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As outsourcing_plansRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As outsourcing_plansRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class outsourcing_reportsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As outsourcing_reportsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As outsourcing_reportsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As outsourcing_reportsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class productionsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As productionsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As productionsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As productionsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class project_cost_breakdownsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As project_cost_breakdownsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As project_cost_breakdownsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As project_cost_breakdownsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class project_costsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As project_costsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As project_costsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As project_costsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class purchase_ordersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As purchase_ordersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As purchase_ordersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As purchase_ordersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class site_costsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As site_costsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As site_costsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As site_costsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class site_expensesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As site_expensesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As site_expensesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As site_expensesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace 現場データDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class budget_summaryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "budget_summary"
            tableMapping.ColumnMappings.Add("cntrct_no", "cntrct_no")
            tableMapping.ColumnMappings.Add("prjct_term_s", "prjct_term_s")
            tableMapping.ColumnMappings.Add("prjct_term_e", "prjct_term_e")
            tableMapping.ColumnMappings.Add("cntrct_amount", "cntrct_amount")
            tableMapping.ColumnMappings.Add("prjct_category", "prjct_category")
            tableMapping.ColumnMappings.Add("cnsdrtn_date", "cnsdrtn_date")
            tableMapping.ColumnMappings.Add("prjct_summary", "prjct_summary")
            tableMapping.ColumnMappings.Add("subcontract_rate", "subcontract_rate")
            tableMapping.ColumnMappings.Add("remarks", "remarks")
            tableMapping.ColumnMappings.Add("department", "department")
            tableMapping.ColumnMappings.Add("director", "director")
            tableMapping.ColumnMappings.Add("manager", "manager")
            tableMapping.ColumnMappings.Add("chief", "chief")
            tableMapping.ColumnMappings.Add("expert_1", "expert_1")
            tableMapping.ColumnMappings.Add("expert_2", "expert_2")
            tableMapping.ColumnMappings.Add("expert_3", "expert_3")
            tableMapping.ColumnMappings.Add("staff_1", "staff_1")
            tableMapping.ColumnMappings.Add("staff_2", "staff_2")
            tableMapping.ColumnMappings.Add("staff_3", "staff_3")
            tableMapping.ColumnMappings.Add("staff_4", "staff_4")
            tableMapping.ColumnMappings.Add("bdgt_dprtmnt", "bdgt_dprtmnt")
            tableMapping.ColumnMappings.Add("expense_rate", "expense_rate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[budget_summary] WHERE (([cntrct_no] = @Original_cntrct_no) AND"& _ 
                " ([prjct_term_s] = @Original_prjct_term_s) AND ([prjct_term_e] = @Original_prjct"& _ 
                "_term_e) AND ([cntrct_amount] = @Original_cntrct_amount) AND ([prjct_category] ="& _ 
                " @Original_prjct_category) AND ([cnsdrtn_date] = @Original_cnsdrtn_date) AND ([p"& _ 
                "rjct_summary] = @Original_prjct_summary) AND ([subcontract_rate] = @Original_sub"& _ 
                "contract_rate) AND ([remarks] = @Original_remarks) AND ([department] = @Original"& _ 
                "_department) AND ([director] = @Original_director) AND ([manager] = @Original_ma"& _ 
                "nager) AND ([chief] = @Original_chief) AND ([expert_1] = @Original_expert_1) AND"& _ 
                " ([expert_2] = @Original_expert_2) AND ([expert_3] = @Original_expert_3) AND ([s"& _ 
                "taff_1] = @Original_staff_1) AND ([staff_2] = @Original_staff_2) AND ([staff_3] "& _ 
                "= @Original_staff_3) AND ([staff_4] = @Original_staff_4) AND ([bdgt_dprtmnt] = @"& _ 
                "Original_bdgt_dprtmnt) AND ([expense_rate] = @Original_expense_rate))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjct_term_s", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_term_s", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjct_term_e", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_term_e", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cntrct_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjct_category", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_category", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cnsdrtn_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cnsdrtn_date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjct_summary", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_summary", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subcontract_rate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subcontract_rate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_department", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "department", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_director", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "director", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_manager", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "manager", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_chief", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "chief", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expert_1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expert_1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expert_2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expert_2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expert_3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expert_3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_staff_1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_staff_2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_staff_3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_staff_4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bdgt_dprtmnt", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bdgt_dprtmnt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expense_rate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "expense_rate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[budget_summary] ([cntrct_no], [prjct_term_s], [prjct_term_e], "& _ 
                "[cntrct_amount], [prjct_category], [cnsdrtn_date], [prjct_summary], [subcontract"& _ 
                "_rate], [remarks], [department], [director], [manager], [chief], [expert_1], [ex"& _ 
                "pert_2], [expert_3], [staff_1], [staff_2], [staff_3], [staff_4], [bdgt_dprtmnt],"& _ 
                " [expense_rate]) VALUES (@cntrct_no, @prjct_term_s, @prjct_term_e, @cntrct_amoun"& _ 
                "t, @prjct_category, @cnsdrtn_date, @prjct_summary, @subcontract_rate, @remarks, "& _ 
                "@department, @director, @manager, @chief, @expert_1, @expert_2, @expert_3, @staf"& _ 
                "f_1, @staff_2, @staff_3, @staff_4, @bdgt_dprtmnt, @expense_rate);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cntrct"& _ 
                "_no, prjct_term_s, prjct_term_e, cntrct_amount, prjct_category, cnsdrtn_date, pr"& _ 
                "jct_summary, subcontract_rate, remarks, department, director, manager, chief, ex"& _ 
                "pert_1, expert_2, expert_3, staff_1, staff_2, staff_3, staff_4, bdgt_dprtmnt, ex"& _ 
                "pense_rate FROM budget_summary WHERE (cntrct_no = @cntrct_no)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjct_term_s", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_term_s", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjct_term_e", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_term_e", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cntrct_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjct_category", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_category", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cnsdrtn_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cnsdrtn_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjct_summary", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_summary", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subcontract_rate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subcontract_rate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@department", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "department", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@director", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "director", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@manager", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "manager", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@chief", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "chief", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expert_1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expert_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expert_2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expert_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expert_3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expert_3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@staff_1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@staff_2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@staff_3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@staff_4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bdgt_dprtmnt", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bdgt_dprtmnt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expense_rate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "expense_rate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[budget_summary] SET [cntrct_no] = @cntrct_no, [prjct_term_s] = @prj"& _ 
                "ct_term_s, [prjct_term_e] = @prjct_term_e, [cntrct_amount] = @cntrct_amount, [pr"& _ 
                "jct_category] = @prjct_category, [cnsdrtn_date] = @cnsdrtn_date, [prjct_summary]"& _ 
                " = @prjct_summary, [subcontract_rate] = @subcontract_rate, [remarks] = @remarks,"& _ 
                " [department] = @department, [director] = @director, [manager] = @manager, [chie"& _ 
                "f] = @chief, [expert_1] = @expert_1, [expert_2] = @expert_2, [expert_3] = @exper"& _ 
                "t_3, [staff_1] = @staff_1, [staff_2] = @staff_2, [staff_3] = @staff_3, [staff_4]"& _ 
                " = @staff_4, [bdgt_dprtmnt] = @bdgt_dprtmnt, [expense_rate] = @expense_rate WHER"& _ 
                "E (([cntrct_no] = @Original_cntrct_no) AND ([prjct_term_s] = @Original_prjct_ter"& _ 
                "m_s) AND ([prjct_term_e] = @Original_prjct_term_e) AND ([cntrct_amount] = @Origi"& _ 
                "nal_cntrct_amount) AND ([prjct_category] = @Original_prjct_category) AND ([cnsdr"& _ 
                "tn_date] = @Original_cnsdrtn_date) AND ([prjct_summary] = @Original_prjct_summar"& _ 
                "y) AND ([subcontract_rate] = @Original_subcontract_rate) AND ([remarks] = @Origi"& _ 
                "nal_remarks) AND ([department] = @Original_department) AND ([director] = @Origin"& _ 
                "al_director) AND ([manager] = @Original_manager) AND ([chief] = @Original_chief)"& _ 
                " AND ([expert_1] = @Original_expert_1) AND ([expert_2] = @Original_expert_2) AND"& _ 
                " ([expert_3] = @Original_expert_3) AND ([staff_1] = @Original_staff_1) AND ([sta"& _ 
                "ff_2] = @Original_staff_2) AND ([staff_3] = @Original_staff_3) AND ([staff_4] = "& _ 
                "@Original_staff_4) AND ([bdgt_dprtmnt] = @Original_bdgt_dprtmnt) AND ([expense_r"& _ 
                "ate] = @Original_expense_rate));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cntrct_no, prjct_term_s, prjct_term_e, "& _ 
                "cntrct_amount, prjct_category, cnsdrtn_date, prjct_summary, subcontract_rate, re"& _ 
                "marks, department, director, manager, chief, expert_1, expert_2, expert_3, staff"& _ 
                "_1, staff_2, staff_3, staff_4, bdgt_dprtmnt, expense_rate FROM budget_summary WH"& _ 
                "ERE (cntrct_no = @cntrct_no)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjct_term_s", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_term_s", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjct_term_e", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_term_e", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cntrct_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjct_category", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_category", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cnsdrtn_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cnsdrtn_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjct_summary", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_summary", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subcontract_rate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subcontract_rate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@department", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "department", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@director", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "director", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@manager", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "manager", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@chief", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "chief", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expert_1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expert_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expert_2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expert_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expert_3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expert_3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@staff_1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@staff_2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@staff_3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@staff_4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bdgt_dprtmnt", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bdgt_dprtmnt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expense_rate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "expense_rate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjct_term_s", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_term_s", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjct_term_e", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_term_e", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cntrct_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjct_category", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_category", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cnsdrtn_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cnsdrtn_date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjct_summary", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_summary", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subcontract_rate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subcontract_rate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_department", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "department", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_director", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "director", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_manager", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "manager", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_chief", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "chief", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expert_1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expert_1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expert_2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expert_2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expert_3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expert_3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_staff_1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_staff_2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_staff_3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_staff_4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "staff_4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bdgt_dprtmnt", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bdgt_dprtmnt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expense_rate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "expense_rate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT cntrct_no, prjct_term_s, prjct_term_e, cntrct_amount, prjct_category, cnsd"& _ 
                "rtn_date, prjct_summary, subcontract_rate, remarks, department, director, manage"& _ 
                "r, chief, expert_1, expert_2, expert_3, staff_1, staff_2, staff_3, staff_4, bdgt"& _ 
                "_dprtmnt, expense_rate FROM dbo.budget_summary"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.budget_summaryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.budget_summaryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.budget_summaryDataTable = New 現場データDataSet.budget_summaryDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.budget_summaryDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "budget_summary")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_cntrct_no As Short,  _
                    ByVal Original_prjct_term_s As Date,  _
                    ByVal Original_prjct_term_e As Date,  _
                    ByVal Original_cntrct_amount As Decimal,  _
                    ByVal Original_prjct_category As String,  _
                    ByVal Original_cnsdrtn_date As Date,  _
                    ByVal Original_prjct_summary As String,  _
                    ByVal Original_subcontract_rate As String,  _
                    ByVal Original_remarks As String,  _
                    ByVal Original_department As String,  _
                    ByVal Original_director As String,  _
                    ByVal Original_manager As String,  _
                    ByVal Original_chief As String,  _
                    ByVal Original_expert_1 As String,  _
                    ByVal Original_expert_2 As String,  _
                    ByVal Original_expert_3 As String,  _
                    ByVal Original_staff_1 As String,  _
                    ByVal Original_staff_2 As String,  _
                    ByVal Original_staff_3 As String,  _
                    ByVal Original_staff_4 As String,  _
                    ByVal Original_bdgt_dprtmnt As String,  _
                    ByVal Original_expense_rate As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_cntrct_no,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_prjct_term_s,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_prjct_term_e,Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_cntrct_amount,Decimal)
            If (Original_prjct_category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjct_category")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_prjct_category,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_cnsdrtn_date,Date)
            If (Original_prjct_summary Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjct_summary")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_prjct_summary,String)
            End If
            If (Original_subcontract_rate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_subcontract_rate")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_subcontract_rate,String)
            End If
            If (Original_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_remarks,String)
            End If
            If (Original_department Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_department")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_department,String)
            End If
            If (Original_director Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_director")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_director,String)
            End If
            If (Original_manager Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_manager")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_manager,String)
            End If
            If (Original_chief Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_chief")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_chief,String)
            End If
            If (Original_expert_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expert_1")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_expert_1,String)
            End If
            If (Original_expert_2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expert_2")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_expert_2,String)
            End If
            If (Original_expert_3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expert_3")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_expert_3,String)
            End If
            If (Original_staff_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_staff_1")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_staff_1,String)
            End If
            If (Original_staff_2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_staff_2")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_staff_2,String)
            End If
            If (Original_staff_3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_staff_3")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_staff_3,String)
            End If
            If (Original_staff_4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_staff_4")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_staff_4,String)
            End If
            If (Original_bdgt_dprtmnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bdgt_dprtmnt")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_bdgt_dprtmnt,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_expense_rate,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal cntrct_no As Short,  _
                    ByVal prjct_term_s As Date,  _
                    ByVal prjct_term_e As Date,  _
                    ByVal cntrct_amount As Decimal,  _
                    ByVal prjct_category As String,  _
                    ByVal cnsdrtn_date As Date,  _
                    ByVal prjct_summary As String,  _
                    ByVal subcontract_rate As String,  _
                    ByVal remarks As String,  _
                    ByVal department As String,  _
                    ByVal director As String,  _
                    ByVal manager As String,  _
                    ByVal chief As String,  _
                    ByVal expert_1 As String,  _
                    ByVal expert_2 As String,  _
                    ByVal expert_3 As String,  _
                    ByVal staff_1 As String,  _
                    ByVal staff_2 As String,  _
                    ByVal staff_3 As String,  _
                    ByVal staff_4 As String,  _
                    ByVal bdgt_dprtmnt As String,  _
                    ByVal expense_rate As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(cntrct_no,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(prjct_term_s,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(prjct_term_e,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(cntrct_amount,Decimal)
            If (prjct_category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjct_category")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(prjct_category,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(cnsdrtn_date,Date)
            If (prjct_summary Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjct_summary")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(prjct_summary,String)
            End If
            If (subcontract_rate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("subcontract_rate")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(subcontract_rate,String)
            End If
            If (remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(remarks,String)
            End If
            If (department Is Nothing) Then
                Throw New Global.System.ArgumentNullException("department")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(department,String)
            End If
            If (director Is Nothing) Then
                Throw New Global.System.ArgumentNullException("director")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(director,String)
            End If
            If (manager Is Nothing) Then
                Throw New Global.System.ArgumentNullException("manager")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(manager,String)
            End If
            If (chief Is Nothing) Then
                Throw New Global.System.ArgumentNullException("chief")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(chief,String)
            End If
            If (expert_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expert_1")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(expert_1,String)
            End If
            If (expert_2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expert_2")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(expert_2,String)
            End If
            If (expert_3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expert_3")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(expert_3,String)
            End If
            If (staff_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("staff_1")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(staff_1,String)
            End If
            If (staff_2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("staff_2")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(staff_2,String)
            End If
            If (staff_3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("staff_3")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(staff_3,String)
            End If
            If (staff_4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("staff_4")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(staff_4,String)
            End If
            If (bdgt_dprtmnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bdgt_dprtmnt")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(bdgt_dprtmnt,String)
            End If
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(expense_rate,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal cntrct_no As Short,  _
                    ByVal prjct_term_s As Date,  _
                    ByVal prjct_term_e As Date,  _
                    ByVal cntrct_amount As Decimal,  _
                    ByVal prjct_category As String,  _
                    ByVal cnsdrtn_date As Date,  _
                    ByVal prjct_summary As String,  _
                    ByVal subcontract_rate As String,  _
                    ByVal remarks As String,  _
                    ByVal department As String,  _
                    ByVal director As String,  _
                    ByVal manager As String,  _
                    ByVal chief As String,  _
                    ByVal expert_1 As String,  _
                    ByVal expert_2 As String,  _
                    ByVal expert_3 As String,  _
                    ByVal staff_1 As String,  _
                    ByVal staff_2 As String,  _
                    ByVal staff_3 As String,  _
                    ByVal staff_4 As String,  _
                    ByVal bdgt_dprtmnt As String,  _
                    ByVal expense_rate As Decimal,  _
                    ByVal Original_cntrct_no As Short,  _
                    ByVal Original_prjct_term_s As Date,  _
                    ByVal Original_prjct_term_e As Date,  _
                    ByVal Original_cntrct_amount As Decimal,  _
                    ByVal Original_prjct_category As String,  _
                    ByVal Original_cnsdrtn_date As Date,  _
                    ByVal Original_prjct_summary As String,  _
                    ByVal Original_subcontract_rate As String,  _
                    ByVal Original_remarks As String,  _
                    ByVal Original_department As String,  _
                    ByVal Original_director As String,  _
                    ByVal Original_manager As String,  _
                    ByVal Original_chief As String,  _
                    ByVal Original_expert_1 As String,  _
                    ByVal Original_expert_2 As String,  _
                    ByVal Original_expert_3 As String,  _
                    ByVal Original_staff_1 As String,  _
                    ByVal Original_staff_2 As String,  _
                    ByVal Original_staff_3 As String,  _
                    ByVal Original_staff_4 As String,  _
                    ByVal Original_bdgt_dprtmnt As String,  _
                    ByVal Original_expense_rate As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(cntrct_no,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(prjct_term_s,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(prjct_term_e,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(cntrct_amount,Decimal)
            If (prjct_category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjct_category")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(prjct_category,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(cnsdrtn_date,Date)
            If (prjct_summary Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjct_summary")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(prjct_summary,String)
            End If
            If (subcontract_rate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("subcontract_rate")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(subcontract_rate,String)
            End If
            If (remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(remarks,String)
            End If
            If (department Is Nothing) Then
                Throw New Global.System.ArgumentNullException("department")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(department,String)
            End If
            If (director Is Nothing) Then
                Throw New Global.System.ArgumentNullException("director")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(director,String)
            End If
            If (manager Is Nothing) Then
                Throw New Global.System.ArgumentNullException("manager")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(manager,String)
            End If
            If (chief Is Nothing) Then
                Throw New Global.System.ArgumentNullException("chief")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(chief,String)
            End If
            If (expert_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expert_1")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(expert_1,String)
            End If
            If (expert_2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expert_2")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(expert_2,String)
            End If
            If (expert_3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expert_3")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(expert_3,String)
            End If
            If (staff_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("staff_1")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(staff_1,String)
            End If
            If (staff_2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("staff_2")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(staff_2,String)
            End If
            If (staff_3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("staff_3")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(staff_3,String)
            End If
            If (staff_4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("staff_4")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(staff_4,String)
            End If
            If (bdgt_dprtmnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bdgt_dprtmnt")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(bdgt_dprtmnt,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(expense_rate,Decimal)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_cntrct_no,Short)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_prjct_term_s,Date)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_prjct_term_e,Date)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_cntrct_amount,Decimal)
            If (Original_prjct_category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjct_category")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_prjct_category,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_cnsdrtn_date,Date)
            If (Original_prjct_summary Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjct_summary")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_prjct_summary,String)
            End If
            If (Original_subcontract_rate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_subcontract_rate")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_subcontract_rate,String)
            End If
            If (Original_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_remarks,String)
            End If
            If (Original_department Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_department")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_department,String)
            End If
            If (Original_director Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_director")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_director,String)
            End If
            If (Original_manager Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_manager")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_manager,String)
            End If
            If (Original_chief Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_chief")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_chief,String)
            End If
            If (Original_expert_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expert_1")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_expert_1,String)
            End If
            If (Original_expert_2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expert_2")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_expert_2,String)
            End If
            If (Original_expert_3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expert_3")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_expert_3,String)
            End If
            If (Original_staff_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_staff_1")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_staff_1,String)
            End If
            If (Original_staff_2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_staff_2")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_staff_2,String)
            End If
            If (Original_staff_3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_staff_3")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_staff_3,String)
            End If
            If (Original_staff_4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_staff_4")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_staff_4,String)
            End If
            If (Original_bdgt_dprtmnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bdgt_dprtmnt")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_bdgt_dprtmnt,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_expense_rate,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal prjct_term_s As Date,  _
                    ByVal prjct_term_e As Date,  _
                    ByVal cntrct_amount As Decimal,  _
                    ByVal prjct_category As String,  _
                    ByVal cnsdrtn_date As Date,  _
                    ByVal prjct_summary As String,  _
                    ByVal subcontract_rate As String,  _
                    ByVal remarks As String,  _
                    ByVal department As String,  _
                    ByVal director As String,  _
                    ByVal manager As String,  _
                    ByVal chief As String,  _
                    ByVal expert_1 As String,  _
                    ByVal expert_2 As String,  _
                    ByVal expert_3 As String,  _
                    ByVal staff_1 As String,  _
                    ByVal staff_2 As String,  _
                    ByVal staff_3 As String,  _
                    ByVal staff_4 As String,  _
                    ByVal bdgt_dprtmnt As String,  _
                    ByVal expense_rate As Decimal,  _
                    ByVal Original_cntrct_no As Short,  _
                    ByVal Original_prjct_term_s As Date,  _
                    ByVal Original_prjct_term_e As Date,  _
                    ByVal Original_cntrct_amount As Decimal,  _
                    ByVal Original_prjct_category As String,  _
                    ByVal Original_cnsdrtn_date As Date,  _
                    ByVal Original_prjct_summary As String,  _
                    ByVal Original_subcontract_rate As String,  _
                    ByVal Original_remarks As String,  _
                    ByVal Original_department As String,  _
                    ByVal Original_director As String,  _
                    ByVal Original_manager As String,  _
                    ByVal Original_chief As String,  _
                    ByVal Original_expert_1 As String,  _
                    ByVal Original_expert_2 As String,  _
                    ByVal Original_expert_3 As String,  _
                    ByVal Original_staff_1 As String,  _
                    ByVal Original_staff_2 As String,  _
                    ByVal Original_staff_3 As String,  _
                    ByVal Original_staff_4 As String,  _
                    ByVal Original_bdgt_dprtmnt As String,  _
                    ByVal Original_expense_rate As Decimal) As Integer
            Return Me.Update(Original_cntrct_no, prjct_term_s, prjct_term_e, cntrct_amount, prjct_category, cnsdrtn_date, prjct_summary, subcontract_rate, remarks, department, director, manager, chief, expert_1, expert_2, expert_3, staff_1, staff_2, staff_3, staff_4, bdgt_dprtmnt, expense_rate, Original_cntrct_no, Original_prjct_term_s, Original_prjct_term_e, Original_cntrct_amount, Original_prjct_category, Original_cnsdrtn_date, Original_prjct_summary, Original_subcontract_rate, Original_remarks, Original_department, Original_director, Original_manager, Original_chief, Original_expert_1, Original_expert_2, Original_expert_3, Original_staff_1, Original_staff_2, Original_staff_3, Original_staff_4, Original_bdgt_dprtmnt, Original_expense_rate)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class closigdateTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "closigdate"
            tableMapping.ColumnMappings.Add("closigdate", "closigdate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[closigdate] WHERE (([closigdate] = @Original_closigdate))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_closigdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closigdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[closigdate] ([closigdate]) VALUES (@closigdate);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT closi"& _ 
                "gdate FROM closigdate WHERE (closigdate = @closigdate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@closigdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closigdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[closigdate] SET [closigdate] = @closigdate WHERE (([closigdate] = @"& _ 
                "Original_closigdate));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT closigdate FROM closigdate WHERE (closigdate = @c"& _ 
                "losigdate)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@closigdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closigdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_closigdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closigdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT closigdate FROM dbo.closigdate"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.closigdateDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.closigdateDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.closigdateDataTable = New 現場データDataSet.closigdateDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.closigdateDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "closigdate")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_closigdate As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_closigdate,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal closigdate As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(closigdate,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal closigdate As Date, ByVal Original_closigdate As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(closigdate,Date)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_closigdate,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_closigdate As Date) As Integer
            Return Me.Update(Original_closigdate, Original_closigdate)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class cost_breakdownsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "cost_breakdowns"
            tableMapping.ColumnMappings.Add("cst_bd_id", "cst_bd_id")
            tableMapping.ColumnMappings.Add("stcst_id", "stcst_id")
            tableMapping.ColumnMappings.Add("cst_bd_no", "cst_bd_no")
            tableMapping.ColumnMappings.Add("cst_bd_name", "cst_bd_name")
            tableMapping.ColumnMappings.Add("cst_bd_spec", "cst_bd_spec")
            tableMapping.ColumnMappings.Add("cst_bd_unit", "cst_bd_unit")
            tableMapping.ColumnMappings.Add("cst_bd_quanity", "cst_bd_quanity")
            tableMapping.ColumnMappings.Add("cst_bd_costea", "cst_bd_costea")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[cost_breakdowns] WHERE (([cst_bd_id] = @Original_cst_bd_id) AN"& _ 
                "D ([stcst_id] = @Original_stcst_id) AND ([cst_bd_no] = @Original_cst_bd_no) AND "& _ 
                "([cst_bd_name] = @Original_cst_bd_name) AND ([cst_bd_spec] = @Original_cst_bd_sp"& _ 
                "ec) AND ([cst_bd_unit] = @Original_cst_bd_unit) AND ([cst_bd_quanity] = @Origina"& _ 
                "l_cst_bd_quanity) AND ([cst_bd_costea] = @Original_cst_bd_costea))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cst_bd_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stcst_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cst_bd_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cst_bd_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cst_bd_spec", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_spec", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cst_bd_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_unit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cst_bd_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "cst_bd_quanity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cst_bd_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_costea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[cost_breakdowns] ([stcst_id], [cst_bd_no], [cst_bd_name], [cst"& _ 
                "_bd_spec], [cst_bd_unit], [cst_bd_quanity], [cst_bd_costea]) VALUES (@stcst_id, "& _ 
                "@cst_bd_no, @cst_bd_name, @cst_bd_spec, @cst_bd_unit, @cst_bd_quanity, @cst_bd_c"& _ 
                "ostea);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cst_bd_id, stcst_id, cst_bd_no, cst_bd_name, cst_bd_spec, cst_bd"& _ 
                "_unit, cst_bd_quanity, cst_bd_costea FROM cost_breakdowns WHERE (cst_bd_id = SCO"& _ 
                "PE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stcst_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cst_bd_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cst_bd_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cst_bd_spec", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_spec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cst_bd_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_unit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cst_bd_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "cst_bd_quanity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cst_bd_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_costea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[cost_breakdowns] SET [stcst_id] = @stcst_id, [cst_bd_no] = @cst_bd_"& _ 
                "no, [cst_bd_name] = @cst_bd_name, [cst_bd_spec] = @cst_bd_spec, [cst_bd_unit] = "& _ 
                "@cst_bd_unit, [cst_bd_quanity] = @cst_bd_quanity, [cst_bd_costea] = @cst_bd_cost"& _ 
                "ea WHERE (([cst_bd_id] = @Original_cst_bd_id) AND ([stcst_id] = @Original_stcst_"& _ 
                "id) AND ([cst_bd_no] = @Original_cst_bd_no) AND ([cst_bd_name] = @Original_cst_b"& _ 
                "d_name) AND ([cst_bd_spec] = @Original_cst_bd_spec) AND ([cst_bd_unit] = @Origin"& _ 
                "al_cst_bd_unit) AND ([cst_bd_quanity] = @Original_cst_bd_quanity) AND ([cst_bd_c"& _ 
                "ostea] = @Original_cst_bd_costea));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cst_bd_id, stcst_id, cst_bd_no, cst_"& _ 
                "bd_name, cst_bd_spec, cst_bd_unit, cst_bd_quanity, cst_bd_costea FROM cost_break"& _ 
                "downs WHERE (cst_bd_id = @cst_bd_id)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stcst_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cst_bd_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cst_bd_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cst_bd_spec", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_spec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cst_bd_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_unit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cst_bd_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "cst_bd_quanity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cst_bd_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_costea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cst_bd_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stcst_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cst_bd_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cst_bd_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cst_bd_spec", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_spec", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cst_bd_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_unit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cst_bd_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "cst_bd_quanity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cst_bd_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_costea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cst_bd_id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "cst_bd_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT cst_bd_id, stcst_id, cst_bd_no, cst_bd_name, cst_bd_spec, cst_bd_unit, cst"& _ 
                "_bd_quanity, cst_bd_costea FROM dbo.cost_breakdowns"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.cost_breakdownsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.cost_breakdownsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.cost_breakdownsDataTable = New 現場データDataSet.cost_breakdownsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.cost_breakdownsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "cost_breakdowns")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_cst_bd_id As Integer, ByVal Original_stcst_id As Integer, ByVal Original_cst_bd_no As Short, ByVal Original_cst_bd_name As String, ByVal Original_cst_bd_spec As Decimal, ByVal Original_cst_bd_unit As String, ByVal Original_cst_bd_quanity As Decimal, ByVal Original_cst_bd_costea As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_cst_bd_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_stcst_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_cst_bd_no,Short)
            If (Original_cst_bd_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cst_bd_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_cst_bd_name,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_cst_bd_spec,Decimal)
            If (Original_cst_bd_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cst_bd_unit")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_cst_bd_unit,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_cst_bd_quanity,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_cst_bd_costea,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal stcst_id As Integer, ByVal cst_bd_no As Short, ByVal cst_bd_name As String, ByVal cst_bd_spec As Decimal, ByVal cst_bd_unit As String, ByVal cst_bd_quanity As Decimal, ByVal cst_bd_costea As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(stcst_id,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(cst_bd_no,Short)
            If (cst_bd_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cst_bd_name")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(cst_bd_name,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(cst_bd_spec,Decimal)
            If (cst_bd_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cst_bd_unit")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(cst_bd_unit,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(cst_bd_quanity,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(cst_bd_costea,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal stcst_id As Integer,  _
                    ByVal cst_bd_no As Short,  _
                    ByVal cst_bd_name As String,  _
                    ByVal cst_bd_spec As Decimal,  _
                    ByVal cst_bd_unit As String,  _
                    ByVal cst_bd_quanity As Decimal,  _
                    ByVal cst_bd_costea As Decimal,  _
                    ByVal Original_cst_bd_id As Integer,  _
                    ByVal Original_stcst_id As Integer,  _
                    ByVal Original_cst_bd_no As Short,  _
                    ByVal Original_cst_bd_name As String,  _
                    ByVal Original_cst_bd_spec As Decimal,  _
                    ByVal Original_cst_bd_unit As String,  _
                    ByVal Original_cst_bd_quanity As Decimal,  _
                    ByVal Original_cst_bd_costea As Decimal,  _
                    ByVal cst_bd_id As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(stcst_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(cst_bd_no,Short)
            If (cst_bd_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cst_bd_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(cst_bd_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(cst_bd_spec,Decimal)
            If (cst_bd_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cst_bd_unit")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(cst_bd_unit,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(cst_bd_quanity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(cst_bd_costea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_cst_bd_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_stcst_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_cst_bd_no,Short)
            If (Original_cst_bd_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cst_bd_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_cst_bd_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_cst_bd_spec,Decimal)
            If (Original_cst_bd_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cst_bd_unit")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_cst_bd_unit,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_cst_bd_quanity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_cst_bd_costea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(cst_bd_id,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal stcst_id As Integer, ByVal cst_bd_no As Short, ByVal cst_bd_name As String, ByVal cst_bd_spec As Decimal, ByVal cst_bd_unit As String, ByVal cst_bd_quanity As Decimal, ByVal cst_bd_costea As Decimal, ByVal Original_cst_bd_id As Integer, ByVal Original_stcst_id As Integer, ByVal Original_cst_bd_no As Short, ByVal Original_cst_bd_name As String, ByVal Original_cst_bd_spec As Decimal, ByVal Original_cst_bd_unit As String, ByVal Original_cst_bd_quanity As Decimal, ByVal Original_cst_bd_costea As Decimal) As Integer
            Return Me.Update(stcst_id, cst_bd_no, cst_bd_name, cst_bd_spec, cst_bd_unit, cst_bd_quanity, cst_bd_costea, Original_cst_bd_id, Original_stcst_id, Original_cst_bd_no, Original_cst_bd_name, Original_cst_bd_spec, Original_cst_bd_unit, Original_cst_bd_quanity, Original_cst_bd_costea, Original_cst_bd_id)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class cost_classesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "cost_classes"
            tableMapping.ColumnMappings.Add("cstclss_code", "cstclss_code")
            tableMapping.ColumnMappings.Add("cstclss_name", "cstclss_name")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[cost_classes] WHERE (([cstclss_code] = @Original_cstclss_code)"& _ 
                " AND ([cstclss_name] = @Original_cstclss_name))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstclss_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[cost_classes] ([cstclss_code], [cstclss_name]) VALUES (@cstcls"& _ 
                "s_code, @cstclss_name);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cstclss_code, cstclss_name FROM cost_classes WHE"& _ 
                "RE (cstclss_code = @cstclss_code)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstclss_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[cost_classes] SET [cstclss_code] = @cstclss_code, [cstclss_name] = "& _ 
                "@cstclss_name WHERE (([cstclss_code] = @Original_cstclss_code) AND ([cstclss_nam"& _ 
                "e] = @Original_cstclss_name));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cstclss_code, cstclss_name FROM cost_clas"& _ 
                "ses WHERE (cstclss_code = @cstclss_code)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstclss_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstclss_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT cstclss_code, cstclss_name FROM dbo.cost_classes"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.cost_classesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.cost_classesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.cost_classesDataTable = New 現場データDataSet.cost_classesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.cost_classesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "cost_classes")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_cstclss_code As Short, ByVal Original_cstclss_name As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_cstclss_code,Short)
            If (Original_cstclss_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cstclss_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_cstclss_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal cstclss_code As Short, ByVal cstclss_name As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(cstclss_code,Short)
            If (cstclss_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cstclss_name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(cstclss_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal cstclss_code As Short, ByVal cstclss_name As String, ByVal Original_cstclss_code As Short, ByVal Original_cstclss_name As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(cstclss_code,Short)
            If (cstclss_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cstclss_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(cstclss_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_cstclss_code,Short)
            If (Original_cstclss_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cstclss_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_cstclss_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal cstclss_name As String, ByVal Original_cstclss_code As Short, ByVal Original_cstclss_name As String) As Integer
            Return Me.Update(Original_cstclss_code, cstclss_name, Original_cstclss_code, Original_cstclss_name)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class cost_mastersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "cost_masters"
            tableMapping.ColumnMappings.Add("cstmstr_id", "cstmstr_id")
            tableMapping.ColumnMappings.Add("cstclss_code", "cstclss_code")
            tableMapping.ColumnMappings.Add("cstmstr_category", "cstmstr_category")
            tableMapping.ColumnMappings.Add("cstmstr_code", "cstmstr_code")
            tableMapping.ColumnMappings.Add("cstmstr_name", "cstmstr_name")
            tableMapping.ColumnMappings.Add("cstmstr_spec", "cstmstr_spec")
            tableMapping.ColumnMappings.Add("cstmstr_unit", "cstmstr_unit")
            tableMapping.ColumnMappings.Add("cstmstr_costea", "cstmstr_costea")
            tableMapping.ColumnMappings.Add("changecode", "changecode")
            tableMapping.ColumnMappings.Add("cstmstr_seq", "cstmstr_seq")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[cost_masters] WHERE (([cstmstr_id] = @Original_cstmstr_id) AND"& _ 
                " ([cstclss_code] = @Original_cstclss_code) AND ([cstmstr_category] = @Original_c"& _ 
                "stmstr_category) AND ([cstmstr_code] = @Original_cstmstr_code) AND ([cstmstr_nam"& _ 
                "e] = @Original_cstmstr_name) AND ([cstmstr_spec] = @Original_cstmstr_spec) AND ("& _ 
                "[cstmstr_unit] = @Original_cstmstr_unit) AND ([cstmstr_costea] = @Original_cstms"& _ 
                "tr_costea) AND ([changecode] = @Original_changecode) AND ([cstmstr_seq] = @Origi"& _ 
                "nal_cstmstr_seq))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_category", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_category", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_spec", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_unit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_costea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_changecode", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "changecode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_seq", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_seq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[cost_masters] ([cstclss_code], [cstmstr_category], [cstmstr_co"& _ 
                "de], [cstmstr_name], [cstmstr_spec], [cstmstr_unit], [cstmstr_costea], [changeco"& _ 
                "de], [cstmstr_seq]) VALUES (@cstclss_code, @cstmstr_category, @cstmstr_code, @cs"& _ 
                "tmstr_name, @cstmstr_spec, @cstmstr_unit, @cstmstr_costea, @changecode, @cstmstr"& _ 
                "_seq);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cstmstr_id, cstclss_code, cstmstr_category, cstmstr_code, cstmstr"& _ 
                "_name, cstmstr_spec, cstmstr_unit, cstmstr_costea, changecode, cstmstr_seq FROM "& _ 
                "cost_masters WHERE (cstmstr_id = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_category", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_category", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_spec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_unit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_costea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@changecode", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "changecode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_seq", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_seq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[cost_masters] SET [cstclss_code] = @cstclss_code, [cstmstr_category"& _ 
                "] = @cstmstr_category, [cstmstr_code] = @cstmstr_code, [cstmstr_name] = @cstmstr"& _ 
                "_name, [cstmstr_spec] = @cstmstr_spec, [cstmstr_unit] = @cstmstr_unit, [cstmstr_"& _ 
                "costea] = @cstmstr_costea, [changecode] = @changecode, [cstmstr_seq] = @cstmstr_"& _ 
                "seq WHERE (([cstmstr_id] = @Original_cstmstr_id) AND ([cstclss_code] = @Original"& _ 
                "_cstclss_code) AND ([cstmstr_category] = @Original_cstmstr_category) AND ([cstms"& _ 
                "tr_code] = @Original_cstmstr_code) AND ([cstmstr_name] = @Original_cstmstr_name)"& _ 
                " AND ([cstmstr_spec] = @Original_cstmstr_spec) AND ([cstmstr_unit] = @Original_c"& _ 
                "stmstr_unit) AND ([cstmstr_costea] = @Original_cstmstr_costea) AND ([changecode]"& _ 
                " = @Original_changecode) AND ([cstmstr_seq] = @Original_cstmstr_seq));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT c"& _ 
                "stmstr_id, cstclss_code, cstmstr_category, cstmstr_code, cstmstr_name, cstmstr_s"& _ 
                "pec, cstmstr_unit, cstmstr_costea, changecode, cstmstr_seq FROM cost_masters WHE"& _ 
                "RE (cstmstr_id = @cstmstr_id)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_category", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_category", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_spec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_unit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_costea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@changecode", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "changecode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_seq", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_seq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_category", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_category", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_spec", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_unit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_costea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_changecode", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "changecode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_seq", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_seq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT cstmstr_id, cstclss_code, cstmstr_category, cstmstr_code, cstmstr_name, cs"& _ 
                "tmstr_spec, cstmstr_unit, cstmstr_costea, changecode, cstmstr_seq FROM dbo.cost_"& _ 
                "masters"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.cost_mastersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.cost_mastersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.cost_mastersDataTable = New 現場データDataSet.cost_mastersDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.cost_mastersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "cost_masters")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_cstmstr_id As Integer, ByVal Original_cstclss_code As Short, ByVal Original_cstmstr_category As String, ByVal Original_cstmstr_code As Short, ByVal Original_cstmstr_name As String, ByVal Original_cstmstr_spec As String, ByVal Original_cstmstr_unit As String, ByVal Original_cstmstr_costea As Decimal, ByVal Original_changecode As Short, ByVal Original_cstmstr_seq As Short) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_cstmstr_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_cstclss_code,Short)
            If (Original_cstmstr_category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cstmstr_category")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_cstmstr_category,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_cstmstr_code,Short)
            If (Original_cstmstr_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cstmstr_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_cstmstr_name,String)
            End If
            If (Original_cstmstr_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cstmstr_spec")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_cstmstr_spec,String)
            End If
            If (Original_cstmstr_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cstmstr_unit")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_cstmstr_unit,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_cstmstr_costea,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_changecode,Short)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_cstmstr_seq,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal cstclss_code As Short, ByVal cstmstr_category As String, ByVal cstmstr_code As Short, ByVal cstmstr_name As String, ByVal cstmstr_spec As String, ByVal cstmstr_unit As String, ByVal cstmstr_costea As Decimal, ByVal changecode As Short, ByVal cstmstr_seq As Short) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(cstclss_code,Short)
            If (cstmstr_category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cstmstr_category")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(cstmstr_category,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(cstmstr_code,Short)
            If (cstmstr_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cstmstr_name")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(cstmstr_name,String)
            End If
            If (cstmstr_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cstmstr_spec")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(cstmstr_spec,String)
            End If
            If (cstmstr_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cstmstr_unit")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(cstmstr_unit,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(cstmstr_costea,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(changecode,Short)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(cstmstr_seq,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal cstclss_code As Short,  _
                    ByVal cstmstr_category As String,  _
                    ByVal cstmstr_code As Short,  _
                    ByVal cstmstr_name As String,  _
                    ByVal cstmstr_spec As String,  _
                    ByVal cstmstr_unit As String,  _
                    ByVal cstmstr_costea As Decimal,  _
                    ByVal changecode As Short,  _
                    ByVal cstmstr_seq As Short,  _
                    ByVal Original_cstmstr_id As Integer,  _
                    ByVal Original_cstclss_code As Short,  _
                    ByVal Original_cstmstr_category As String,  _
                    ByVal Original_cstmstr_code As Short,  _
                    ByVal Original_cstmstr_name As String,  _
                    ByVal Original_cstmstr_spec As String,  _
                    ByVal Original_cstmstr_unit As String,  _
                    ByVal Original_cstmstr_costea As Decimal,  _
                    ByVal Original_changecode As Short,  _
                    ByVal Original_cstmstr_seq As Short,  _
                    ByVal cstmstr_id As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(cstclss_code,Short)
            If (cstmstr_category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cstmstr_category")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(cstmstr_category,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(cstmstr_code,Short)
            If (cstmstr_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cstmstr_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(cstmstr_name,String)
            End If
            If (cstmstr_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cstmstr_spec")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(cstmstr_spec,String)
            End If
            If (cstmstr_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cstmstr_unit")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(cstmstr_unit,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(cstmstr_costea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(changecode,Short)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(cstmstr_seq,Short)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_cstmstr_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_cstclss_code,Short)
            If (Original_cstmstr_category Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cstmstr_category")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_cstmstr_category,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_cstmstr_code,Short)
            If (Original_cstmstr_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cstmstr_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_cstmstr_name,String)
            End If
            If (Original_cstmstr_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cstmstr_spec")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_cstmstr_spec,String)
            End If
            If (Original_cstmstr_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cstmstr_unit")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_cstmstr_unit,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_cstmstr_costea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_changecode,Short)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_cstmstr_seq,Short)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(cstmstr_id,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal cstclss_code As Short,  _
                    ByVal cstmstr_category As String,  _
                    ByVal cstmstr_code As Short,  _
                    ByVal cstmstr_name As String,  _
                    ByVal cstmstr_spec As String,  _
                    ByVal cstmstr_unit As String,  _
                    ByVal cstmstr_costea As Decimal,  _
                    ByVal changecode As Short,  _
                    ByVal cstmstr_seq As Short,  _
                    ByVal Original_cstmstr_id As Integer,  _
                    ByVal Original_cstclss_code As Short,  _
                    ByVal Original_cstmstr_category As String,  _
                    ByVal Original_cstmstr_code As Short,  _
                    ByVal Original_cstmstr_name As String,  _
                    ByVal Original_cstmstr_spec As String,  _
                    ByVal Original_cstmstr_unit As String,  _
                    ByVal Original_cstmstr_costea As Decimal,  _
                    ByVal Original_changecode As Short,  _
                    ByVal Original_cstmstr_seq As Short) As Integer
            Return Me.Update(cstclss_code, cstmstr_category, cstmstr_code, cstmstr_name, cstmstr_spec, cstmstr_unit, cstmstr_costea, changecode, cstmstr_seq, Original_cstmstr_id, Original_cstclss_code, Original_cstmstr_category, Original_cstmstr_code, Original_cstmstr_name, Original_cstmstr_spec, Original_cstmstr_unit, Original_cstmstr_costea, Original_changecode, Original_cstmstr_seq, Original_cstmstr_id)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class detailsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "details"
            tableMapping.ColumnMappings.Add("dtl_id", "dtl_id")
            tableMapping.ColumnMappings.Add("cntrct_no", "cntrct_no")
            tableMapping.ColumnMappings.Add("dtl_no", "dtl_no")
            tableMapping.ColumnMappings.Add("s_worktype_code", "s_worktype_code")
            tableMapping.ColumnMappings.Add("cstclss_code", "cstclss_code")
            tableMapping.ColumnMappings.Add("cstmstr_id", "cstmstr_id")
            tableMapping.ColumnMappings.Add("dtl_name", "dtl_name")
            tableMapping.ColumnMappings.Add("dtl_spec", "dtl_spec")
            tableMapping.ColumnMappings.Add("dtl_unit", "dtl_unit")
            tableMapping.ColumnMappings.Add("dtl_quanity", "dtl_quanity")
            tableMapping.ColumnMappings.Add("dtl_costea", "dtl_costea")
            tableMapping.ColumnMappings.Add("dtl_labor", "dtl_labor")
            tableMapping.ColumnMappings.Add("dtl_material", "dtl_material")
            tableMapping.ColumnMappings.Add("dtl_machine", "dtl_machine")
            tableMapping.ColumnMappings.Add("outsrcr_code", "outsrcr_code")
            tableMapping.ColumnMappings.Add("dtl_subcntrct", "dtl_subcntrct")
            tableMapping.ColumnMappings.Add("dtl_expens", "dtl_expens")
            tableMapping.ColumnMappings.Add("dtl_fraction", "dtl_fraction")
            tableMapping.ColumnMappings.Add("dtl_remarks", "dtl_remarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[details] WHERE (([dtl_id] = @Original_dtl_id) AND ([cntrct_no]"& _ 
                " = @Original_cntrct_no) AND ([dtl_no] = @Original_dtl_no) AND ([s_worktype_code]"& _ 
                " = @Original_s_worktype_code) AND ([cstclss_code] = @Original_cstclss_code) AND "& _ 
                "([cstmstr_id] = @Original_cstmstr_id) AND ([dtl_name] = @Original_dtl_name) AND "& _ 
                "([dtl_spec] = @Original_dtl_spec) AND ([dtl_unit] = @Original_dtl_unit) AND ([dt"& _ 
                "l_quanity] = @Original_dtl_quanity) AND ([dtl_costea] = @Original_dtl_costea) AN"& _ 
                "D ([dtl_labor] = @Original_dtl_labor) AND ([dtl_material] = @Original_dtl_materi"& _ 
                "al) AND ([dtl_machine] = @Original_dtl_machine) AND ([outsrcr_code] = @Original_"& _ 
                "outsrcr_code) AND ([dtl_subcntrct] = @Original_dtl_subcntrct) AND ([dtl_expens] "& _ 
                "= @Original_dtl_expens) AND ([dtl_fraction] = @Original_dtl_fraction) AND ([dtl_"& _ 
                "remarks] = @Original_dtl_remarks))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_s_worktype_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_worktype_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_spec", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_unit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "dtl_quanity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_costea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_labor", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_labor", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_material", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_material", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_machine", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_machine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_outsrcr_code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_subcntrct", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_subcntrct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_expens", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_expens", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_fraction", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_fraction", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[details] ([cntrct_no], [dtl_no], [s_worktype_code], [cstclss_c"& _ 
                "ode], [cstmstr_id], [dtl_name], [dtl_spec], [dtl_unit], [dtl_quanity], [dtl_cost"& _ 
                "ea], [dtl_labor], [dtl_material], [dtl_machine], [outsrcr_code], [dtl_subcntrct]"& _ 
                ", [dtl_expens], [dtl_fraction], [dtl_remarks]) VALUES (@cntrct_no, @dtl_no, @s_w"& _ 
                "orktype_code, @cstclss_code, @cstmstr_id, @dtl_name, @dtl_spec, @dtl_unit, @dtl_"& _ 
                "quanity, @dtl_costea, @dtl_labor, @dtl_material, @dtl_machine, @outsrcr_code, @d"& _ 
                "tl_subcntrct, @dtl_expens, @dtl_fraction, @dtl_remarks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT dtl_id, cntrct_"& _ 
                "no, dtl_no, s_worktype_code, cstclss_code, cstmstr_id, dtl_name, dtl_spec, dtl_u"& _ 
                "nit, dtl_quanity, dtl_costea, dtl_labor, dtl_material, dtl_machine, outsrcr_code"& _ 
                ", dtl_subcntrct, dtl_expens, dtl_fraction, dtl_remarks FROM details WHERE (dtl_i"& _ 
                "d = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_worktype_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_worktype_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_spec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_unit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "dtl_quanity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_costea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_labor", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_labor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_material", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_material", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_machine", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_machine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@outsrcr_code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_subcntrct", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_subcntrct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_expens", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_expens", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_fraction", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_fraction", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[details] SET [cntrct_no] = @cntrct_no, [dtl_no] = @dtl_no, [s_workt"& _ 
                "ype_code] = @s_worktype_code, [cstclss_code] = @cstclss_code, [cstmstr_id] = @cs"& _ 
                "tmstr_id, [dtl_name] = @dtl_name, [dtl_spec] = @dtl_spec, [dtl_unit] = @dtl_unit"& _ 
                ", [dtl_quanity] = @dtl_quanity, [dtl_costea] = @dtl_costea, [dtl_labor] = @dtl_l"& _ 
                "abor, [dtl_material] = @dtl_material, [dtl_machine] = @dtl_machine, [outsrcr_cod"& _ 
                "e] = @outsrcr_code, [dtl_subcntrct] = @dtl_subcntrct, [dtl_expens] = @dtl_expens"& _ 
                ", [dtl_fraction] = @dtl_fraction, [dtl_remarks] = @dtl_remarks WHERE (([dtl_id] "& _ 
                "= @Original_dtl_id) AND ([cntrct_no] = @Original_cntrct_no) AND ([dtl_no] = @Ori"& _ 
                "ginal_dtl_no) AND ([s_worktype_code] = @Original_s_worktype_code) AND ([cstclss_"& _ 
                "code] = @Original_cstclss_code) AND ([cstmstr_id] = @Original_cstmstr_id) AND (["& _ 
                "dtl_name] = @Original_dtl_name) AND ([dtl_spec] = @Original_dtl_spec) AND ([dtl_"& _ 
                "unit] = @Original_dtl_unit) AND ([dtl_quanity] = @Original_dtl_quanity) AND ([dt"& _ 
                "l_costea] = @Original_dtl_costea) AND ([dtl_labor] = @Original_dtl_labor) AND (["& _ 
                "dtl_material] = @Original_dtl_material) AND ([dtl_machine] = @Original_dtl_machi"& _ 
                "ne) AND ([outsrcr_code] = @Original_outsrcr_code) AND ([dtl_subcntrct] = @Origin"& _ 
                "al_dtl_subcntrct) AND ([dtl_expens] = @Original_dtl_expens) AND ([dtl_fraction] "& _ 
                "= @Original_dtl_fraction) AND ([dtl_remarks] = @Original_dtl_remarks));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "dtl_id, cntrct_no, dtl_no, s_worktype_code, cstclss_code, cstmstr_id, dtl_name, "& _ 
                "dtl_spec, dtl_unit, dtl_quanity, dtl_costea, dtl_labor, dtl_material, dtl_machin"& _ 
                "e, outsrcr_code, dtl_subcntrct, dtl_expens, dtl_fraction, dtl_remarks FROM detai"& _ 
                "ls WHERE (dtl_id = @dtl_id)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_worktype_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_worktype_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_spec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_unit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "dtl_quanity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_costea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_labor", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_labor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_material", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_material", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_machine", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_machine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@outsrcr_code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_subcntrct", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_subcntrct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_expens", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_expens", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_fraction", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_fraction", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_s_worktype_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_worktype_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_spec", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_unit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "dtl_quanity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_costea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_labor", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_labor", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_material", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_material", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_machine", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_machine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_outsrcr_code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_subcntrct", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_subcntrct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_expens", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_expens", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_fraction", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_fraction", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dtl_remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtl_id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "dtl_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT dtl_id, cntrct_no, dtl_no, s_worktype_code, cstclss_code, cstmstr_id, dtl_"& _ 
                "name, dtl_spec, dtl_unit, dtl_quanity, dtl_costea, dtl_labor, dtl_material, dtl_"& _ 
                "machine, outsrcr_code, dtl_subcntrct, dtl_expens, dtl_fraction, dtl_remarks FROM"& _ 
                " dbo.details"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.detailsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.detailsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.detailsDataTable = New 現場データDataSet.detailsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.detailsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "details")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_dtl_id As Integer,  _
                    ByVal Original_cntrct_no As Short,  _
                    ByVal Original_dtl_no As Short,  _
                    ByVal Original_s_worktype_code As Short,  _
                    ByVal Original_cstclss_code As Short,  _
                    ByVal Original_cstmstr_id As Integer,  _
                    ByVal Original_dtl_name As String,  _
                    ByVal Original_dtl_spec As String,  _
                    ByVal Original_dtl_unit As String,  _
                    ByVal Original_dtl_quanity As Decimal,  _
                    ByVal Original_dtl_costea As Decimal,  _
                    ByVal Original_dtl_labor As Decimal,  _
                    ByVal Original_dtl_material As Decimal,  _
                    ByVal Original_dtl_machine As Decimal,  _
                    ByVal Original_outsrcr_code As Integer,  _
                    ByVal Original_dtl_subcntrct As Decimal,  _
                    ByVal Original_dtl_expens As Decimal,  _
                    ByVal Original_dtl_fraction As Decimal,  _
                    ByVal Original_dtl_remarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_dtl_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_cntrct_no,Short)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_dtl_no,Short)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_s_worktype_code,Short)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_cstclss_code,Short)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_cstmstr_id,Integer)
            If (Original_dtl_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dtl_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_dtl_name,String)
            End If
            If (Original_dtl_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dtl_spec")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_dtl_spec,String)
            End If
            If (Original_dtl_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dtl_unit")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_dtl_unit,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_dtl_quanity,Decimal)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_dtl_costea,Decimal)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_dtl_labor,Decimal)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_dtl_material,Decimal)
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_dtl_machine,Decimal)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_outsrcr_code,Integer)
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_dtl_subcntrct,Decimal)
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_dtl_expens,Decimal)
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_dtl_fraction,Decimal)
            If (Original_dtl_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dtl_remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_dtl_remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal cntrct_no As Short,  _
                    ByVal dtl_no As Short,  _
                    ByVal s_worktype_code As Short,  _
                    ByVal cstclss_code As Short,  _
                    ByVal cstmstr_id As Integer,  _
                    ByVal dtl_name As String,  _
                    ByVal dtl_spec As String,  _
                    ByVal dtl_unit As String,  _
                    ByVal dtl_quanity As Decimal,  _
                    ByVal dtl_costea As Decimal,  _
                    ByVal dtl_labor As Decimal,  _
                    ByVal dtl_material As Decimal,  _
                    ByVal dtl_machine As Decimal,  _
                    ByVal outsrcr_code As Integer,  _
                    ByVal dtl_subcntrct As Decimal,  _
                    ByVal dtl_expens As Decimal,  _
                    ByVal dtl_fraction As Decimal,  _
                    ByVal dtl_remarks As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(cntrct_no,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(dtl_no,Short)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(s_worktype_code,Short)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(cstclss_code,Short)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(cstmstr_id,Integer)
            If (dtl_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dtl_name")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(dtl_name,String)
            End If
            If (dtl_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dtl_spec")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(dtl_spec,String)
            End If
            If (dtl_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dtl_unit")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(dtl_unit,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(dtl_quanity,Decimal)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(dtl_costea,Decimal)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(dtl_labor,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(dtl_material,Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(dtl_machine,Decimal)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(outsrcr_code,Integer)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(dtl_subcntrct,Decimal)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(dtl_expens,Decimal)
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(dtl_fraction,Decimal)
            If (dtl_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dtl_remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(dtl_remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal cntrct_no As Short,  _
                    ByVal dtl_no As Short,  _
                    ByVal s_worktype_code As Short,  _
                    ByVal cstclss_code As Short,  _
                    ByVal cstmstr_id As Integer,  _
                    ByVal dtl_name As String,  _
                    ByVal dtl_spec As String,  _
                    ByVal dtl_unit As String,  _
                    ByVal dtl_quanity As Decimal,  _
                    ByVal dtl_costea As Decimal,  _
                    ByVal dtl_labor As Decimal,  _
                    ByVal dtl_material As Decimal,  _
                    ByVal dtl_machine As Decimal,  _
                    ByVal outsrcr_code As Integer,  _
                    ByVal dtl_subcntrct As Decimal,  _
                    ByVal dtl_expens As Decimal,  _
                    ByVal dtl_fraction As Decimal,  _
                    ByVal dtl_remarks As String,  _
                    ByVal Original_dtl_id As Integer,  _
                    ByVal Original_cntrct_no As Short,  _
                    ByVal Original_dtl_no As Short,  _
                    ByVal Original_s_worktype_code As Short,  _
                    ByVal Original_cstclss_code As Short,  _
                    ByVal Original_cstmstr_id As Integer,  _
                    ByVal Original_dtl_name As String,  _
                    ByVal Original_dtl_spec As String,  _
                    ByVal Original_dtl_unit As String,  _
                    ByVal Original_dtl_quanity As Decimal,  _
                    ByVal Original_dtl_costea As Decimal,  _
                    ByVal Original_dtl_labor As Decimal,  _
                    ByVal Original_dtl_material As Decimal,  _
                    ByVal Original_dtl_machine As Decimal,  _
                    ByVal Original_outsrcr_code As Integer,  _
                    ByVal Original_dtl_subcntrct As Decimal,  _
                    ByVal Original_dtl_expens As Decimal,  _
                    ByVal Original_dtl_fraction As Decimal,  _
                    ByVal Original_dtl_remarks As String,  _
                    ByVal dtl_id As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(cntrct_no,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(dtl_no,Short)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(s_worktype_code,Short)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(cstclss_code,Short)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(cstmstr_id,Integer)
            If (dtl_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dtl_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(dtl_name,String)
            End If
            If (dtl_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dtl_spec")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(dtl_spec,String)
            End If
            If (dtl_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dtl_unit")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(dtl_unit,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(dtl_quanity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(dtl_costea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(dtl_labor,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(dtl_material,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(dtl_machine,Decimal)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(outsrcr_code,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(dtl_subcntrct,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(dtl_expens,Decimal)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(dtl_fraction,Decimal)
            If (dtl_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dtl_remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(dtl_remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_dtl_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_cntrct_no,Short)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_dtl_no,Short)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_s_worktype_code,Short)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_cstclss_code,Short)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_cstmstr_id,Integer)
            If (Original_dtl_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dtl_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_dtl_name,String)
            End If
            If (Original_dtl_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dtl_spec")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_dtl_spec,String)
            End If
            If (Original_dtl_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dtl_unit")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_dtl_unit,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_dtl_quanity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_dtl_costea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_dtl_labor,Decimal)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_dtl_material,Decimal)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_dtl_machine,Decimal)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_outsrcr_code,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_dtl_subcntrct,Decimal)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_dtl_expens,Decimal)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_dtl_fraction,Decimal)
            If (Original_dtl_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dtl_remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_dtl_remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(dtl_id,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal cntrct_no As Short,  _
                    ByVal dtl_no As Short,  _
                    ByVal s_worktype_code As Short,  _
                    ByVal cstclss_code As Short,  _
                    ByVal cstmstr_id As Integer,  _
                    ByVal dtl_name As String,  _
                    ByVal dtl_spec As String,  _
                    ByVal dtl_unit As String,  _
                    ByVal dtl_quanity As Decimal,  _
                    ByVal dtl_costea As Decimal,  _
                    ByVal dtl_labor As Decimal,  _
                    ByVal dtl_material As Decimal,  _
                    ByVal dtl_machine As Decimal,  _
                    ByVal outsrcr_code As Integer,  _
                    ByVal dtl_subcntrct As Decimal,  _
                    ByVal dtl_expens As Decimal,  _
                    ByVal dtl_fraction As Decimal,  _
                    ByVal dtl_remarks As String,  _
                    ByVal Original_dtl_id As Integer,  _
                    ByVal Original_cntrct_no As Short,  _
                    ByVal Original_dtl_no As Short,  _
                    ByVal Original_s_worktype_code As Short,  _
                    ByVal Original_cstclss_code As Short,  _
                    ByVal Original_cstmstr_id As Integer,  _
                    ByVal Original_dtl_name As String,  _
                    ByVal Original_dtl_spec As String,  _
                    ByVal Original_dtl_unit As String,  _
                    ByVal Original_dtl_quanity As Decimal,  _
                    ByVal Original_dtl_costea As Decimal,  _
                    ByVal Original_dtl_labor As Decimal,  _
                    ByVal Original_dtl_material As Decimal,  _
                    ByVal Original_dtl_machine As Decimal,  _
                    ByVal Original_outsrcr_code As Integer,  _
                    ByVal Original_dtl_subcntrct As Decimal,  _
                    ByVal Original_dtl_expens As Decimal,  _
                    ByVal Original_dtl_fraction As Decimal,  _
                    ByVal Original_dtl_remarks As String) As Integer
            Return Me.Update(cntrct_no, dtl_no, s_worktype_code, cstclss_code, cstmstr_id, dtl_name, dtl_spec, dtl_unit, dtl_quanity, dtl_costea, dtl_labor, dtl_material, dtl_machine, outsrcr_code, dtl_subcntrct, dtl_expens, dtl_fraction, dtl_remarks, Original_dtl_id, Original_cntrct_no, Original_dtl_no, Original_s_worktype_code, Original_cstclss_code, Original_cstmstr_id, Original_dtl_name, Original_dtl_spec, Original_dtl_unit, Original_dtl_quanity, Original_dtl_costea, Original_dtl_labor, Original_dtl_material, Original_dtl_machine, Original_outsrcr_code, Original_dtl_subcntrct, Original_dtl_expens, Original_dtl_fraction, Original_dtl_remarks, Original_dtl_id)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class estimatesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "estimates"
            tableMapping.ColumnMappings.Add("estmt_code", "estmt_code")
            tableMapping.ColumnMappings.Add("estmt_date", "estmt_date")
            tableMapping.ColumnMappings.Add("estmt_prjct_name", "estmt_prjct_name")
            tableMapping.ColumnMappings.Add("estmt_amount", "estmt_amount")
            tableMapping.ColumnMappings.Add("estmt_taxin", "estmt_taxin")
            tableMapping.ColumnMappings.Add("estmt_tax", "estmt_tax")
            tableMapping.ColumnMappings.Add("estmt_taxrate", "estmt_taxrate")
            tableMapping.ColumnMappings.Add("prjct_address", "prjct_address")
            tableMapping.ColumnMappings.Add("deliveryplace", "deliveryplace")
            tableMapping.ColumnMappings.Add("paymentterms", "paymentterms")
            tableMapping.ColumnMappings.Add("expirationdate", "expirationdate")
            tableMapping.ColumnMappings.Add("destination", "destination")
            tableMapping.ColumnMappings.Add("pblshr_address", "pblshr_address")
            tableMapping.ColumnMappings.Add("pblshr_cmpnyname", "pblshr_cmpnyname")
            tableMapping.ColumnMappings.Add("pblshr_prsdnt", "pblshr_prsdnt")
            tableMapping.ColumnMappings.Add("pblshr_tel", "pblshr_tel")
            tableMapping.ColumnMappings.Add("pblshr_fax", "pblshr_fax")
            tableMapping.ColumnMappings.Add("conditions", "conditions")
            tableMapping.ColumnMappings.Add("cndtns_dtls", "cndtns_dtls")
            tableMapping.ColumnMappings.Add("discount", "discount")
            tableMapping.ColumnMappings.Add("bdrate", "bdrate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[estimates] WHERE (([estmt_code] = @Original_estmt_code) AND (["& _ 
                "estmt_date] = @Original_estmt_date) AND ([estmt_prjct_name] = @Original_estmt_pr"& _ 
                "jct_name) AND ([estmt_amount] = @Original_estmt_amount) AND ([estmt_taxin] = @Or"& _ 
                "iginal_estmt_taxin) AND ([estmt_tax] = @Original_estmt_tax) AND ([estmt_taxrate]"& _ 
                " = @Original_estmt_taxrate) AND ([prjct_address] = @Original_prjct_address) AND "& _ 
                "([deliveryplace] = @Original_deliveryplace) AND ([paymentterms] = @Original_paym"& _ 
                "entterms) AND ([expirationdate] = @Original_expirationdate) AND ([destination] ="& _ 
                " @Original_destination) AND ([pblshr_address] = @Original_pblshr_address) AND (["& _ 
                "pblshr_cmpnyname] = @Original_pblshr_cmpnyname) AND ([pblshr_prsdnt] = @Original"& _ 
                "_pblshr_prsdnt) AND ([pblshr_tel] = @Original_pblshr_tel) AND ([pblshr_fax] = @O"& _ 
                "riginal_pblshr_fax) AND ([conditions] = @Original_conditions) AND ([cndtns_dtls]"& _ 
                " = @Original_cndtns_dtls) AND ([discount] = @Original_discount) AND ([bdrate] = "& _ 
                "@Original_bdrate))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_estmt_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_estmt_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_estmt_prjct_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_prjct_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_estmt_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_estmt_taxin", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_taxin", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_estmt_tax", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_tax", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_estmt_taxrate", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_taxrate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjct_address", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_address", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_deliveryplace", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "deliveryplace", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_paymentterms", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "paymentterms", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expirationdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expirationdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_destination", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "destination", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pblshr_address", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_address", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pblshr_cmpnyname", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_cmpnyname", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pblshr_prsdnt", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_prsdnt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pblshr_tel", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_tel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pblshr_fax", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_fax", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_conditions", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "conditions", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cndtns_dtls", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cndtns_dtls", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_discount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "discount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bdrate", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bdrate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[estimates] ([estmt_code], [estmt_date], [estmt_prjct_name], [e"& _ 
                "stmt_amount], [estmt_taxin], [estmt_tax], [estmt_taxrate], [prjct_address], [del"& _ 
                "iveryplace], [paymentterms], [expirationdate], [destination], [pblshr_address], "& _ 
                "[pblshr_cmpnyname], [pblshr_prsdnt], [pblshr_tel], [pblshr_fax], [conditions], ["& _ 
                "cndtns_dtls], [discount], [bdrate]) VALUES (@estmt_code, @estmt_date, @estmt_prj"& _ 
                "ct_name, @estmt_amount, @estmt_taxin, @estmt_tax, @estmt_taxrate, @prjct_address"& _ 
                ", @deliveryplace, @paymentterms, @expirationdate, @destination, @pblshr_address,"& _ 
                " @pblshr_cmpnyname, @pblshr_prsdnt, @pblshr_tel, @pblshr_fax, @conditions, @cndt"& _ 
                "ns_dtls, @discount, @bdrate);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT estmt_code, estmt_date, estmt_prjct_name, "& _ 
                "estmt_amount, estmt_taxin, estmt_tax, estmt_taxrate, prjct_address, deliveryplac"& _ 
                "e, paymentterms, expirationdate, destination, pblshr_address, pblshr_cmpnyname, "& _ 
                "pblshr_prsdnt, pblshr_tel, pblshr_fax, conditions, cndtns_dtls, discount, bdrate"& _ 
                " FROM estimates WHERE (estmt_code = @estmt_code)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estmt_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estmt_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estmt_prjct_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_prjct_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estmt_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estmt_taxin", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_taxin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estmt_tax", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_tax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estmt_taxrate", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_taxrate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjct_address", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_address", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@deliveryplace", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "deliveryplace", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@paymentterms", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "paymentterms", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expirationdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expirationdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@destination", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "destination", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pblshr_address", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_address", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pblshr_cmpnyname", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_cmpnyname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pblshr_prsdnt", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_prsdnt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pblshr_tel", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_tel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pblshr_fax", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@conditions", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "conditions", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cndtns_dtls", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cndtns_dtls", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@discount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "discount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bdrate", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bdrate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[estimates] SET [estmt_code] = @estmt_code, [estmt_date] = @estmt_da"& _ 
                "te, [estmt_prjct_name] = @estmt_prjct_name, [estmt_amount] = @estmt_amount, [est"& _ 
                "mt_taxin] = @estmt_taxin, [estmt_tax] = @estmt_tax, [estmt_taxrate] = @estmt_tax"& _ 
                "rate, [prjct_address] = @prjct_address, [deliveryplace] = @deliveryplace, [payme"& _ 
                "ntterms] = @paymentterms, [expirationdate] = @expirationdate, [destination] = @d"& _ 
                "estination, [pblshr_address] = @pblshr_address, [pblshr_cmpnyname] = @pblshr_cmp"& _ 
                "nyname, [pblshr_prsdnt] = @pblshr_prsdnt, [pblshr_tel] = @pblshr_tel, [pblshr_fa"& _ 
                "x] = @pblshr_fax, [conditions] = @conditions, [cndtns_dtls] = @cndtns_dtls, [dis"& _ 
                "count] = @discount, [bdrate] = @bdrate WHERE (([estmt_code] = @Original_estmt_co"& _ 
                "de) AND ([estmt_date] = @Original_estmt_date) AND ([estmt_prjct_name] = @Origina"& _ 
                "l_estmt_prjct_name) AND ([estmt_amount] = @Original_estmt_amount) AND ([estmt_ta"& _ 
                "xin] = @Original_estmt_taxin) AND ([estmt_tax] = @Original_estmt_tax) AND ([estm"& _ 
                "t_taxrate] = @Original_estmt_taxrate) AND ([prjct_address] = @Original_prjct_add"& _ 
                "ress) AND ([deliveryplace] = @Original_deliveryplace) AND ([paymentterms] = @Ori"& _ 
                "ginal_paymentterms) AND ([expirationdate] = @Original_expirationdate) AND ([dest"& _ 
                "ination] = @Original_destination) AND ([pblshr_address] = @Original_pblshr_addre"& _ 
                "ss) AND ([pblshr_cmpnyname] = @Original_pblshr_cmpnyname) AND ([pblshr_prsdnt] ="& _ 
                " @Original_pblshr_prsdnt) AND ([pblshr_tel] = @Original_pblshr_tel) AND ([pblshr"& _ 
                "_fax] = @Original_pblshr_fax) AND ([conditions] = @Original_conditions) AND ([cn"& _ 
                "dtns_dtls] = @Original_cndtns_dtls) AND ([discount] = @Original_discount) AND (["& _ 
                "bdrate] = @Original_bdrate));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT estmt_code, estmt_date, estmt_prjct_name, "& _ 
                "estmt_amount, estmt_taxin, estmt_tax, estmt_taxrate, prjct_address, deliveryplac"& _ 
                "e, paymentterms, expirationdate, destination, pblshr_address, pblshr_cmpnyname, "& _ 
                "pblshr_prsdnt, pblshr_tel, pblshr_fax, conditions, cndtns_dtls, discount, bdrate"& _ 
                " FROM estimates WHERE (estmt_code = @estmt_code)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estmt_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estmt_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estmt_prjct_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_prjct_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estmt_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estmt_taxin", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_taxin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estmt_tax", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_tax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estmt_taxrate", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_taxrate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjct_address", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_address", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@deliveryplace", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "deliveryplace", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@paymentterms", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "paymentterms", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expirationdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expirationdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@destination", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "destination", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pblshr_address", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_address", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pblshr_cmpnyname", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_cmpnyname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pblshr_prsdnt", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_prsdnt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pblshr_tel", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_tel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pblshr_fax", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@conditions", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "conditions", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cndtns_dtls", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cndtns_dtls", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@discount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "discount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bdrate", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bdrate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_estmt_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_estmt_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_estmt_prjct_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_prjct_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_estmt_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_estmt_taxin", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_taxin", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_estmt_tax", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_tax", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_estmt_taxrate", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estmt_taxrate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjct_address", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_address", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_deliveryplace", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "deliveryplace", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_paymentterms", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "paymentterms", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expirationdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expirationdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_destination", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "destination", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pblshr_address", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_address", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pblshr_cmpnyname", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_cmpnyname", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pblshr_prsdnt", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_prsdnt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pblshr_tel", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_tel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pblshr_fax", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pblshr_fax", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_conditions", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "conditions", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cndtns_dtls", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cndtns_dtls", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_discount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "discount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bdrate", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bdrate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT estmt_code, estmt_date, estmt_prjct_name, estmt_amount, estmt_taxin, estmt"& _ 
                "_tax, estmt_taxrate, prjct_address, deliveryplace, paymentterms, expirationdate,"& _ 
                " destination, pblshr_address, pblshr_cmpnyname, pblshr_prsdnt, pblshr_tel, pblsh"& _ 
                "r_fax, conditions, cndtns_dtls, discount, bdrate FROM dbo.estimates"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.estimatesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.estimatesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.estimatesDataTable = New 現場データDataSet.estimatesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.estimatesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "estimates")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_estmt_code As Short,  _
                    ByVal Original_estmt_date As Date,  _
                    ByVal Original_estmt_prjct_name As String,  _
                    ByVal Original_estmt_amount As Decimal,  _
                    ByVal Original_estmt_taxin As Decimal,  _
                    ByVal Original_estmt_tax As Decimal,  _
                    ByVal Original_estmt_taxrate As Short,  _
                    ByVal Original_prjct_address As String,  _
                    ByVal Original_deliveryplace As String,  _
                    ByVal Original_paymentterms As String,  _
                    ByVal Original_expirationdate As Date,  _
                    ByVal Original_destination As String,  _
                    ByVal Original_pblshr_address As String,  _
                    ByVal Original_pblshr_cmpnyname As String,  _
                    ByVal Original_pblshr_prsdnt As String,  _
                    ByVal Original_pblshr_tel As String,  _
                    ByVal Original_pblshr_fax As String,  _
                    ByVal Original_conditions As String,  _
                    ByVal Original_cndtns_dtls As String,  _
                    ByVal Original_discount As Decimal,  _
                    ByVal Original_bdrate As Short) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_estmt_code,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_estmt_date,Date)
            If (Original_estmt_prjct_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_estmt_prjct_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_estmt_prjct_name,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_estmt_amount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_estmt_taxin,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_estmt_tax,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_estmt_taxrate,Short)
            If (Original_prjct_address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjct_address")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_prjct_address,String)
            End If
            If (Original_deliveryplace Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_deliveryplace")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_deliveryplace,String)
            End If
            If (Original_paymentterms Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_paymentterms")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_paymentterms,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_expirationdate,Date)
            If (Original_destination Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_destination")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_destination,String)
            End If
            If (Original_pblshr_address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pblshr_address")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_pblshr_address,String)
            End If
            If (Original_pblshr_cmpnyname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pblshr_cmpnyname")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_pblshr_cmpnyname,String)
            End If
            If (Original_pblshr_prsdnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pblshr_prsdnt")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_pblshr_prsdnt,String)
            End If
            If (Original_pblshr_tel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pblshr_tel")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_pblshr_tel,String)
            End If
            If (Original_pblshr_fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pblshr_fax")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_pblshr_fax,String)
            End If
            If (Original_conditions Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_conditions")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_conditions,String)
            End If
            If (Original_cndtns_dtls Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cndtns_dtls")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_cndtns_dtls,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_discount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_bdrate,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal estmt_code As Short,  _
                    ByVal estmt_date As Date,  _
                    ByVal estmt_prjct_name As String,  _
                    ByVal estmt_amount As Decimal,  _
                    ByVal estmt_taxin As Decimal,  _
                    ByVal estmt_tax As Decimal,  _
                    ByVal estmt_taxrate As Short,  _
                    ByVal prjct_address As String,  _
                    ByVal deliveryplace As String,  _
                    ByVal paymentterms As String,  _
                    ByVal expirationdate As Date,  _
                    ByVal destination As String,  _
                    ByVal pblshr_address As String,  _
                    ByVal pblshr_cmpnyname As String,  _
                    ByVal pblshr_prsdnt As String,  _
                    ByVal pblshr_tel As String,  _
                    ByVal pblshr_fax As String,  _
                    ByVal conditions As String,  _
                    ByVal cndtns_dtls As String,  _
                    ByVal discount As Decimal,  _
                    ByVal bdrate As Short) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(estmt_code,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(estmt_date,Date)
            If (estmt_prjct_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("estmt_prjct_name")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(estmt_prjct_name,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(estmt_amount,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(estmt_taxin,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(estmt_tax,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(estmt_taxrate,Short)
            If (prjct_address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjct_address")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(prjct_address,String)
            End If
            If (deliveryplace Is Nothing) Then
                Throw New Global.System.ArgumentNullException("deliveryplace")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(deliveryplace,String)
            End If
            If (paymentterms Is Nothing) Then
                Throw New Global.System.ArgumentNullException("paymentterms")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(paymentterms,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(expirationdate,Date)
            If (destination Is Nothing) Then
                Throw New Global.System.ArgumentNullException("destination")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(destination,String)
            End If
            If (pblshr_address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pblshr_address")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(pblshr_address,String)
            End If
            If (pblshr_cmpnyname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pblshr_cmpnyname")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(pblshr_cmpnyname,String)
            End If
            If (pblshr_prsdnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pblshr_prsdnt")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(pblshr_prsdnt,String)
            End If
            If (pblshr_tel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pblshr_tel")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(pblshr_tel,String)
            End If
            If (pblshr_fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pblshr_fax")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(pblshr_fax,String)
            End If
            If (conditions Is Nothing) Then
                Throw New Global.System.ArgumentNullException("conditions")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(conditions,String)
            End If
            If (cndtns_dtls Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cndtns_dtls")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(cndtns_dtls,String)
            End If
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(discount,Decimal)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(bdrate,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal estmt_code As Short,  _
                    ByVal estmt_date As Date,  _
                    ByVal estmt_prjct_name As String,  _
                    ByVal estmt_amount As Decimal,  _
                    ByVal estmt_taxin As Decimal,  _
                    ByVal estmt_tax As Decimal,  _
                    ByVal estmt_taxrate As Short,  _
                    ByVal prjct_address As String,  _
                    ByVal deliveryplace As String,  _
                    ByVal paymentterms As String,  _
                    ByVal expirationdate As Date,  _
                    ByVal destination As String,  _
                    ByVal pblshr_address As String,  _
                    ByVal pblshr_cmpnyname As String,  _
                    ByVal pblshr_prsdnt As String,  _
                    ByVal pblshr_tel As String,  _
                    ByVal pblshr_fax As String,  _
                    ByVal conditions As String,  _
                    ByVal cndtns_dtls As String,  _
                    ByVal discount As Decimal,  _
                    ByVal bdrate As Short,  _
                    ByVal Original_estmt_code As Short,  _
                    ByVal Original_estmt_date As Date,  _
                    ByVal Original_estmt_prjct_name As String,  _
                    ByVal Original_estmt_amount As Decimal,  _
                    ByVal Original_estmt_taxin As Decimal,  _
                    ByVal Original_estmt_tax As Decimal,  _
                    ByVal Original_estmt_taxrate As Short,  _
                    ByVal Original_prjct_address As String,  _
                    ByVal Original_deliveryplace As String,  _
                    ByVal Original_paymentterms As String,  _
                    ByVal Original_expirationdate As Date,  _
                    ByVal Original_destination As String,  _
                    ByVal Original_pblshr_address As String,  _
                    ByVal Original_pblshr_cmpnyname As String,  _
                    ByVal Original_pblshr_prsdnt As String,  _
                    ByVal Original_pblshr_tel As String,  _
                    ByVal Original_pblshr_fax As String,  _
                    ByVal Original_conditions As String,  _
                    ByVal Original_cndtns_dtls As String,  _
                    ByVal Original_discount As Decimal,  _
                    ByVal Original_bdrate As Short) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(estmt_code,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(estmt_date,Date)
            If (estmt_prjct_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("estmt_prjct_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(estmt_prjct_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(estmt_amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(estmt_taxin,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(estmt_tax,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(estmt_taxrate,Short)
            If (prjct_address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjct_address")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(prjct_address,String)
            End If
            If (deliveryplace Is Nothing) Then
                Throw New Global.System.ArgumentNullException("deliveryplace")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(deliveryplace,String)
            End If
            If (paymentterms Is Nothing) Then
                Throw New Global.System.ArgumentNullException("paymentterms")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(paymentterms,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(expirationdate,Date)
            If (destination Is Nothing) Then
                Throw New Global.System.ArgumentNullException("destination")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(destination,String)
            End If
            If (pblshr_address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pblshr_address")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(pblshr_address,String)
            End If
            If (pblshr_cmpnyname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pblshr_cmpnyname")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(pblshr_cmpnyname,String)
            End If
            If (pblshr_prsdnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pblshr_prsdnt")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(pblshr_prsdnt,String)
            End If
            If (pblshr_tel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pblshr_tel")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(pblshr_tel,String)
            End If
            If (pblshr_fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pblshr_fax")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(pblshr_fax,String)
            End If
            If (conditions Is Nothing) Then
                Throw New Global.System.ArgumentNullException("conditions")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(conditions,String)
            End If
            If (cndtns_dtls Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cndtns_dtls")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(cndtns_dtls,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(discount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(bdrate,Short)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_estmt_code,Short)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_estmt_date,Date)
            If (Original_estmt_prjct_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_estmt_prjct_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_estmt_prjct_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_estmt_amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_estmt_taxin,Decimal)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_estmt_tax,Decimal)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_estmt_taxrate,Short)
            If (Original_prjct_address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjct_address")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_prjct_address,String)
            End If
            If (Original_deliveryplace Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_deliveryplace")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_deliveryplace,String)
            End If
            If (Original_paymentterms Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_paymentterms")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_paymentterms,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_expirationdate,Date)
            If (Original_destination Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_destination")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_destination,String)
            End If
            If (Original_pblshr_address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pblshr_address")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_pblshr_address,String)
            End If
            If (Original_pblshr_cmpnyname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pblshr_cmpnyname")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_pblshr_cmpnyname,String)
            End If
            If (Original_pblshr_prsdnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pblshr_prsdnt")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_pblshr_prsdnt,String)
            End If
            If (Original_pblshr_tel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pblshr_tel")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_pblshr_tel,String)
            End If
            If (Original_pblshr_fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pblshr_fax")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_pblshr_fax,String)
            End If
            If (Original_conditions Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_conditions")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_conditions,String)
            End If
            If (Original_cndtns_dtls Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cndtns_dtls")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_cndtns_dtls,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_discount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_bdrate,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal estmt_date As Date,  _
                    ByVal estmt_prjct_name As String,  _
                    ByVal estmt_amount As Decimal,  _
                    ByVal estmt_taxin As Decimal,  _
                    ByVal estmt_tax As Decimal,  _
                    ByVal estmt_taxrate As Short,  _
                    ByVal prjct_address As String,  _
                    ByVal deliveryplace As String,  _
                    ByVal paymentterms As String,  _
                    ByVal expirationdate As Date,  _
                    ByVal destination As String,  _
                    ByVal pblshr_address As String,  _
                    ByVal pblshr_cmpnyname As String,  _
                    ByVal pblshr_prsdnt As String,  _
                    ByVal pblshr_tel As String,  _
                    ByVal pblshr_fax As String,  _
                    ByVal conditions As String,  _
                    ByVal cndtns_dtls As String,  _
                    ByVal discount As Decimal,  _
                    ByVal bdrate As Short,  _
                    ByVal Original_estmt_code As Short,  _
                    ByVal Original_estmt_date As Date,  _
                    ByVal Original_estmt_prjct_name As String,  _
                    ByVal Original_estmt_amount As Decimal,  _
                    ByVal Original_estmt_taxin As Decimal,  _
                    ByVal Original_estmt_tax As Decimal,  _
                    ByVal Original_estmt_taxrate As Short,  _
                    ByVal Original_prjct_address As String,  _
                    ByVal Original_deliveryplace As String,  _
                    ByVal Original_paymentterms As String,  _
                    ByVal Original_expirationdate As Date,  _
                    ByVal Original_destination As String,  _
                    ByVal Original_pblshr_address As String,  _
                    ByVal Original_pblshr_cmpnyname As String,  _
                    ByVal Original_pblshr_prsdnt As String,  _
                    ByVal Original_pblshr_tel As String,  _
                    ByVal Original_pblshr_fax As String,  _
                    ByVal Original_conditions As String,  _
                    ByVal Original_cndtns_dtls As String,  _
                    ByVal Original_discount As Decimal,  _
                    ByVal Original_bdrate As Short) As Integer
            Return Me.Update(Original_estmt_code, estmt_date, estmt_prjct_name, estmt_amount, estmt_taxin, estmt_tax, estmt_taxrate, prjct_address, deliveryplace, paymentterms, expirationdate, destination, pblshr_address, pblshr_cmpnyname, pblshr_prsdnt, pblshr_tel, pblshr_fax, conditions, cndtns_dtls, discount, bdrate, Original_estmt_code, Original_estmt_date, Original_estmt_prjct_name, Original_estmt_amount, Original_estmt_taxin, Original_estmt_tax, Original_estmt_taxrate, Original_prjct_address, Original_deliveryplace, Original_paymentterms, Original_expirationdate, Original_destination, Original_pblshr_address, Original_pblshr_cmpnyname, Original_pblshr_prsdnt, Original_pblshr_tel, Original_pblshr_fax, Original_conditions, Original_cndtns_dtls, Original_discount, Original_bdrate)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class expense_breakdownsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "expense_breakdowns"
            tableMapping.ColumnMappings.Add("expns_bd_id", "expns_bd_id")
            tableMapping.ColumnMappings.Add("stexpns_id", "stexpns_id")
            tableMapping.ColumnMappings.Add("expns_bd_no", "expns_bd_no")
            tableMapping.ColumnMappings.Add("expns_bd_name", "expns_bd_name")
            tableMapping.ColumnMappings.Add("expns_bd_spec", "expns_bd_spec")
            tableMapping.ColumnMappings.Add("expns_bd_unit", "expns_bd_unit")
            tableMapping.ColumnMappings.Add("expns_bd_quanity", "expns_bd_quanity")
            tableMapping.ColumnMappings.Add("expns_bd_costea", "expns_bd_costea")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[expense_breakdowns] WHERE (([expns_bd_id] = @Original_expns_bd"& _ 
                "_id) AND ([stexpns_id] = @Original_stexpns_id) AND ([expns_bd_no] = @Original_ex"& _ 
                "pns_bd_no) AND ([expns_bd_name] = @Original_expns_bd_name) AND ([expns_bd_spec] "& _ 
                "= @Original_expns_bd_spec) AND ([expns_bd_unit] = @Original_expns_bd_unit) AND ("& _ 
                "[expns_bd_quanity] = @Original_expns_bd_quanity) AND ([expns_bd_costea] = @Origi"& _ 
                "nal_expns_bd_costea))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expns_bd_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stexpns_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expns_bd_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expns_bd_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expns_bd_spec", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_spec", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expns_bd_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_unit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expns_bd_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "expns_bd_quanity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expns_bd_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_costea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[expense_breakdowns] ([stexpns_id], [expns_bd_no], [expns_bd_na"& _ 
                "me], [expns_bd_spec], [expns_bd_unit], [expns_bd_quanity], [expns_bd_costea]) VA"& _ 
                "LUES (@stexpns_id, @expns_bd_no, @expns_bd_name, @expns_bd_spec, @expns_bd_unit,"& _ 
                " @expns_bd_quanity, @expns_bd_costea);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT expns_bd_id, stexpns_id, expns_bd"& _ 
                "_no, expns_bd_name, expns_bd_spec, expns_bd_unit, expns_bd_quanity, expns_bd_cos"& _ 
                "tea FROM expense_breakdowns WHERE (expns_bd_id = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stexpns_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expns_bd_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expns_bd_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expns_bd_spec", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_spec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expns_bd_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_unit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expns_bd_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "expns_bd_quanity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expns_bd_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_costea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[expense_breakdowns] SET [stexpns_id] = @stexpns_id, [expns_bd_no] ="& _ 
                " @expns_bd_no, [expns_bd_name] = @expns_bd_name, [expns_bd_spec] = @expns_bd_spe"& _ 
                "c, [expns_bd_unit] = @expns_bd_unit, [expns_bd_quanity] = @expns_bd_quanity, [ex"& _ 
                "pns_bd_costea] = @expns_bd_costea WHERE (([expns_bd_id] = @Original_expns_bd_id)"& _ 
                " AND ([stexpns_id] = @Original_stexpns_id) AND ([expns_bd_no] = @Original_expns_"& _ 
                "bd_no) AND ([expns_bd_name] = @Original_expns_bd_name) AND ([expns_bd_spec] = @O"& _ 
                "riginal_expns_bd_spec) AND ([expns_bd_unit] = @Original_expns_bd_unit) AND ([exp"& _ 
                "ns_bd_quanity] = @Original_expns_bd_quanity) AND ([expns_bd_costea] = @Original_"& _ 
                "expns_bd_costea));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT expns_bd_id, stexpns_id, expns_bd_no, expns_bd_name, "& _ 
                "expns_bd_spec, expns_bd_unit, expns_bd_quanity, expns_bd_costea FROM expense_bre"& _ 
                "akdowns WHERE (expns_bd_id = @expns_bd_id)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stexpns_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expns_bd_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expns_bd_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expns_bd_spec", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_spec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expns_bd_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_unit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expns_bd_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "expns_bd_quanity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expns_bd_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_costea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expns_bd_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stexpns_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expns_bd_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expns_bd_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expns_bd_spec", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_spec", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expns_bd_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_unit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expns_bd_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "expns_bd_quanity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_expns_bd_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_costea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expns_bd_id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "expns_bd_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT expns_bd_id, stexpns_id, expns_bd_no, expns_bd_name, expns_bd_spec, expns_"& _ 
                "bd_unit, expns_bd_quanity, expns_bd_costea FROM dbo.expense_breakdowns"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.expense_breakdownsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.expense_breakdownsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.expense_breakdownsDataTable = New 現場データDataSet.expense_breakdownsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.expense_breakdownsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "expense_breakdowns")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_expns_bd_id As Integer, ByVal Original_stexpns_id As Integer, ByVal Original_expns_bd_no As Short, ByVal Original_expns_bd_name As String, ByVal Original_expns_bd_spec As Decimal, ByVal Original_expns_bd_unit As String, ByVal Original_expns_bd_quanity As Decimal, ByVal Original_expns_bd_costea As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_expns_bd_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_stexpns_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_expns_bd_no,Short)
            If (Original_expns_bd_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expns_bd_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_expns_bd_name,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_expns_bd_spec,Decimal)
            If (Original_expns_bd_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expns_bd_unit")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_expns_bd_unit,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_expns_bd_quanity,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_expns_bd_costea,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal stexpns_id As Integer, ByVal expns_bd_no As Short, ByVal expns_bd_name As String, ByVal expns_bd_spec As Decimal, ByVal expns_bd_unit As String, ByVal expns_bd_quanity As Decimal, ByVal expns_bd_costea As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(stexpns_id,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(expns_bd_no,Short)
            If (expns_bd_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expns_bd_name")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(expns_bd_name,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(expns_bd_spec,Decimal)
            If (expns_bd_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expns_bd_unit")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(expns_bd_unit,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(expns_bd_quanity,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(expns_bd_costea,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal stexpns_id As Integer,  _
                    ByVal expns_bd_no As Short,  _
                    ByVal expns_bd_name As String,  _
                    ByVal expns_bd_spec As Decimal,  _
                    ByVal expns_bd_unit As String,  _
                    ByVal expns_bd_quanity As Decimal,  _
                    ByVal expns_bd_costea As Decimal,  _
                    ByVal Original_expns_bd_id As Integer,  _
                    ByVal Original_stexpns_id As Integer,  _
                    ByVal Original_expns_bd_no As Short,  _
                    ByVal Original_expns_bd_name As String,  _
                    ByVal Original_expns_bd_spec As Decimal,  _
                    ByVal Original_expns_bd_unit As String,  _
                    ByVal Original_expns_bd_quanity As Decimal,  _
                    ByVal Original_expns_bd_costea As Decimal,  _
                    ByVal expns_bd_id As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(stexpns_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(expns_bd_no,Short)
            If (expns_bd_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expns_bd_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(expns_bd_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(expns_bd_spec,Decimal)
            If (expns_bd_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expns_bd_unit")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(expns_bd_unit,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(expns_bd_quanity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(expns_bd_costea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_expns_bd_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_stexpns_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_expns_bd_no,Short)
            If (Original_expns_bd_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expns_bd_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_expns_bd_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_expns_bd_spec,Decimal)
            If (Original_expns_bd_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expns_bd_unit")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_expns_bd_unit,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_expns_bd_quanity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_expns_bd_costea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(expns_bd_id,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal stexpns_id As Integer, ByVal expns_bd_no As Short, ByVal expns_bd_name As String, ByVal expns_bd_spec As Decimal, ByVal expns_bd_unit As String, ByVal expns_bd_quanity As Decimal, ByVal expns_bd_costea As Decimal, ByVal Original_expns_bd_id As Integer, ByVal Original_stexpns_id As Integer, ByVal Original_expns_bd_no As Short, ByVal Original_expns_bd_name As String, ByVal Original_expns_bd_spec As Decimal, ByVal Original_expns_bd_unit As String, ByVal Original_expns_bd_quanity As Decimal, ByVal Original_expns_bd_costea As Decimal) As Integer
            Return Me.Update(stexpns_id, expns_bd_no, expns_bd_name, expns_bd_spec, expns_bd_unit, expns_bd_quanity, expns_bd_costea, Original_expns_bd_id, Original_stexpns_id, Original_expns_bd_no, Original_expns_bd_name, Original_expns_bd_spec, Original_expns_bd_unit, Original_expns_bd_quanity, Original_expns_bd_costea, Original_expns_bd_id)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class outsourcersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "outsourcers"
            tableMapping.ColumnMappings.Add("outsrcr_code", "outsrcr_code")
            tableMapping.ColumnMappings.Add("outsrcr_name", "outsrcr_name")
            tableMapping.ColumnMappings.Add("outsrcr_trm_s", "outsrcr_trm_s")
            tableMapping.ColumnMappings.Add("outsrcr_trm_e", "outsrcr_trm_e")
            tableMapping.ColumnMappings.Add("worktype", "worktype")
            tableMapping.ColumnMappings.Add("ordrfrm", "ordrfrm")
            tableMapping.ColumnMappings.Add("e-cntrct", "e-cntrct")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[outsourcers] WHERE (([outsrcr_code] = @Original_outsrcr_code) "& _ 
                "AND ([outsrcr_name] = @Original_outsrcr_name) AND ([outsrcr_trm_s] = @Original_o"& _ 
                "utsrcr_trm_s) AND ([outsrcr_trm_e] = @Original_outsrcr_trm_e) AND ([worktype] = "& _ 
                "@Original_worktype) AND ([ordrfrm] = @Original_ordrfrm) AND ([e-cntrct] = @p2))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_outsrcr_code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_outsrcr_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_outsrcr_trm_s", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_trm_s", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_outsrcr_trm_e", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_trm_e", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_worktype", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "worktype", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ordrfrm", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ordrfrm", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "e-cntrct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[outsourcers] ([outsrcr_code], [outsrcr_name], [outsrcr_trm_s],"& _ 
                " [outsrcr_trm_e], [worktype], [ordrfrm], [e-cntrct]) VALUES (@outsrcr_code, @out"& _ 
                "srcr_name, @outsrcr_trm_s, @outsrcr_trm_e, @worktype, @ordrfrm, @p1);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ou"& _ 
                "tsrcr_code, outsrcr_name, outsrcr_trm_s, outsrcr_trm_e, worktype, ordrfrm, [e-cn"& _ 
                "trct] FROM outsourcers WHERE (outsrcr_code = @outsrcr_code)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@outsrcr_code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@outsrcr_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@outsrcr_trm_s", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_trm_s", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@outsrcr_trm_e", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_trm_e", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@worktype", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "worktype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ordrfrm", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ordrfrm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "e-cntrct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[outsourcers] SET [outsrcr_code] = @outsrcr_code, [outsrcr_name] = @"& _ 
                "outsrcr_name, [outsrcr_trm_s] = @outsrcr_trm_s, [outsrcr_trm_e] = @outsrcr_trm_e"& _ 
                ", [worktype] = @worktype, [ordrfrm] = @ordrfrm, [e-cntrct] = @p1 WHERE (([outsrc"& _ 
                "r_code] = @Original_outsrcr_code) AND ([outsrcr_name] = @Original_outsrcr_name) "& _ 
                "AND ([outsrcr_trm_s] = @Original_outsrcr_trm_s) AND ([outsrcr_trm_e] = @Original"& _ 
                "_outsrcr_trm_e) AND ([worktype] = @Original_worktype) AND ([ordrfrm] = @Original"& _ 
                "_ordrfrm) AND ([e-cntrct] = @p2));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT outsrcr_code, outsrcr_name, outsrcr_t"& _ 
                "rm_s, outsrcr_trm_e, worktype, ordrfrm, [e-cntrct] FROM outsourcers WHERE (outsr"& _ 
                "cr_code = @outsrcr_code)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@outsrcr_code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@outsrcr_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@outsrcr_trm_s", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_trm_s", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@outsrcr_trm_e", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_trm_e", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@worktype", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "worktype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ordrfrm", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ordrfrm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "e-cntrct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_outsrcr_code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_outsrcr_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_outsrcr_trm_s", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_trm_s", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_outsrcr_trm_e", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_trm_e", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_worktype", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "worktype", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ordrfrm", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ordrfrm", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "e-cntrct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT outsrcr_code, outsrcr_name, outsrcr_trm_s, outsrcr_trm_e, worktype, ordrfr"& _ 
                "m, [e-cntrct] FROM dbo.outsourcers"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.outsourcersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.outsourcersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.outsourcersDataTable = New 現場データDataSet.outsourcersDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.outsourcersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "outsourcers")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_outsrcr_code As Integer, ByVal Original_outsrcr_name As String, ByVal Original_outsrcr_trm_s As Date, ByVal Original_outsrcr_trm_e As Date, ByVal Original_worktype As String, ByVal Original_ordrfrm As Short, ByVal p2 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_outsrcr_code,Integer)
            If (Original_outsrcr_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_outsrcr_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_outsrcr_name,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_outsrcr_trm_s,Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_outsrcr_trm_e,Date)
            If (Original_worktype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_worktype")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_worktype,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ordrfrm,Short)
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p2,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal outsrcr_code As Integer, ByVal outsrcr_name As String, ByVal outsrcr_trm_s As Date, ByVal outsrcr_trm_e As Date, ByVal worktype As String, ByVal ordrfrm As Short, ByVal p1 As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(outsrcr_code,Integer)
            If (outsrcr_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("outsrcr_name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(outsrcr_name,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(outsrcr_trm_s,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(outsrcr_trm_e,Date)
            If (worktype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("worktype")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(worktype,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(ordrfrm,Short)
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p1,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal outsrcr_code As Integer, ByVal outsrcr_name As String, ByVal outsrcr_trm_s As Date, ByVal outsrcr_trm_e As Date, ByVal worktype As String, ByVal ordrfrm As Short, ByVal p1 As String, ByVal Original_outsrcr_code As Integer, ByVal Original_outsrcr_name As String, ByVal Original_outsrcr_trm_s As Date, ByVal Original_outsrcr_trm_e As Date, ByVal Original_worktype As String, ByVal Original_ordrfrm As Short, ByVal p2 As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(outsrcr_code,Integer)
            If (outsrcr_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("outsrcr_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(outsrcr_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(outsrcr_trm_s,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(outsrcr_trm_e,Date)
            If (worktype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("worktype")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(worktype,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ordrfrm,Short)
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p1,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_outsrcr_code,Integer)
            If (Original_outsrcr_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_outsrcr_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_outsrcr_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_outsrcr_trm_s,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_outsrcr_trm_e,Date)
            If (Original_worktype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_worktype")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_worktype,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ordrfrm,Short)
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p2,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal outsrcr_name As String, ByVal outsrcr_trm_s As Date, ByVal outsrcr_trm_e As Date, ByVal worktype As String, ByVal ordrfrm As Short, ByVal p1 As String, ByVal Original_outsrcr_code As Integer, ByVal Original_outsrcr_name As String, ByVal Original_outsrcr_trm_s As Date, ByVal Original_outsrcr_trm_e As Date, ByVal Original_worktype As String, ByVal Original_ordrfrm As Short, ByVal p2 As String) As Integer
            Return Me.Update(Original_outsrcr_code, outsrcr_name, outsrcr_trm_s, outsrcr_trm_e, worktype, ordrfrm, p1, Original_outsrcr_code, Original_outsrcr_name, Original_outsrcr_trm_s, Original_outsrcr_trm_e, Original_worktype, Original_ordrfrm, p2)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class outsourcing_plansTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "outsourcing_plans"
            tableMapping.ColumnMappings.Add("outsrc_no", "outsrc_no")
            tableMapping.ColumnMappings.Add("cstclss_code", "cstclss_code")
            tableMapping.ColumnMappings.Add("cost_id", "cost_id")
            tableMapping.ColumnMappings.Add("outsrcr_code", "outsrcr_code")
            tableMapping.ColumnMappings.Add("outsrcng_quanity", "outsrcng_quanity")
            tableMapping.ColumnMappings.Add("outsrcng_costea", "outsrcng_costea")
            tableMapping.ColumnMappings.Add("created_date", "created_date")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[outsourcing_plans] ([outsrc_no], [cstclss_code], [cost_id], [o"& _ 
                "utsrcr_code], [outsrcng_quanity], [outsrcng_costea], [created_date]) VALUES (@ou"& _ 
                "tsrc_no, @cstclss_code, @cost_id, @outsrcr_code, @outsrcng_quanity, @outsrcng_co"& _ 
                "stea, @created_date)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@outsrc_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrc_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cost_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cost_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@outsrcr_code", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@outsrcng_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "outsrcng_quanity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@outsrcng_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcng_costea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@created_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "created_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT outsrc_no, cstclss_code, cost_id, outsrcr_code, outsrcng_quanity, outsrcng"& _ 
                "_costea, created_date FROM dbo.outsourcing_plans"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.outsourcing_plansDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.outsourcing_plansDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.outsourcing_plansDataTable = New 現場データDataSet.outsourcing_plansDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.outsourcing_plansDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "outsourcing_plans")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal outsrc_no As Short, ByVal cstclss_code As Short, ByVal cost_id As Integer, ByVal outsrcr_code As Integer, ByVal outsrcng_quanity As Decimal, ByVal outsrcng_costea As Decimal, ByVal created_date As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(outsrc_no,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(cstclss_code,Short)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(cost_id,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(outsrcr_code,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(outsrcng_quanity,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(outsrcng_costea,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(created_date,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class outsourcing_reportsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "outsourcing_reports"
            tableMapping.ColumnMappings.Add("prjct_code", "prjct_code")
            tableMapping.ColumnMappings.Add("cntrct_no", "cntrct_no")
            tableMapping.ColumnMappings.Add("created_date", "created_date")
            tableMapping.ColumnMappings.Add("changes", "changes")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[outsourcing_reports] ([prjct_code], [cntrct_no], [created_date"& _ 
                "], [changes]) VALUES (@prjct_code, @cntrct_no, @created_date, @changes)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjct_code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@created_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "created_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@changes", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "changes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT prjct_code, cntrct_no, created_date, changes FROM dbo.outsourcing_reports"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.outsourcing_reportsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.outsourcing_reportsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.outsourcing_reportsDataTable = New 現場データDataSet.outsourcing_reportsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.outsourcing_reportsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "outsourcing_reports")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal prjct_code As String, ByVal cntrct_no As Short, ByVal created_date As Date, ByVal changes As String) As Integer
            If (prjct_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjct_code")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(prjct_code,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(cntrct_no,Short)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(created_date,Date)
            If (changes Is Nothing) Then
                Throw New Global.System.ArgumentNullException("changes")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(changes,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class productionsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "productions"
            tableMapping.ColumnMappings.Add("closing_date", "closing_date")
            tableMapping.ColumnMappings.Add("prjct_code", "prjct_code")
            tableMapping.ColumnMappings.Add("cntrct_no", "cntrct_no")
            tableMapping.ColumnMappings.Add("dtls_id", "dtls_id")
            tableMapping.ColumnMappings.Add("last_costea", "last_costea")
            tableMapping.ColumnMappings.Add("last_quanity", "last_quanity")
            tableMapping.ColumnMappings.Add("last_amount", "last_amount")
            tableMapping.ColumnMappings.Add("total_costea", "total_costea")
            tableMapping.ColumnMappings.Add("total_quanity", "total_quanity")
            tableMapping.ColumnMappings.Add("total_amount", "total_amount")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[productions] ([closing_date], [prjct_code], [cntrct_no], [dtls"& _ 
                "_id], [last_costea], [last_quanity], [last_amount], [total_costea], [total_quani"& _ 
                "ty], [total_amount]) VALUES (@closing_date, @prjct_code, @cntrct_no, @dtls_id, @"& _ 
                "last_costea, @last_quanity, @last_amount, @total_costea, @total_quanity, @total_"& _ 
                "amount)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@closing_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closing_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjct_code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjct_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dtls_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dtls_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@last_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "last_costea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@last_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "last_quanity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@last_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "last_amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@total_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "total_costea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@total_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "total_quanity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@total_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "total_amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT closing_date, prjct_code, cntrct_no, dtls_id, last_costea, last_quanity, l"& _ 
                "ast_amount, total_costea, total_quanity, total_amount FROM dbo.productions"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.productionsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.productionsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.productionsDataTable = New 現場データDataSet.productionsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.productionsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "productions")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal closing_date As Date, ByVal prjct_code As String, ByVal cntrct_no As Short, ByVal dtls_id As Integer, ByVal last_costea As Decimal, ByVal last_quanity As Decimal, ByVal last_amount As Decimal, ByVal total_costea As Decimal, ByVal total_quanity As Decimal, ByVal total_amount As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(closing_date,Date)
            If (prjct_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjct_code")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(prjct_code,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(cntrct_no,Short)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(dtls_id,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(last_costea,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(last_quanity,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(last_amount,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(total_costea,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(total_quanity,Decimal)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(total_amount,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class project_cost_breakdownsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "project_cost_breakdowns"
            tableMapping.ColumnMappings.Add("prjctcst_bd_id", "prjctcst_bd_id")
            tableMapping.ColumnMappings.Add("prjctcst_id", "prjctcst_id")
            tableMapping.ColumnMappings.Add("cstmstr_id", "cstmstr_id")
            tableMapping.ColumnMappings.Add("prjctcst_bd_no", "prjctcst_bd_no")
            tableMapping.ColumnMappings.Add("prjctcst_bd_name", "prjctcst_bd_name")
            tableMapping.ColumnMappings.Add("prjctcst_bd_spec", "prjctcst_bd_spec")
            tableMapping.ColumnMappings.Add("prjctcst_bd_unit", "prjctcst_bd_unit")
            tableMapping.ColumnMappings.Add("prjctcst_bd_quanity", "prjctcst_bd_quanity")
            tableMapping.ColumnMappings.Add("prjctcst_bd_costea", "prjctcst_bd_costea")
            tableMapping.ColumnMappings.Add("prjctcst_bd_labor", "prjctcst_bd_labor")
            tableMapping.ColumnMappings.Add("prjctcst_bd_material", "prjctcst_bd_material")
            tableMapping.ColumnMappings.Add("prjctcst_bd_machine", "prjctcst_bd_machine")
            tableMapping.ColumnMappings.Add("prjctcst_bd_subcntrct", "prjctcst_bd_subcntrct")
            tableMapping.ColumnMappings.Add("prjctcst_bd_expense", "prjctcst_bd_expense")
            tableMapping.ColumnMappings.Add("prjctcst_bd_remarks", "prjctcst_bd_remarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[project_cost_breakdowns] WHERE (([prjctcst_bd_id] = @Original_"& _ 
                "prjctcst_bd_id) AND ([prjctcst_id] = @Original_prjctcst_id) AND ([cstmstr_id] = "& _ 
                "@Original_cstmstr_id) AND ([prjctcst_bd_no] = @Original_prjctcst_bd_no) AND ([pr"& _ 
                "jctcst_bd_name] = @Original_prjctcst_bd_name) AND ([prjctcst_bd_spec] = @Origina"& _ 
                "l_prjctcst_bd_spec) AND ([prjctcst_bd_unit] = @Original_prjctcst_bd_unit) AND (["& _ 
                "prjctcst_bd_quanity] = @Original_prjctcst_bd_quanity) AND ([prjctcst_bd_costea] "& _ 
                "= @Original_prjctcst_bd_costea) AND ([prjctcst_bd_labor] = @Original_prjctcst_bd"& _ 
                "_labor) AND ([prjctcst_bd_material] = @Original_prjctcst_bd_material) AND ([prjc"& _ 
                "tcst_bd_machine] = @Original_prjctcst_bd_machine) AND ([prjctcst_bd_subcntrct] ="& _ 
                " @Original_prjctcst_bd_subcntrct) AND ([prjctcst_bd_expense] = @Original_prjctcs"& _ 
                "t_bd_expense) AND ([prjctcst_bd_remarks] = @Original_prjctcst_bd_remarks))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_spec", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_unit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "prjctcst_bd_quanity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_costea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_labor", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_labor", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_material", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_material", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_machine", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_machine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_subcntrct", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_subcntrct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_expense", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_expense", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[project_cost_breakdowns] ([prjctcst_id], [cstmstr_id], [prjctc"& _ 
                "st_bd_no], [prjctcst_bd_name], [prjctcst_bd_spec], [prjctcst_bd_unit], [prjctcst"& _ 
                "_bd_quanity], [prjctcst_bd_costea], [prjctcst_bd_labor], [prjctcst_bd_material],"& _ 
                " [prjctcst_bd_machine], [prjctcst_bd_subcntrct], [prjctcst_bd_expense], [prjctcs"& _ 
                "t_bd_remarks]) VALUES (@prjctcst_id, @cstmstr_id, @prjctcst_bd_no, @prjctcst_bd_"& _ 
                "name, @prjctcst_bd_spec, @prjctcst_bd_unit, @prjctcst_bd_quanity, @prjctcst_bd_c"& _ 
                "ostea, @prjctcst_bd_labor, @prjctcst_bd_material, @prjctcst_bd_machine, @prjctcs"& _ 
                "t_bd_subcntrct, @prjctcst_bd_expense, @prjctcst_bd_remarks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT prjctcst_bd"& _ 
                "_id, prjctcst_id, cstmstr_id, prjctcst_bd_no, prjctcst_bd_name, prjctcst_bd_spec"& _ 
                ", prjctcst_bd_unit, prjctcst_bd_quanity, prjctcst_bd_costea, prjctcst_bd_labor, "& _ 
                "prjctcst_bd_material, prjctcst_bd_machine, prjctcst_bd_subcntrct, prjctcst_bd_ex"& _ 
                "pense, prjctcst_bd_remarks FROM project_cost_breakdowns WHERE (prjctcst_bd_id = "& _ 
                "SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_spec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_unit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "prjctcst_bd_quanity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_costea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_labor", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_labor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_material", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_material", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_machine", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_machine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_subcntrct", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_subcntrct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_expense", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_expense", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[project_cost_breakdowns] SET [prjctcst_id] = @prjctcst_id, [cstmstr"& _ 
                "_id] = @cstmstr_id, [prjctcst_bd_no] = @prjctcst_bd_no, [prjctcst_bd_name] = @pr"& _ 
                "jctcst_bd_name, [prjctcst_bd_spec] = @prjctcst_bd_spec, [prjctcst_bd_unit] = @pr"& _ 
                "jctcst_bd_unit, [prjctcst_bd_quanity] = @prjctcst_bd_quanity, [prjctcst_bd_coste"& _ 
                "a] = @prjctcst_bd_costea, [prjctcst_bd_labor] = @prjctcst_bd_labor, [prjctcst_bd"& _ 
                "_material] = @prjctcst_bd_material, [prjctcst_bd_machine] = @prjctcst_bd_machine"& _ 
                ", [prjctcst_bd_subcntrct] = @prjctcst_bd_subcntrct, [prjctcst_bd_expense] = @prj"& _ 
                "ctcst_bd_expense, [prjctcst_bd_remarks] = @prjctcst_bd_remarks WHERE (([prjctcst"& _ 
                "_bd_id] = @Original_prjctcst_bd_id) AND ([prjctcst_id] = @Original_prjctcst_id) "& _ 
                "AND ([cstmstr_id] = @Original_cstmstr_id) AND ([prjctcst_bd_no] = @Original_prjc"& _ 
                "tcst_bd_no) AND ([prjctcst_bd_name] = @Original_prjctcst_bd_name) AND ([prjctcst"& _ 
                "_bd_spec] = @Original_prjctcst_bd_spec) AND ([prjctcst_bd_unit] = @Original_prjc"& _ 
                "tcst_bd_unit) AND ([prjctcst_bd_quanity] = @Original_prjctcst_bd_quanity) AND (["& _ 
                "prjctcst_bd_costea] = @Original_prjctcst_bd_costea) AND ([prjctcst_bd_labor] = @"& _ 
                "Original_prjctcst_bd_labor) AND ([prjctcst_bd_material] = @Original_prjctcst_bd_"& _ 
                "material) AND ([prjctcst_bd_machine] = @Original_prjctcst_bd_machine) AND ([prjc"& _ 
                "tcst_bd_subcntrct] = @Original_prjctcst_bd_subcntrct) AND ([prjctcst_bd_expense]"& _ 
                " = @Original_prjctcst_bd_expense) AND ([prjctcst_bd_remarks] = @Original_prjctcs"& _ 
                "t_bd_remarks));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT prjctcst_bd_id, prjctcst_id, cstmstr_id, prjctcst_bd_no,"& _ 
                " prjctcst_bd_name, prjctcst_bd_spec, prjctcst_bd_unit, prjctcst_bd_quanity, prjc"& _ 
                "tcst_bd_costea, prjctcst_bd_labor, prjctcst_bd_material, prjctcst_bd_machine, pr"& _ 
                "jctcst_bd_subcntrct, prjctcst_bd_expense, prjctcst_bd_remarks FROM project_cost_"& _ 
                "breakdowns WHERE (prjctcst_bd_id = @prjctcst_bd_id)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstmstr_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_spec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_unit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "prjctcst_bd_quanity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_costea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_labor", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_labor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_material", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_material", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_machine", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_machine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_subcntrct", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_subcntrct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_expense", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_expense", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstmstr_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstmstr_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_spec", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_unit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "prjctcst_bd_quanity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_costea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_labor", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_labor", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_material", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_material", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_machine", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_machine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_subcntrct", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_subcntrct", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_expense", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_expense", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_bd_remarks", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_bd_id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_bd_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT prjctcst_bd_id, prjctcst_id, cstmstr_id, prjctcst_bd_no, prjctcst_bd_name,"& _ 
                " prjctcst_bd_spec, prjctcst_bd_unit, prjctcst_bd_quanity, prjctcst_bd_costea, pr"& _ 
                "jctcst_bd_labor, prjctcst_bd_material, prjctcst_bd_machine, prjctcst_bd_subcntrc"& _ 
                "t, prjctcst_bd_expense, prjctcst_bd_remarks FROM dbo.project_cost_breakdowns"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.project_cost_breakdownsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.project_cost_breakdownsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.project_cost_breakdownsDataTable = New 現場データDataSet.project_cost_breakdownsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.project_cost_breakdownsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "project_cost_breakdowns")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_prjctcst_bd_id As Integer, ByVal Original_prjctcst_id As Integer, ByVal Original_cstmstr_id As Integer, ByVal Original_prjctcst_bd_no As Short, ByVal Original_prjctcst_bd_name As String, ByVal Original_prjctcst_bd_spec As String, ByVal Original_prjctcst_bd_unit As String, ByVal Original_prjctcst_bd_quanity As Decimal, ByVal Original_prjctcst_bd_costea As Decimal, ByVal Original_prjctcst_bd_labor As Decimal, ByVal Original_prjctcst_bd_material As Decimal, ByVal Original_prjctcst_bd_machine As Decimal, ByVal Original_prjctcst_bd_subcntrct As Decimal, ByVal Original_prjctcst_bd_expense As Decimal, ByVal Original_prjctcst_bd_remarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_prjctcst_bd_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_prjctcst_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_cstmstr_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_prjctcst_bd_no,Short)
            If (Original_prjctcst_bd_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjctcst_bd_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_prjctcst_bd_name,String)
            End If
            If (Original_prjctcst_bd_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjctcst_bd_spec")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_prjctcst_bd_spec,String)
            End If
            If (Original_prjctcst_bd_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjctcst_bd_unit")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_prjctcst_bd_unit,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_prjctcst_bd_quanity,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_prjctcst_bd_costea,Decimal)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_prjctcst_bd_labor,Decimal)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_prjctcst_bd_material,Decimal)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_prjctcst_bd_machine,Decimal)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_prjctcst_bd_subcntrct,Decimal)
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_prjctcst_bd_expense,Decimal)
            If (Original_prjctcst_bd_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjctcst_bd_remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_prjctcst_bd_remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal prjctcst_id As Integer, ByVal cstmstr_id As Integer, ByVal prjctcst_bd_no As Short, ByVal prjctcst_bd_name As String, ByVal prjctcst_bd_spec As String, ByVal prjctcst_bd_unit As String, ByVal prjctcst_bd_quanity As Decimal, ByVal prjctcst_bd_costea As Decimal, ByVal prjctcst_bd_labor As Decimal, ByVal prjctcst_bd_material As Decimal, ByVal prjctcst_bd_machine As Decimal, ByVal prjctcst_bd_subcntrct As Decimal, ByVal prjctcst_bd_expense As Decimal, ByVal prjctcst_bd_remarks As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(prjctcst_id,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(cstmstr_id,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(prjctcst_bd_no,Short)
            If (prjctcst_bd_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjctcst_bd_name")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(prjctcst_bd_name,String)
            End If
            If (prjctcst_bd_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjctcst_bd_spec")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(prjctcst_bd_spec,String)
            End If
            If (prjctcst_bd_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjctcst_bd_unit")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(prjctcst_bd_unit,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(prjctcst_bd_quanity,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(prjctcst_bd_costea,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(prjctcst_bd_labor,Decimal)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(prjctcst_bd_material,Decimal)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(prjctcst_bd_machine,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(prjctcst_bd_subcntrct,Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(prjctcst_bd_expense,Decimal)
            If (prjctcst_bd_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjctcst_bd_remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(prjctcst_bd_remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal prjctcst_id As Integer,  _
                    ByVal cstmstr_id As Integer,  _
                    ByVal prjctcst_bd_no As Short,  _
                    ByVal prjctcst_bd_name As String,  _
                    ByVal prjctcst_bd_spec As String,  _
                    ByVal prjctcst_bd_unit As String,  _
                    ByVal prjctcst_bd_quanity As Decimal,  _
                    ByVal prjctcst_bd_costea As Decimal,  _
                    ByVal prjctcst_bd_labor As Decimal,  _
                    ByVal prjctcst_bd_material As Decimal,  _
                    ByVal prjctcst_bd_machine As Decimal,  _
                    ByVal prjctcst_bd_subcntrct As Decimal,  _
                    ByVal prjctcst_bd_expense As Decimal,  _
                    ByVal prjctcst_bd_remarks As String,  _
                    ByVal Original_prjctcst_bd_id As Integer,  _
                    ByVal Original_prjctcst_id As Integer,  _
                    ByVal Original_cstmstr_id As Integer,  _
                    ByVal Original_prjctcst_bd_no As Short,  _
                    ByVal Original_prjctcst_bd_name As String,  _
                    ByVal Original_prjctcst_bd_spec As String,  _
                    ByVal Original_prjctcst_bd_unit As String,  _
                    ByVal Original_prjctcst_bd_quanity As Decimal,  _
                    ByVal Original_prjctcst_bd_costea As Decimal,  _
                    ByVal Original_prjctcst_bd_labor As Decimal,  _
                    ByVal Original_prjctcst_bd_material As Decimal,  _
                    ByVal Original_prjctcst_bd_machine As Decimal,  _
                    ByVal Original_prjctcst_bd_subcntrct As Decimal,  _
                    ByVal Original_prjctcst_bd_expense As Decimal,  _
                    ByVal Original_prjctcst_bd_remarks As String,  _
                    ByVal prjctcst_bd_id As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(prjctcst_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(cstmstr_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(prjctcst_bd_no,Short)
            If (prjctcst_bd_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjctcst_bd_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(prjctcst_bd_name,String)
            End If
            If (prjctcst_bd_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjctcst_bd_spec")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(prjctcst_bd_spec,String)
            End If
            If (prjctcst_bd_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjctcst_bd_unit")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(prjctcst_bd_unit,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(prjctcst_bd_quanity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(prjctcst_bd_costea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(prjctcst_bd_labor,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(prjctcst_bd_material,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(prjctcst_bd_machine,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(prjctcst_bd_subcntrct,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(prjctcst_bd_expense,Decimal)
            If (prjctcst_bd_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjctcst_bd_remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(prjctcst_bd_remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_prjctcst_bd_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_prjctcst_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_cstmstr_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_prjctcst_bd_no,Short)
            If (Original_prjctcst_bd_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjctcst_bd_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_prjctcst_bd_name,String)
            End If
            If (Original_prjctcst_bd_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjctcst_bd_spec")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_prjctcst_bd_spec,String)
            End If
            If (Original_prjctcst_bd_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjctcst_bd_unit")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_prjctcst_bd_unit,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_prjctcst_bd_quanity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_prjctcst_bd_costea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_prjctcst_bd_labor,Decimal)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_prjctcst_bd_material,Decimal)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_prjctcst_bd_machine,Decimal)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_prjctcst_bd_subcntrct,Decimal)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_prjctcst_bd_expense,Decimal)
            If (Original_prjctcst_bd_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjctcst_bd_remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_prjctcst_bd_remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(prjctcst_bd_id,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal prjctcst_id As Integer,  _
                    ByVal cstmstr_id As Integer,  _
                    ByVal prjctcst_bd_no As Short,  _
                    ByVal prjctcst_bd_name As String,  _
                    ByVal prjctcst_bd_spec As String,  _
                    ByVal prjctcst_bd_unit As String,  _
                    ByVal prjctcst_bd_quanity As Decimal,  _
                    ByVal prjctcst_bd_costea As Decimal,  _
                    ByVal prjctcst_bd_labor As Decimal,  _
                    ByVal prjctcst_bd_material As Decimal,  _
                    ByVal prjctcst_bd_machine As Decimal,  _
                    ByVal prjctcst_bd_subcntrct As Decimal,  _
                    ByVal prjctcst_bd_expense As Decimal,  _
                    ByVal prjctcst_bd_remarks As String,  _
                    ByVal Original_prjctcst_bd_id As Integer,  _
                    ByVal Original_prjctcst_id As Integer,  _
                    ByVal Original_cstmstr_id As Integer,  _
                    ByVal Original_prjctcst_bd_no As Short,  _
                    ByVal Original_prjctcst_bd_name As String,  _
                    ByVal Original_prjctcst_bd_spec As String,  _
                    ByVal Original_prjctcst_bd_unit As String,  _
                    ByVal Original_prjctcst_bd_quanity As Decimal,  _
                    ByVal Original_prjctcst_bd_costea As Decimal,  _
                    ByVal Original_prjctcst_bd_labor As Decimal,  _
                    ByVal Original_prjctcst_bd_material As Decimal,  _
                    ByVal Original_prjctcst_bd_machine As Decimal,  _
                    ByVal Original_prjctcst_bd_subcntrct As Decimal,  _
                    ByVal Original_prjctcst_bd_expense As Decimal,  _
                    ByVal Original_prjctcst_bd_remarks As String) As Integer
            Return Me.Update(prjctcst_id, cstmstr_id, prjctcst_bd_no, prjctcst_bd_name, prjctcst_bd_spec, prjctcst_bd_unit, prjctcst_bd_quanity, prjctcst_bd_costea, prjctcst_bd_labor, prjctcst_bd_material, prjctcst_bd_machine, prjctcst_bd_subcntrct, prjctcst_bd_expense, prjctcst_bd_remarks, Original_prjctcst_bd_id, Original_prjctcst_id, Original_cstmstr_id, Original_prjctcst_bd_no, Original_prjctcst_bd_name, Original_prjctcst_bd_spec, Original_prjctcst_bd_unit, Original_prjctcst_bd_quanity, Original_prjctcst_bd_costea, Original_prjctcst_bd_labor, Original_prjctcst_bd_material, Original_prjctcst_bd_machine, Original_prjctcst_bd_subcntrct, Original_prjctcst_bd_expense, Original_prjctcst_bd_remarks, Original_prjctcst_bd_id)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class project_costsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "project_costs"
            tableMapping.ColumnMappings.Add("prjctcst_id", "prjctcst_id")
            tableMapping.ColumnMappings.Add("cntrct_no", "cntrct_no")
            tableMapping.ColumnMappings.Add("cstclss_code", "cstclss_code")
            tableMapping.ColumnMappings.Add("prjctcst_no", "prjctcst_no")
            tableMapping.ColumnMappings.Add("prjctcst_name", "prjctcst_name")
            tableMapping.ColumnMappings.Add("prjctcst_spec", "prjctcst_spec")
            tableMapping.ColumnMappings.Add("prjctcst_unit", "prjctcst_unit")
            tableMapping.ColumnMappings.Add("prjctcst_quanity", "prjctcst_quanity")
            tableMapping.ColumnMappings.Add("prjctcst_costea", "prjctcst_costea")
            tableMapping.ColumnMappings.Add("prjctcst_laborea", "prjctcst_laborea")
            tableMapping.ColumnMappings.Add("prjctcst_machineea", "prjctcst_machineea")
            tableMapping.ColumnMappings.Add("prjctcst_subcntrctea", "prjctcst_subcntrctea")
            tableMapping.ColumnMappings.Add("prjctcst_expenseea", "prjctcst_expenseea")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[project_costs] WHERE (([prjctcst_id] = @Original_prjctcst_id) "& _ 
                "AND ([cntrct_no] = @Original_cntrct_no) AND ([cstclss_code] = @Original_cstclss_"& _ 
                "code) AND ([prjctcst_no] = @Original_prjctcst_no) AND ([prjctcst_name] = @Origin"& _ 
                "al_prjctcst_name) AND ([prjctcst_spec] = @Original_prjctcst_spec) AND ([prjctcst"& _ 
                "_unit] = @Original_prjctcst_unit) AND ([prjctcst_quanity] = @Original_prjctcst_q"& _ 
                "uanity) AND ([prjctcst_costea] = @Original_prjctcst_costea) AND ([prjctcst_labor"& _ 
                "ea] = @Original_prjctcst_laborea) AND ([prjctcst_machineea] = @Original_prjctcst"& _ 
                "_machineea) AND ([prjctcst_subcntrctea] = @Original_prjctcst_subcntrctea) AND (["& _ 
                "prjctcst_expenseea] = @Original_prjctcst_expenseea))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_spec", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_unit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "prjctcst_quanity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_costea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_laborea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_laborea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_machineea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_machineea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_subcntrctea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_subcntrctea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_expenseea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_expenseea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[project_costs] ([cntrct_no], [cstclss_code], [prjctcst_no], [p"& _ 
                "rjctcst_name], [prjctcst_spec], [prjctcst_unit], [prjctcst_quanity], [prjctcst_c"& _ 
                "ostea], [prjctcst_laborea], [prjctcst_machineea], [prjctcst_subcntrctea], [prjct"& _ 
                "cst_expenseea]) VALUES (@cntrct_no, @cstclss_code, @prjctcst_no, @prjctcst_name,"& _ 
                " @prjctcst_spec, @prjctcst_unit, @prjctcst_quanity, @prjctcst_costea, @prjctcst_"& _ 
                "laborea, @prjctcst_machineea, @prjctcst_subcntrctea, @prjctcst_expenseea);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT prjctcst_id, cntrct_no, cstclss_code, prjctcst_no, prjctcst_name, prjctcst_sp"& _ 
                "ec, prjctcst_unit, prjctcst_quanity, prjctcst_costea, prjctcst_laborea, prjctcst"& _ 
                "_machineea, prjctcst_subcntrctea, prjctcst_expenseea FROM project_costs WHERE (p"& _ 
                "rjctcst_id = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_spec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_unit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "prjctcst_quanity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_costea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_laborea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_laborea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_machineea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_machineea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_subcntrctea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_subcntrctea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_expenseea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_expenseea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[project_costs] SET [cntrct_no] = @cntrct_no, [cstclss_code] = @cstc"& _ 
                "lss_code, [prjctcst_no] = @prjctcst_no, [prjctcst_name] = @prjctcst_name, [prjct"& _ 
                "cst_spec] = @prjctcst_spec, [prjctcst_unit] = @prjctcst_unit, [prjctcst_quanity]"& _ 
                " = @prjctcst_quanity, [prjctcst_costea] = @prjctcst_costea, [prjctcst_laborea] ="& _ 
                " @prjctcst_laborea, [prjctcst_machineea] = @prjctcst_machineea, [prjctcst_subcnt"& _ 
                "rctea] = @prjctcst_subcntrctea, [prjctcst_expenseea] = @prjctcst_expenseea WHERE"& _ 
                " (([prjctcst_id] = @Original_prjctcst_id) AND ([cntrct_no] = @Original_cntrct_no"& _ 
                ") AND ([cstclss_code] = @Original_cstclss_code) AND ([prjctcst_no] = @Original_p"& _ 
                "rjctcst_no) AND ([prjctcst_name] = @Original_prjctcst_name) AND ([prjctcst_spec]"& _ 
                " = @Original_prjctcst_spec) AND ([prjctcst_unit] = @Original_prjctcst_unit) AND "& _ 
                "([prjctcst_quanity] = @Original_prjctcst_quanity) AND ([prjctcst_costea] = @Orig"& _ 
                "inal_prjctcst_costea) AND ([prjctcst_laborea] = @Original_prjctcst_laborea) AND "& _ 
                "([prjctcst_machineea] = @Original_prjctcst_machineea) AND ([prjctcst_subcntrctea"& _ 
                "] = @Original_prjctcst_subcntrctea) AND ([prjctcst_expenseea] = @Original_prjctc"& _ 
                "st_expenseea));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT prjctcst_id, cntrct_no, cstclss_code, prjctcst_no, prjct"& _ 
                "cst_name, prjctcst_spec, prjctcst_unit, prjctcst_quanity, prjctcst_costea, prjct"& _ 
                "cst_laborea, prjctcst_machineea, prjctcst_subcntrctea, prjctcst_expenseea FROM p"& _ 
                "roject_costs WHERE (prjctcst_id = @prjctcst_id)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_spec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_unit", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "prjctcst_quanity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_costea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_laborea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_laborea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_machineea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_machineea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_subcntrctea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_subcntrctea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_expenseea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_expenseea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cstclss_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cstclss_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_spec", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_spec", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_unit", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_unit", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_quanity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 15, 2, "prjctcst_quanity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_costea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_costea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_laborea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_laborea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_machineea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_machineea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_subcntrctea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_subcntrctea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prjctcst_expenseea", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_expenseea", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prjctcst_id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "prjctcst_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT prjctcst_id, cntrct_no, cstclss_code, prjctcst_no, prjctcst_name, prjctcst"& _ 
                "_spec, prjctcst_unit, prjctcst_quanity, prjctcst_costea, prjctcst_laborea, prjct"& _ 
                "cst_machineea, prjctcst_subcntrctea, prjctcst_expenseea FROM dbo.project_costs"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.project_costsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.project_costsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.project_costsDataTable = New 現場データDataSet.project_costsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.project_costsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "project_costs")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_prjctcst_id As Integer, ByVal Original_cntrct_no As Short, ByVal Original_cstclss_code As Short, ByVal Original_prjctcst_no As Short, ByVal Original_prjctcst_name As String, ByVal Original_prjctcst_spec As String, ByVal Original_prjctcst_unit As String, ByVal Original_prjctcst_quanity As Decimal, ByVal Original_prjctcst_costea As Decimal, ByVal Original_prjctcst_laborea As Decimal, ByVal Original_prjctcst_machineea As Decimal, ByVal Original_prjctcst_subcntrctea As Decimal, ByVal Original_prjctcst_expenseea As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_prjctcst_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_cntrct_no,Short)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_cstclss_code,Short)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_prjctcst_no,Short)
            If (Original_prjctcst_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjctcst_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_prjctcst_name,String)
            End If
            If (Original_prjctcst_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjctcst_spec")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_prjctcst_spec,String)
            End If
            If (Original_prjctcst_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjctcst_unit")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_prjctcst_unit,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_prjctcst_quanity,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_prjctcst_costea,Decimal)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_prjctcst_laborea,Decimal)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_prjctcst_machineea,Decimal)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_prjctcst_subcntrctea,Decimal)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_prjctcst_expenseea,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal cntrct_no As Short, ByVal cstclss_code As Short, ByVal prjctcst_no As Short, ByVal prjctcst_name As String, ByVal prjctcst_spec As String, ByVal prjctcst_unit As String, ByVal prjctcst_quanity As Decimal, ByVal prjctcst_costea As Decimal, ByVal prjctcst_laborea As Decimal, ByVal prjctcst_machineea As Decimal, ByVal prjctcst_subcntrctea As Decimal, ByVal prjctcst_expenseea As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(cntrct_no,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(cstclss_code,Short)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(prjctcst_no,Short)
            If (prjctcst_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjctcst_name")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(prjctcst_name,String)
            End If
            If (prjctcst_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjctcst_spec")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(prjctcst_spec,String)
            End If
            If (prjctcst_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjctcst_unit")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(prjctcst_unit,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(prjctcst_quanity,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(prjctcst_costea,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(prjctcst_laborea,Decimal)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(prjctcst_machineea,Decimal)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(prjctcst_subcntrctea,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(prjctcst_expenseea,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal cntrct_no As Short,  _
                    ByVal cstclss_code As Short,  _
                    ByVal prjctcst_no As Short,  _
                    ByVal prjctcst_name As String,  _
                    ByVal prjctcst_spec As String,  _
                    ByVal prjctcst_unit As String,  _
                    ByVal prjctcst_quanity As Decimal,  _
                    ByVal prjctcst_costea As Decimal,  _
                    ByVal prjctcst_laborea As Decimal,  _
                    ByVal prjctcst_machineea As Decimal,  _
                    ByVal prjctcst_subcntrctea As Decimal,  _
                    ByVal prjctcst_expenseea As Decimal,  _
                    ByVal Original_prjctcst_id As Integer,  _
                    ByVal Original_cntrct_no As Short,  _
                    ByVal Original_cstclss_code As Short,  _
                    ByVal Original_prjctcst_no As Short,  _
                    ByVal Original_prjctcst_name As String,  _
                    ByVal Original_prjctcst_spec As String,  _
                    ByVal Original_prjctcst_unit As String,  _
                    ByVal Original_prjctcst_quanity As Decimal,  _
                    ByVal Original_prjctcst_costea As Decimal,  _
                    ByVal Original_prjctcst_laborea As Decimal,  _
                    ByVal Original_prjctcst_machineea As Decimal,  _
                    ByVal Original_prjctcst_subcntrctea As Decimal,  _
                    ByVal Original_prjctcst_expenseea As Decimal,  _
                    ByVal prjctcst_id As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(cntrct_no,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(cstclss_code,Short)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(prjctcst_no,Short)
            If (prjctcst_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjctcst_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(prjctcst_name,String)
            End If
            If (prjctcst_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjctcst_spec")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(prjctcst_spec,String)
            End If
            If (prjctcst_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prjctcst_unit")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(prjctcst_unit,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(prjctcst_quanity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(prjctcst_costea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(prjctcst_laborea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(prjctcst_machineea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(prjctcst_subcntrctea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(prjctcst_expenseea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_prjctcst_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_cntrct_no,Short)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_cstclss_code,Short)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_prjctcst_no,Short)
            If (Original_prjctcst_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjctcst_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_prjctcst_name,String)
            End If
            If (Original_prjctcst_spec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjctcst_spec")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_prjctcst_spec,String)
            End If
            If (Original_prjctcst_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_prjctcst_unit")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_prjctcst_unit,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_prjctcst_quanity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_prjctcst_costea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_prjctcst_laborea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_prjctcst_machineea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_prjctcst_subcntrctea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_prjctcst_expenseea,Decimal)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(prjctcst_id,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal cntrct_no As Short,  _
                    ByVal cstclss_code As Short,  _
                    ByVal prjctcst_no As Short,  _
                    ByVal prjctcst_name As String,  _
                    ByVal prjctcst_spec As String,  _
                    ByVal prjctcst_unit As String,  _
                    ByVal prjctcst_quanity As Decimal,  _
                    ByVal prjctcst_costea As Decimal,  _
                    ByVal prjctcst_laborea As Decimal,  _
                    ByVal prjctcst_machineea As Decimal,  _
                    ByVal prjctcst_subcntrctea As Decimal,  _
                    ByVal prjctcst_expenseea As Decimal,  _
                    ByVal Original_prjctcst_id As Integer,  _
                    ByVal Original_cntrct_no As Short,  _
                    ByVal Original_cstclss_code As Short,  _
                    ByVal Original_prjctcst_no As Short,  _
                    ByVal Original_prjctcst_name As String,  _
                    ByVal Original_prjctcst_spec As String,  _
                    ByVal Original_prjctcst_unit As String,  _
                    ByVal Original_prjctcst_quanity As Decimal,  _
                    ByVal Original_prjctcst_costea As Decimal,  _
                    ByVal Original_prjctcst_laborea As Decimal,  _
                    ByVal Original_prjctcst_machineea As Decimal,  _
                    ByVal Original_prjctcst_subcntrctea As Decimal,  _
                    ByVal Original_prjctcst_expenseea As Decimal) As Integer
            Return Me.Update(cntrct_no, cstclss_code, prjctcst_no, prjctcst_name, prjctcst_spec, prjctcst_unit, prjctcst_quanity, prjctcst_costea, prjctcst_laborea, prjctcst_machineea, prjctcst_subcntrctea, prjctcst_expenseea, Original_prjctcst_id, Original_cntrct_no, Original_cstclss_code, Original_prjctcst_no, Original_prjctcst_name, Original_prjctcst_spec, Original_prjctcst_unit, Original_prjctcst_quanity, Original_prjctcst_costea, Original_prjctcst_laborea, Original_prjctcst_machineea, Original_prjctcst_subcntrctea, Original_prjctcst_expenseea, Original_prjctcst_id)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class purchase_ordersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "purchase_orders"
            tableMapping.ColumnMappings.Add("outsrcr_code", "outsrcr_code")
            tableMapping.ColumnMappings.Add("s_worktype_code", "s_worktype_code")
            tableMapping.ColumnMappings.Add("no", "no")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[purchase_orders] ([outsrcr_code], [s_worktype_code], [no]) VAL"& _ 
                "UES (@outsrcr_code, @s_worktype_code, @no)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@outsrcr_code", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "outsrcr_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_worktype_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_worktype_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@no", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT outsrcr_code, s_worktype_code, no FROM dbo.purchase_orders"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.purchase_ordersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.purchase_ordersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.purchase_ordersDataTable = New 現場データDataSet.purchase_ordersDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.purchase_ordersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "purchase_orders")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal outsrcr_code As Date, ByVal s_worktype_code As Short, ByVal no As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(outsrcr_code,Date)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(s_worktype_code,Short)
            If (no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("no")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(no,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class site_costsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "site_costs"
            tableMapping.ColumnMappings.Add("stcst_id", "stcst_id")
            tableMapping.ColumnMappings.Add("cntrct_no", "cntrct_no")
            tableMapping.ColumnMappings.Add("stcst_code", "stcst_code")
            tableMapping.ColumnMappings.Add("stcst_name", "stcst_name")
            tableMapping.ColumnMappings.Add("stcst_amount", "stcst_amount")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[site_costs] WHERE (([stcst_id] = @Original_stcst_id) AND ([cnt"& _ 
                "rct_no] = @Original_cntrct_no) AND ([stcst_code] = @Original_stcst_code) AND ([s"& _ 
                "tcst_name] = @Original_stcst_name) AND ([stcst_amount] = @Original_stcst_amount)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stcst_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stcst_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stcst_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stcst_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[site_costs] ([cntrct_no], [stcst_code], [stcst_name], [stcst_a"& _ 
                "mount]) VALUES (@cntrct_no, @stcst_code, @stcst_name, @stcst_amount);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT st"& _ 
                "cst_id, cntrct_no, stcst_code, stcst_name, stcst_amount FROM site_costs WHERE (s"& _ 
                "tcst_id = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stcst_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stcst_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stcst_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[site_costs] SET [cntrct_no] = @cntrct_no, [stcst_code] = @stcst_cod"& _ 
                "e, [stcst_name] = @stcst_name, [stcst_amount] = @stcst_amount WHERE (([stcst_id]"& _ 
                " = @Original_stcst_id) AND ([cntrct_no] = @Original_cntrct_no) AND ([stcst_code]"& _ 
                " = @Original_stcst_code) AND ([stcst_name] = @Original_stcst_name) AND ([stcst_a"& _ 
                "mount] = @Original_stcst_amount));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT stcst_id, cntrct_no, stcst_code, stcs"& _ 
                "t_name, stcst_amount FROM site_costs WHERE (stcst_id = @stcst_id)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stcst_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stcst_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stcst_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stcst_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stcst_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stcst_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stcst_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stcst_id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "stcst_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT stcst_id, cntrct_no, stcst_code, stcst_name, stcst_amount FROM dbo.site_co"& _ 
                "sts"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.site_costsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.site_costsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.site_costsDataTable = New 現場データDataSet.site_costsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.site_costsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "site_costs")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_stcst_id As Integer, ByVal Original_cntrct_no As Short, ByVal Original_stcst_code As Short, ByVal Original_stcst_name As String, ByVal Original_stcst_amount As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_stcst_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_cntrct_no,Short)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_stcst_code,Short)
            If (Original_stcst_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_stcst_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_stcst_name,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_stcst_amount,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal cntrct_no As Short, ByVal stcst_code As Short, ByVal stcst_name As String, ByVal stcst_amount As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(cntrct_no,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(stcst_code,Short)
            If (stcst_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("stcst_name")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(stcst_name,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(stcst_amount,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal cntrct_no As Short, ByVal stcst_code As Short, ByVal stcst_name As String, ByVal stcst_amount As Decimal, ByVal Original_stcst_id As Integer, ByVal Original_cntrct_no As Short, ByVal Original_stcst_code As Short, ByVal Original_stcst_name As String, ByVal Original_stcst_amount As Decimal, ByVal stcst_id As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(cntrct_no,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(stcst_code,Short)
            If (stcst_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("stcst_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(stcst_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(stcst_amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_stcst_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_cntrct_no,Short)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_stcst_code,Short)
            If (Original_stcst_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_stcst_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_stcst_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_stcst_amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(stcst_id,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal cntrct_no As Short, ByVal stcst_code As Short, ByVal stcst_name As String, ByVal stcst_amount As Decimal, ByVal Original_stcst_id As Integer, ByVal Original_cntrct_no As Short, ByVal Original_stcst_code As Short, ByVal Original_stcst_name As String, ByVal Original_stcst_amount As Decimal) As Integer
            Return Me.Update(cntrct_no, stcst_code, stcst_name, stcst_amount, Original_stcst_id, Original_cntrct_no, Original_stcst_code, Original_stcst_name, Original_stcst_amount, Original_stcst_id)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class site_expensesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "site_expenses"
            tableMapping.ColumnMappings.Add("stexpns_id", "stexpns_id")
            tableMapping.ColumnMappings.Add("cntrct_no", "cntrct_no")
            tableMapping.ColumnMappings.Add("stexpns_code", "stexpns_code")
            tableMapping.ColumnMappings.Add("stexpns_name", "stexpns_name")
            tableMapping.ColumnMappings.Add("stexpns_amount", "stexpns_amount")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[site_expenses] WHERE (([stexpns_id] = @Original_stexpns_id) AN"& _ 
                "D ([cntrct_no] = @Original_cntrct_no) AND ([stexpns_code] = @Original_stexpns_co"& _ 
                "de) AND ([stexpns_name] = @Original_stexpns_name) AND ([stexpns_amount] = @Origi"& _ 
                "nal_stexpns_amount))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stexpns_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stexpns_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stexpns_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stexpns_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[site_expenses] ([cntrct_no], [stexpns_code], [stexpns_name], ["& _ 
                "stexpns_amount]) VALUES (@cntrct_no, @stexpns_code, @stexpns_name, @stexpns_amou"& _ 
                "nt);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT stexpns_id, cntrct_no, stexpns_code, stexpns_name, stexpns_amount F"& _ 
                "ROM site_expenses WHERE (stexpns_id = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stexpns_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stexpns_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stexpns_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[site_expenses] SET [cntrct_no] = @cntrct_no, [stexpns_code] = @stex"& _ 
                "pns_code, [stexpns_name] = @stexpns_name, [stexpns_amount] = @stexpns_amount WHE"& _ 
                "RE (([stexpns_id] = @Original_stexpns_id) AND ([cntrct_no] = @Original_cntrct_no"& _ 
                ") AND ([stexpns_code] = @Original_stexpns_code) AND ([stexpns_name] = @Original_"& _ 
                "stexpns_name) AND ([stexpns_amount] = @Original_stexpns_amount));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT stexpn"& _ 
                "s_id, cntrct_no, stexpns_code, stexpns_name, stexpns_amount FROM site_expenses W"& _ 
                "HERE (stexpns_id = @stexpns_id)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stexpns_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stexpns_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stexpns_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stexpns_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cntrct_no", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cntrct_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stexpns_code", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stexpns_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stexpns_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stexpns_id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "stexpns_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.予算管理システム_仮_.My.MySettings.Default.現場データConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT stexpns_id, cntrct_no, stexpns_code, stexpns_name, stexpns_amount FROM dbo"& _ 
                ".site_expenses"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As 現場データDataSet.site_expensesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As 現場データDataSet.site_expensesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As 現場データDataSet.site_expensesDataTable = New 現場データDataSet.site_expensesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As 現場データDataSet.site_expensesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As 現場データDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "site_expenses")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_stexpns_id As Integer, ByVal Original_cntrct_no As Short, ByVal Original_stexpns_code As Short, ByVal Original_stexpns_name As String, ByVal Original_stexpns_amount As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_stexpns_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_cntrct_no,Short)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_stexpns_code,Short)
            If (Original_stexpns_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_stexpns_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_stexpns_name,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_stexpns_amount,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal cntrct_no As Short, ByVal stexpns_code As Short, ByVal stexpns_name As String, ByVal stexpns_amount As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(cntrct_no,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(stexpns_code,Short)
            If (stexpns_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("stexpns_name")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(stexpns_name,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(stexpns_amount,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal cntrct_no As Short, ByVal stexpns_code As Short, ByVal stexpns_name As String, ByVal stexpns_amount As Decimal, ByVal Original_stexpns_id As Integer, ByVal Original_cntrct_no As Short, ByVal Original_stexpns_code As Short, ByVal Original_stexpns_name As String, ByVal Original_stexpns_amount As Decimal, ByVal stexpns_id As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(cntrct_no,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(stexpns_code,Short)
            If (stexpns_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("stexpns_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(stexpns_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(stexpns_amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_stexpns_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_cntrct_no,Short)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_stexpns_code,Short)
            If (Original_stexpns_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_stexpns_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_stexpns_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_stexpns_amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(stexpns_id,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal cntrct_no As Short, ByVal stexpns_code As Short, ByVal stexpns_name As String, ByVal stexpns_amount As Decimal, ByVal Original_stexpns_id As Integer, ByVal Original_cntrct_no As Short, ByVal Original_stexpns_code As Short, ByVal Original_stexpns_name As String, ByVal Original_stexpns_amount As Decimal) As Integer
            Return Me.Update(cntrct_no, stexpns_code, stexpns_name, stexpns_amount, Original_stexpns_id, Original_cntrct_no, Original_stexpns_code, Original_stexpns_name, Original_stexpns_amount, Original_stexpns_id)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _budget_summaryTableAdapter As budget_summaryTableAdapter
        
        Private _closigdateTableAdapter As closigdateTableAdapter
        
        Private _cost_breakdownsTableAdapter As cost_breakdownsTableAdapter
        
        Private _cost_classesTableAdapter As cost_classesTableAdapter
        
        Private _cost_mastersTableAdapter As cost_mastersTableAdapter
        
        Private _detailsTableAdapter As detailsTableAdapter
        
        Private _estimatesTableAdapter As estimatesTableAdapter
        
        Private _expense_breakdownsTableAdapter As expense_breakdownsTableAdapter
        
        Private _outsourcersTableAdapter As outsourcersTableAdapter
        
        Private _outsourcing_plansTableAdapter As outsourcing_plansTableAdapter
        
        Private _outsourcing_reportsTableAdapter As outsourcing_reportsTableAdapter
        
        Private _productionsTableAdapter As productionsTableAdapter
        
        Private _project_cost_breakdownsTableAdapter As project_cost_breakdownsTableAdapter
        
        Private _project_costsTableAdapter As project_costsTableAdapter
        
        Private _purchase_ordersTableAdapter As purchase_ordersTableAdapter
        
        Private _site_costsTableAdapter As site_costsTableAdapter
        
        Private _site_expensesTableAdapter As site_expensesTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property budget_summaryTableAdapter() As budget_summaryTableAdapter
            Get
                Return Me._budget_summaryTableAdapter
            End Get
            Set
                Me._budget_summaryTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property closigdateTableAdapter() As closigdateTableAdapter
            Get
                Return Me._closigdateTableAdapter
            End Get
            Set
                Me._closigdateTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property cost_breakdownsTableAdapter() As cost_breakdownsTableAdapter
            Get
                Return Me._cost_breakdownsTableAdapter
            End Get
            Set
                Me._cost_breakdownsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property cost_classesTableAdapter() As cost_classesTableAdapter
            Get
                Return Me._cost_classesTableAdapter
            End Get
            Set
                Me._cost_classesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property cost_mastersTableAdapter() As cost_mastersTableAdapter
            Get
                Return Me._cost_mastersTableAdapter
            End Get
            Set
                Me._cost_mastersTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property detailsTableAdapter() As detailsTableAdapter
            Get
                Return Me._detailsTableAdapter
            End Get
            Set
                Me._detailsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property estimatesTableAdapter() As estimatesTableAdapter
            Get
                Return Me._estimatesTableAdapter
            End Get
            Set
                Me._estimatesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property expense_breakdownsTableAdapter() As expense_breakdownsTableAdapter
            Get
                Return Me._expense_breakdownsTableAdapter
            End Get
            Set
                Me._expense_breakdownsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property outsourcersTableAdapter() As outsourcersTableAdapter
            Get
                Return Me._outsourcersTableAdapter
            End Get
            Set
                Me._outsourcersTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property outsourcing_plansTableAdapter() As outsourcing_plansTableAdapter
            Get
                Return Me._outsourcing_plansTableAdapter
            End Get
            Set
                Me._outsourcing_plansTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property outsourcing_reportsTableAdapter() As outsourcing_reportsTableAdapter
            Get
                Return Me._outsourcing_reportsTableAdapter
            End Get
            Set
                Me._outsourcing_reportsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property productionsTableAdapter() As productionsTableAdapter
            Get
                Return Me._productionsTableAdapter
            End Get
            Set
                Me._productionsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property project_cost_breakdownsTableAdapter() As project_cost_breakdownsTableAdapter
            Get
                Return Me._project_cost_breakdownsTableAdapter
            End Get
            Set
                Me._project_cost_breakdownsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property project_costsTableAdapter() As project_costsTableAdapter
            Get
                Return Me._project_costsTableAdapter
            End Get
            Set
                Me._project_costsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property purchase_ordersTableAdapter() As purchase_ordersTableAdapter
            Get
                Return Me._purchase_ordersTableAdapter
            End Get
            Set
                Me._purchase_ordersTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property site_costsTableAdapter() As site_costsTableAdapter
            Get
                Return Me._site_costsTableAdapter
            End Get
            Set
                Me._site_costsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property site_expensesTableAdapter() As site_expensesTableAdapter
            Get
                Return Me._site_expensesTableAdapter
            End Get
            Set
                Me._site_expensesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._budget_summaryTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._budget_summaryTableAdapter.Connection) Is Nothing)) Then
                    Return Me._budget_summaryTableAdapter.Connection
                End If
                If ((Not (Me._closigdateTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._closigdateTableAdapter.Connection) Is Nothing)) Then
                    Return Me._closigdateTableAdapter.Connection
                End If
                If ((Not (Me._cost_breakdownsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cost_breakdownsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cost_breakdownsTableAdapter.Connection
                End If
                If ((Not (Me._cost_classesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cost_classesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cost_classesTableAdapter.Connection
                End If
                If ((Not (Me._cost_mastersTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cost_mastersTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cost_mastersTableAdapter.Connection
                End If
                If ((Not (Me._detailsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._detailsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._detailsTableAdapter.Connection
                End If
                If ((Not (Me._estimatesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._estimatesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._estimatesTableAdapter.Connection
                End If
                If ((Not (Me._expense_breakdownsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._expense_breakdownsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._expense_breakdownsTableAdapter.Connection
                End If
                If ((Not (Me._outsourcersTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._outsourcersTableAdapter.Connection) Is Nothing)) Then
                    Return Me._outsourcersTableAdapter.Connection
                End If
                If ((Not (Me._outsourcing_plansTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._outsourcing_plansTableAdapter.Connection) Is Nothing)) Then
                    Return Me._outsourcing_plansTableAdapter.Connection
                End If
                If ((Not (Me._outsourcing_reportsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._outsourcing_reportsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._outsourcing_reportsTableAdapter.Connection
                End If
                If ((Not (Me._productionsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._productionsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._productionsTableAdapter.Connection
                End If
                If ((Not (Me._project_cost_breakdownsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._project_cost_breakdownsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._project_cost_breakdownsTableAdapter.Connection
                End If
                If ((Not (Me._project_costsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._project_costsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._project_costsTableAdapter.Connection
                End If
                If ((Not (Me._purchase_ordersTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._purchase_ordersTableAdapter.Connection) Is Nothing)) Then
                    Return Me._purchase_ordersTableAdapter.Connection
                End If
                If ((Not (Me._site_costsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._site_costsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._site_costsTableAdapter.Connection
                End If
                If ((Not (Me._site_expensesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._site_expensesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._site_expensesTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._budget_summaryTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._closigdateTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cost_breakdownsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cost_classesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cost_mastersTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._detailsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._estimatesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._expense_breakdownsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._outsourcersTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._outsourcing_plansTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._outsourcing_reportsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._productionsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._project_cost_breakdownsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._project_costsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._purchase_ordersTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._site_costsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._site_expensesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As 現場データDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._budget_summaryTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.budget_summary.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._budget_summaryTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._purchase_ordersTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.purchase_orders.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._purchase_ordersTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._project_costsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.project_costs.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._project_costsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._project_cost_breakdownsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.project_cost_breakdowns.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._project_cost_breakdownsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._productionsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.productions.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._productionsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._outsourcing_reportsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.outsourcing_reports.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._outsourcing_reportsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._outsourcing_plansTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.outsourcing_plans.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._outsourcing_plansTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._site_costsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.site_costs.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._site_costsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._outsourcersTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.outsourcers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._outsourcersTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._estimatesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.estimates.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._estimatesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._detailsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.details.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._detailsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cost_mastersTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.cost_masters.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cost_mastersTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cost_classesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.cost_classes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cost_classesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cost_breakdownsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.cost_breakdowns.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cost_breakdownsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._closigdateTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.closigdate.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._closigdateTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._expense_breakdownsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.expense_breakdowns.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._expense_breakdownsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._site_expensesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.site_expenses.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._site_expensesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As 現場データDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._budget_summaryTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.budget_summary.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._budget_summaryTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._purchase_ordersTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.purchase_orders.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._purchase_ordersTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._project_costsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.project_costs.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._project_costsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._project_cost_breakdownsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.project_cost_breakdowns.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._project_cost_breakdownsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._productionsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.productions.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._productionsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._outsourcing_reportsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.outsourcing_reports.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._outsourcing_reportsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._outsourcing_plansTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.outsourcing_plans.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._outsourcing_plansTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._site_costsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.site_costs.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._site_costsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._outsourcersTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.outsourcers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._outsourcersTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._estimatesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.estimates.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._estimatesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._detailsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.details.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._detailsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cost_mastersTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.cost_masters.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cost_mastersTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cost_classesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.cost_classes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cost_classesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cost_breakdownsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.cost_breakdowns.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cost_breakdownsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._closigdateTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.closigdate.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._closigdateTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._expense_breakdownsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.expense_breakdowns.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._expense_breakdownsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._site_expensesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.site_expenses.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._site_expensesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As 現場データDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._site_expensesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.site_expenses.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._site_expensesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._expense_breakdownsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.expense_breakdowns.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._expense_breakdownsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._closigdateTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.closigdate.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._closigdateTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cost_breakdownsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.cost_breakdowns.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cost_breakdownsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cost_classesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.cost_classes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cost_classesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cost_mastersTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.cost_masters.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cost_mastersTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._detailsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.details.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._detailsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._estimatesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.estimates.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._estimatesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._outsourcersTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.outsourcers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._outsourcersTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._site_costsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.site_costs.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._site_costsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._outsourcing_plansTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.outsourcing_plans.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._outsourcing_plansTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._outsourcing_reportsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.outsourcing_reports.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._outsourcing_reportsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._productionsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.productions.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._productionsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._project_cost_breakdownsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.project_cost_breakdowns.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._project_cost_breakdownsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._project_costsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.project_costs.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._project_costsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._purchase_ordersTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.purchase_orders.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._purchase_ordersTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._budget_summaryTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.budget_summary.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._budget_summaryTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As 現場データDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._budget_summaryTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._budget_summaryTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._closigdateTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._closigdateTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._cost_breakdownsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cost_breakdownsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._cost_classesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cost_classesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._cost_mastersTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cost_mastersTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._detailsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._detailsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._estimatesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._estimatesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._expense_breakdownsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._expense_breakdownsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._outsourcersTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._outsourcersTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._outsourcing_plansTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._outsourcing_plansTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._outsourcing_reportsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._outsourcing_reportsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._productionsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._productionsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._project_cost_breakdownsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._project_cost_breakdownsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._project_costsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._project_costsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._purchase_ordersTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._purchase_ordersTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._site_costsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._site_costsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            If ((Not (Me._site_expensesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._site_expensesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager には接続情報がありません。それぞれの TableAdapterManager TableAdapter プロパティを有効な"& _ 
                        " TableAdapter インスタンスに設定してください。")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("トランザクションを開始できません。現在のデータ接続がトランザクションをサポートしていないか、または現在の状態がトランザクションの開始を許可していません。")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._budget_summaryTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._budget_summaryTableAdapter, Me._budget_summaryTableAdapter.Connection)
                    Me._budget_summaryTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._budget_summaryTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._budget_summaryTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._budget_summaryTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._budget_summaryTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._closigdateTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._closigdateTableAdapter, Me._closigdateTableAdapter.Connection)
                    Me._closigdateTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._closigdateTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._closigdateTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._closigdateTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._closigdateTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cost_breakdownsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cost_breakdownsTableAdapter, Me._cost_breakdownsTableAdapter.Connection)
                    Me._cost_breakdownsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cost_breakdownsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cost_breakdownsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cost_breakdownsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cost_breakdownsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cost_classesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cost_classesTableAdapter, Me._cost_classesTableAdapter.Connection)
                    Me._cost_classesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cost_classesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cost_classesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cost_classesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cost_classesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cost_mastersTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cost_mastersTableAdapter, Me._cost_mastersTableAdapter.Connection)
                    Me._cost_mastersTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cost_mastersTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cost_mastersTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cost_mastersTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cost_mastersTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._detailsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._detailsTableAdapter, Me._detailsTableAdapter.Connection)
                    Me._detailsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._detailsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._detailsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._detailsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._detailsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._estimatesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._estimatesTableAdapter, Me._estimatesTableAdapter.Connection)
                    Me._estimatesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._estimatesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._estimatesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._estimatesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._estimatesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._expense_breakdownsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._expense_breakdownsTableAdapter, Me._expense_breakdownsTableAdapter.Connection)
                    Me._expense_breakdownsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._expense_breakdownsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._expense_breakdownsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._expense_breakdownsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._expense_breakdownsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._outsourcersTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._outsourcersTableAdapter, Me._outsourcersTableAdapter.Connection)
                    Me._outsourcersTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._outsourcersTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._outsourcersTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._outsourcersTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._outsourcersTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._outsourcing_plansTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._outsourcing_plansTableAdapter, Me._outsourcing_plansTableAdapter.Connection)
                    Me._outsourcing_plansTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._outsourcing_plansTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._outsourcing_plansTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._outsourcing_plansTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._outsourcing_plansTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._outsourcing_reportsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._outsourcing_reportsTableAdapter, Me._outsourcing_reportsTableAdapter.Connection)
                    Me._outsourcing_reportsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._outsourcing_reportsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._outsourcing_reportsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._outsourcing_reportsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._outsourcing_reportsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._productionsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._productionsTableAdapter, Me._productionsTableAdapter.Connection)
                    Me._productionsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._productionsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._productionsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._productionsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._productionsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._project_cost_breakdownsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._project_cost_breakdownsTableAdapter, Me._project_cost_breakdownsTableAdapter.Connection)
                    Me._project_cost_breakdownsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._project_cost_breakdownsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._project_cost_breakdownsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._project_cost_breakdownsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._project_cost_breakdownsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._project_costsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._project_costsTableAdapter, Me._project_costsTableAdapter.Connection)
                    Me._project_costsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._project_costsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._project_costsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._project_costsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._project_costsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._purchase_ordersTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._purchase_ordersTableAdapter, Me._purchase_ordersTableAdapter.Connection)
                    Me._purchase_ordersTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._purchase_ordersTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._purchase_ordersTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._purchase_ordersTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._purchase_ordersTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._site_costsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._site_costsTableAdapter, Me._site_costsTableAdapter.Connection)
                    Me._site_costsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._site_costsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._site_costsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._site_costsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._site_costsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._site_expensesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._site_expensesTableAdapter, Me._site_expensesTableAdapter.Connection)
                    Me._site_expensesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._site_expensesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._site_expensesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._site_expensesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._site_expensesTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._budget_summaryTableAdapter) Is Nothing) Then
                    Me._budget_summaryTableAdapter.Connection = CType(revertConnections(Me._budget_summaryTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._budget_summaryTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._closigdateTableAdapter) Is Nothing) Then
                    Me._closigdateTableAdapter.Connection = CType(revertConnections(Me._closigdateTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._closigdateTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cost_breakdownsTableAdapter) Is Nothing) Then
                    Me._cost_breakdownsTableAdapter.Connection = CType(revertConnections(Me._cost_breakdownsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cost_breakdownsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cost_classesTableAdapter) Is Nothing) Then
                    Me._cost_classesTableAdapter.Connection = CType(revertConnections(Me._cost_classesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cost_classesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cost_mastersTableAdapter) Is Nothing) Then
                    Me._cost_mastersTableAdapter.Connection = CType(revertConnections(Me._cost_mastersTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cost_mastersTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._detailsTableAdapter) Is Nothing) Then
                    Me._detailsTableAdapter.Connection = CType(revertConnections(Me._detailsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._detailsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._estimatesTableAdapter) Is Nothing) Then
                    Me._estimatesTableAdapter.Connection = CType(revertConnections(Me._estimatesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._estimatesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._expense_breakdownsTableAdapter) Is Nothing) Then
                    Me._expense_breakdownsTableAdapter.Connection = CType(revertConnections(Me._expense_breakdownsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._expense_breakdownsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._outsourcersTableAdapter) Is Nothing) Then
                    Me._outsourcersTableAdapter.Connection = CType(revertConnections(Me._outsourcersTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._outsourcersTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._outsourcing_plansTableAdapter) Is Nothing) Then
                    Me._outsourcing_plansTableAdapter.Connection = CType(revertConnections(Me._outsourcing_plansTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._outsourcing_plansTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._outsourcing_reportsTableAdapter) Is Nothing) Then
                    Me._outsourcing_reportsTableAdapter.Connection = CType(revertConnections(Me._outsourcing_reportsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._outsourcing_reportsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._productionsTableAdapter) Is Nothing) Then
                    Me._productionsTableAdapter.Connection = CType(revertConnections(Me._productionsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._productionsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._project_cost_breakdownsTableAdapter) Is Nothing) Then
                    Me._project_cost_breakdownsTableAdapter.Connection = CType(revertConnections(Me._project_cost_breakdownsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._project_cost_breakdownsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._project_costsTableAdapter) Is Nothing) Then
                    Me._project_costsTableAdapter.Connection = CType(revertConnections(Me._project_costsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._project_costsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._purchase_ordersTableAdapter) Is Nothing) Then
                    Me._purchase_ordersTableAdapter.Connection = CType(revertConnections(Me._purchase_ordersTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._purchase_ordersTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._site_costsTableAdapter) Is Nothing) Then
                    Me._site_costsTableAdapter.Connection = CType(revertConnections(Me._site_costsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._site_costsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._site_expensesTableAdapter) Is Nothing) Then
                    Me._site_expensesTableAdapter.Connection = CType(revertConnections(Me._site_expensesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._site_expensesTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
